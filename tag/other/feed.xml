<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="https://ohoraming.github.io/tag/other/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://ohoraming.github.io/" rel="alternate" type="text/html" />
  <updated>2022-03-16T14:37:11+09:00</updated>
  <id>https://ohoraming.github.io/tag/other/feed.xml</id>

  
  
  

  
    <title type="html">예비 개발자의 노트 | </title>
  

  
    <subtitle>배움을 기록합니다</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">Git - Git Convention</title>
      <link href="https://ohoraming.github.io/git-convention" rel="alternate" type="text/html" title="Git - Git Convention" />
      <published>2022-03-10T21:25:00+09:00</published>
      <updated>2022-03-10T21:25:00+09:00</updated>
      <id>https://ohoraming.github.io/git-convention</id>
      <content type="html" xml:base="https://ohoraming.github.io/git-convention">&lt;!-- 글 작성하기 --&gt;

&lt;!-- 글이 시작될 때 관련 시리즈를 리스트로 보여줌 --&gt;
&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;여러 가지 포스팅&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./Other-git-convention&quot;&gt;Git - Git Convention&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://codingsight.com/git-branching-naming-convention-best-practices/&quot;&gt;https://codingsight.com/git-branching-naming-convention-best-practices/&lt;/a&gt;의 내용을 번역한 것입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;git-branching-naming-convention-best-practices&quot;&gt;Git Branching Naming Convention: Best Practices&lt;/h2&gt;
&lt;p&gt;Git branch는 Regular와 Temporary branch로 나눔&lt;/p&gt;

&lt;h2 id=&quot;regular-git-branches&quot;&gt;Regular Git Branches&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;영구적인 repository에 씀&lt;/li&gt;
  &lt;li&gt;간단하고 쉬운 naming convention&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;dev(development)&lt;/strong&gt;는 main 개발 branch임&lt;br /&gt;
dev branch의 아이디어는 해당 branch에서만 변경를 일으키고, master branch의 직접적인 변경은 제한함&lt;br /&gt;
dev branch의 변경은 review(검토)를 받고, 테스트 후 master branch와 merge됨&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;master&lt;/strong&gt;는 Git repository의 기본 branch임&lt;br /&gt;
항상 안정적이며, 어떠한 직접적인 check-in도 허용하지 않음&lt;br /&gt;
code review이후에만 merge가 가능함&lt;br /&gt;
팀 구성원 모두가 master를 안정적이며, 최신의 상태로 유지하는 것에 책임이 있음&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;QA 또는 test branch&lt;/strong&gt;는 QA testing과 자동 testing을 위한 모든 코드를 포함하고 있음&lt;br /&gt;
어떠한 변경이 production 환경으로 가기 전, 안정적인 codebase를 위해 반드시 QA testing을 거쳐야 함&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;temporary-git-branches&quot;&gt;Temporary Git Branches&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;이름에서 알 수 있는 것처럼, 필요할 때마다 만들고 없앨 수 있음&lt;/li&gt;
  &lt;li&gt;Bug Fix, Hot Fix, Feature Branches, Experimental Branches, WIP branches 용도로 사용할 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;git-branching-naming-convention&quot;&gt;Git Branching Naming Convention&lt;/h2&gt;
&lt;p&gt;수많은 naming convention이 존재함&lt;br /&gt;
이 중 가장 좋은 일곱 개의 naming convention에 대해 알아보자&lt;/p&gt;

&lt;h2 id=&quot;1-start-branch-name-with-a-group-word&quot;&gt;1. Start branch name with a Group word&lt;/h2&gt;
&lt;p&gt;group word로 branch 이름을 시작하라.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;최고의 방법 중 하나&lt;/li&gt;
  &lt;li&gt;group word는 자신의 작업 흐름과 일치하는 어느것이든 상관 없음&lt;br /&gt;
e.g.)&lt;br /&gt;
&lt;strong&gt;Bug&lt;/strong&gt; - 곧 해결되어야하는 버그,&lt;br /&gt;
&lt;strong&gt;WIP&lt;/strong&gt; - 작업이 진행 중에 있으며, 조만간 끝나지 않을 것이라 예상되지 않을 때&lt;br /&gt;
(WIP: work in process/progress)&lt;/li&gt;
  &lt;li&gt;branch 이름을 봤을 때, 해당 Git branch가 무엇에 대한 것이며, 어떤 목적을 가지고 있는지 알 수 있어야 함&lt;br /&gt;
e.g.) &lt;strong&gt;bug-logo-alignment-issue&lt;/strong&gt;: logo alignment issue를 고치는 중임&lt;br /&gt;
&lt;strong&gt;wip-ioc-container-added&lt;/strong&gt;: IoC container를 추가하는 작업을 진행 중임&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-use-unique-id-in-branch-names&quot;&gt;2. Use Unique ID in branch names&lt;/h2&gt;
&lt;p&gt;branch이름에 고유한 ID를 사용하라.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;branch 이름에 issue tracker ID를 사용할 수 있음&lt;/li&gt;
  &lt;li&gt;버그를 고칠 때, 선호하는 방법임&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;e.g.)&lt;br /&gt;
&lt;strong&gt;wip-8712-add-testing-module&lt;/strong&gt;라는 이름은&lt;br /&gt;
해당 branch가 testing module을 추가하는 업무에 적용되며,&lt;br /&gt;
issue의 tracking Id는 8712이고,&lt;br /&gt;
해당 업무가 진행 중에 있다는 것을 보여줌&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;branch 이름에 외부 tracking ID를 사용하는 것의 장점은 외부 시스템에서 진행 상황을 추적할 수 있다는 것임&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-use-hyphen-or-slash-as-separators&quot;&gt;3. Use Hyphen or Slash as Separators&lt;/h2&gt;
&lt;p&gt;구분자로 하이픈이나 슬래시를 사용하라.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;많은 개발자들은 구분자로 슬래시와 하이픈을 사용함&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;어떤 것을 사용할 지는 자신 또는 자신의 팀의 선호에 달려있음&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;개인적으로, 하이픈은 이름을 읽기 편하게 만들어 주어서 branch 이름의 구분자로 적절하다고 생각함&lt;/li&gt;
  &lt;li&gt;슬래시, 하이픈, 언더스코어 모두 사용할 수 있음&lt;/li&gt;
  &lt;li&gt;중요한 것은 일관되어야 한다는 것임&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;branch 이름에 구분자를 넣으면 두 가지 장점이 있음&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;가독성을 높일 수 있으며, 혼동을 줄여줄 수 있음&lt;/li&gt;
  &lt;li&gt;특히, 많은 branch를 다루고 있다면 관리하기 좋음&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;구분자가 없는 &lt;strong&gt;featureupgradejqueryversionloginmodule&lt;/strong&gt;보다는&lt;br /&gt;
구분자가 있는 &lt;strong&gt;feature_upgrade_jquery_version_login_module&lt;/strong&gt;이 읽기 쉬움&lt;/p&gt;

&lt;h2 id=&quot;4-git-branch-with-author-name&quot;&gt;4. Git Branch with Author Name&lt;/h2&gt;
&lt;p&gt;작성자 이름을 포함하는 Git branch&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;많은 회사들은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;author&amp;gt;_&amp;lt;branch-type&amp;gt;_&amp;lt;branch-name&amp;gt;&lt;/code&gt; 형식에 따라 작성자의 이름이 branch이름에 있는 것을 선호함&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;e.g.)  &lt;strong&gt;rajeev.bera_feature_new-experimental-changes&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;이 방법은 다른 개발자들의 작업과 추가적인 시스템의 진행 상황을 추적하기 좋음&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;5-avoid-using-numbers-only&quot;&gt;5. Avoid using numbers only&lt;/h2&gt;
&lt;p&gt;숫자만 사용하는 것을 피하라.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;몇몇 개발자들은 branch 이름에 issue Id만 기입하는데, 이는 일의 진행에 도움이 되지 않음&lt;/li&gt;
  &lt;li&gt;예를 들어, &lt;strong&gt;9912&lt;/strong&gt;라는 branch 이름은 무엇을 설명하는지 알 수가 없음&lt;/li&gt;
  &lt;li&gt;특히 이 방식은 다른 git branch와 merge하는 중에 혼란과 실수의 가능성만 증가시킴&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;6-avoid-using-all-naming-convention-simultaneously&quot;&gt;6. Avoid using all naming convention simultaneously&lt;/h2&gt;
&lt;p&gt;모든 naming convention을 동시에 사용하는 것을 피하라.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;모든 naming convention을 혼용해 사용하는 것은 좋은 방식이 아님&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;혼란만 가중시키고, 전반적인 처리 과정을 더 복잡하게 만듦&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;팀은 업무 중에 사용할 naming convention을 한번 정한 후, 팀원들이 받아들이도록 해야 함&lt;/li&gt;
  &lt;li&gt;일관성이 가장 중요함&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;7-avoid-long-descriptive-names-for-long-lived-branches&quot;&gt;7. Avoid long descriptive names for long-lived branches&lt;/h2&gt;
&lt;p&gt;오래가는 branch에 길게 설명하는 이름은 피하라.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;branch 이름의 필수적인 특징은 정확해야 하며, 유용한 정보를 주어야 한다는 것임&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;e.g.)&lt;br /&gt;
&lt;strong&gt;wip_login_module_which_will_used_in_the_public_website&lt;/strong&gt;,  &lt;strong&gt;wip_login_module_which_will_used_in_the_internal_website&lt;/strong&gt;&lt;br /&gt;
와 같은 branch 이름의 경우, 길고 상세함
필수적이지 않음
대신에,&lt;br /&gt;
&lt;strong&gt;wip_feature_login_module&lt;/strong&gt;과 같은 branch 이름은 짧지만 branch의 목적을 잘 설명함&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Git의 Branching 모델은 강력하지만, branch를 적절하고 효과적으로 다뤄야만 함&lt;/li&gt;
  &lt;li&gt;필수적인 요건 중 하나는 모든 팀원이 같은 convention을 따라야 하는 것임&lt;/li&gt;
  &lt;li&gt;pre-commit hook과 같은 Git hook을 사용하는 것도 쉬운 방법 중 하나임&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>ohoraming</name>
        
        
      </author>

      

      
        <category term="Other" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
</feed>
