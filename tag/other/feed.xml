<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="https://ohoraming.github.io/tag/other/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://ohoraming.github.io/" rel="alternate" type="text/html" />
  <updated>2022-04-26T16:00:10+09:00</updated>
  <id>https://ohoraming.github.io/tag/other/feed.xml</id>

  
  
  

  
    <title type="html">예비 개발자의 노트 | </title>
  

  
    <subtitle>배움을 기록합니다</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">Git and github</title>
      <link href="https://ohoraming.github.io/git-and-github" rel="alternate" type="text/html" title="Git and github" />
      <published>2022-04-24T22:28:00+09:00</published>
      <updated>2022-04-24T22:28:00+09:00</updated>
      <id>https://ohoraming.github.io/git-and-github</id>
      <content type="html" xml:base="https://ohoraming.github.io/git-and-github">&lt;!-- 글 작성하기 --&gt;

&lt;!-- 글이 시작될 때 관련 시리즈를 리스트로 보여줌 --&gt;
&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;여러 가지 포스팅&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./git-convention&quot;&gt;Git Convention&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./test-code&quot;&gt;Test Code&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./git-and-github&quot;&gt;Git and github&lt;/a&gt;&lt;/li&gt;
    &lt;br /&gt;
    &lt;br /&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;vcs-version-control-system&quot;&gt;VCS (Version Control System)&lt;/h1&gt;
&lt;h2 id=&quot;cvs-centralized-version-control&quot;&gt;CVS (Centralized Version Control)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;서버&lt;/strong&gt;에서 히스토리를 관리&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;즉각적인 동기화&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;서버에 문제&lt;/strong&gt;가 생길시 업무가 &lt;strong&gt;중단&lt;/strong&gt;됨&lt;/li&gt;
  &lt;li&gt;오프라인에서 &lt;strong&gt;인터넷이 없으면 사용 불가&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;dvc-distributed-version-control&quot;&gt;DVC (Distributed Version Control)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;서버 뿐만 아니라 &lt;strong&gt;모든 개발자들이 동일한 히스토리 정보를 가짐&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;서버에 문제가 생겨도 &lt;strong&gt;서로의 정보를 이용해 서버를 복원&lt;/strong&gt;한 뒤 업무를 이어나갈 수 있음&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;오프라인&lt;/strong&gt;에서도 업무 진행 가능&lt;/li&gt;
  &lt;li&gt;private 또는 cloud 이용 가능&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;github&lt;/strong&gt;이 가장 대중적&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;git&quot;&gt;Git&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;변경 사항만 저장하는 delta-based version control과는 다르게, &lt;strong&gt;project의 전체적인 내용을 snapshot&lt;/strong&gt;해서 가지고 있음&lt;/li&gt;
  &lt;li&gt;변경되지 않은 내용은 서로 link를 형성하고 있어서 snap shot이 매우 가벼움&lt;/li&gt;
  &lt;li&gt;버전별, branch별 &lt;strong&gt;이동이 자유로움&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;무료&lt;/strong&gt;, 오픈소스임&lt;/li&gt;
  &lt;li&gt;가볍고, 가장 대중적임&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;오프라인에서도 사용 가능&lt;/strong&gt;함&lt;/li&gt;
  &lt;li&gt;실수를 수정하기 쉬우며 branch를 이용한 협업에서 효율적으로 사용됨&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;git-명령어&quot;&gt;Git 명령어&lt;/h2&gt;
&lt;p&gt;→ &lt;a href=&quot;https://git-scm.com/docs&quot;&gt;git 공식 사이트&lt;/a&gt;에서 모든 명령어 확인 가능&lt;br /&gt;
→ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git 명령어 -option&lt;/code&gt; 형식&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;version 확인&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git --version&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;설정 확인&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config --list&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;‘file’로 설정 확인&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config --global -e&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;carrage-return과 line feed 설정(windows에서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;, mac에서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;input&lt;/code&gt;)&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config --global core.autocrlf true&lt;/code&gt;
&lt;img width=&quot;560&quot; alt=&quot;image&quot; src=&quot;https://user-images.githubusercontent.com/77590526/164983411-0cc494f3-8d54-4549-8b20-0259d7b1731a.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;git 초기화(기본적으로 master branch 형성)&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git init&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;git 상태 보기&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git status&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;git 명령어 관련 속성값 확인하기&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git 명령어 --h&lt;/code&gt;&lt;br /&gt;
e.g.) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git status --h&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add --h&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;git-workflow-이해&quot;&gt;Git workflow 이해&lt;/h2&gt;

&lt;h3 id=&quot;1-working-directory&quot;&gt;1. Working directory&lt;/h3&gt;
&lt;p&gt;→ project 파일을 작업하는 곳&lt;br /&gt;
→ git의 추적 여부에 따라 &lt;strong&gt;untracked&lt;/strong&gt;와 &lt;strong&gt;tracked&lt;/strong&gt;로 나뉨&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;untracked&lt;/strong&gt;: 새로 만들어진 파일이거나 git을 초기화했을 경우&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;tracked&lt;/strong&gt;: git의 추척이 이루어지는 파일&lt;br /&gt;
→ 수정 여부에 따라 &lt;strong&gt;unmodified&lt;/strong&gt;와 &lt;strong&gt;modified&lt;/strong&gt;로 나뉨(이전 버전과의 비교)&lt;br /&gt;
&lt;img width=&quot;465&quot; alt=&quot;image&quot; src=&quot;https://user-images.githubusercontent.com/77590526/165218188-9cd9785f-3e44-4837-bd23-0007da1a0191.png&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;modified 버전만 staging area로 이동 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;관련-명령어&quot;&gt;관련 명령어&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add 특정 파일 이름&lt;/code&gt;&lt;br /&gt;
  → 해당 파일을 working directory에서 staging area로 옮김&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add *.특정 확장자&lt;/code&gt;&lt;br /&gt;
→ 특정한 확장자의 모든 파일을 staging area로 옮김&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add *&lt;/code&gt;&lt;br /&gt;
→ directory의 모든 파일을 staging area로 옮김&lt;br /&gt;
→ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt;으로 시작하는 이름의 파일(e.g.) .gitignore)은 제외&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add .&lt;/code&gt;&lt;br /&gt;
→ directory의 모든 파일을 staging area로 옮김 &lt;br /&gt;
→ 예외 파일 없음&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add *&lt;/code&gt; vs. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add .&lt;/code&gt;&lt;br /&gt;
&lt;a href=&quot;https://stackoverflow.com/questions/26042390/git-add-asterisk-vs-git-add-period&quot;&gt;참고 stackoverflow 글&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;add&lt;/strong&gt; 후(= staging 이후) 파일을 &lt;strong&gt;변경&lt;/strong&gt;하게 되면, 수정된 내용에 대해서는 &lt;strong&gt;tracked modified&lt;/strong&gt; 상태가 됨(이전에 staging한 내용은 그대로 있음)&lt;br /&gt;
&lt;img width=&quot;416&quot; alt=&quot;image&quot; src=&quot;https://user-images.githubusercontent.com/77590526/165227074-3fa102ea-c1f7-4dc1-8ad0-ab2ae8155aa2.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rm --cached 파일이름&lt;/code&gt;&lt;br /&gt;
→ staging area에서 &lt;strong&gt;working directory&lt;/strong&gt;의 &lt;strong&gt;untracked 상태&lt;/strong&gt;로 옮김&lt;/li&gt;
  &lt;li&gt;git tracking하고 싶지 않은 파일은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt;파일을 생성해 명시하면 됨
    &lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  log.log
  *.log
  build/ &amp;lt;- 특정 directory안의 파일들
  build/*.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git status&lt;/code&gt;&lt;br /&gt;
  → 기본적으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git status --long&lt;/code&gt;으로 실행됨&lt;br /&gt;
  &lt;img width=&quot;688&quot; alt=&quot;image&quot; src=&quot;https://user-images.githubusercontent.com/77590526/165230105-22dc2d92-664c-4d1b-af9c-283cfc9eb9b7.png&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;→ 간단하게 보려면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git status -s&lt;/code&gt; 입력 &lt;br /&gt;
  (&lt;strong&gt;A&lt;/strong&gt;: adding, &lt;strong&gt;M&lt;/strong&gt;: modified, &lt;strong&gt;??&lt;/strong&gt;: tracking이전 상태로 working directory에 존재)
  &lt;img width=&quot;132&quot; alt=&quot;image&quot; src=&quot;https://user-images.githubusercontent.com/77590526/165229924-67168910-e83e-4837-aee0-f242fb748d72.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git diff&lt;/code&gt;&lt;br /&gt;
  → working directory의 변경 사항을 보여줌&lt;br /&gt;
  → terminal이 아닌 다른 UI(e.g.)vscode)를 연결해 보고 싶다면,&lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config --global -e&lt;/code&gt;를 실행해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitconfig&lt;/code&gt; 파일에 다음 내용을 추가한 뒤,&lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git difftool&lt;/code&gt;나 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git difftool --staged&lt;/code&gt;를 입력하면 vscode에서 실행됨
    &lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  [diff]
  tool = vscode
  [difftool &quot;vscode&quot;]
  cmd = code --wait --diff $LOCAL $REMOTE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git diff --staged&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git diff --cached&lt;/code&gt;)&lt;br /&gt;
  → staging area의 변경 사항을 보여줌(q로 escape)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-staging-area&quot;&gt;2. Staging area&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;version history에 저장할 준비가 된 파일을 옮겨놓은 곳&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commit&lt;/code&gt; 명령어로 &lt;strong&gt;staging area&lt;/strong&gt;의 파일을 &lt;strong&gt;git repository&lt;/strong&gt;에 옮김&lt;/li&gt;
  &lt;li&gt;각 commit에는 &lt;strong&gt;snapshot된 정보&lt;/strong&gt;를 기반으로 고유한 &lt;strong&gt;hashcode&lt;/strong&gt;가 부여되며, 이를 통해 version 정보를 참조함&lt;/li&gt;
  &lt;li&gt;application 전체를 한꺼번에 commit하기 보다는 &lt;strong&gt;application을 기능적인 작은 단위로 나누어 commit&lt;/strong&gt;하면, 이후에 원하는 변경 사항을 찾아 보기 쉬움&lt;/li&gt;
  &lt;li&gt;commit message는 보통, &lt;strong&gt;현재시제 동사&lt;/strong&gt;로 만듦&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;commit message에 해당하는 코드만 commit 하기!&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;!주의!&lt;/strong&gt;&lt;br /&gt;
  commit message를 벗어나 여러 내용이 추가된 코드를 commit하면, 코드 리뷰시 혼동이 오며 commit history를 읽기 어려워짐&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;관련-명령어-1&quot;&gt;관련 명령어&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log&lt;/code&gt;&lt;br /&gt;
  → git의 전체적인 history확인&lt;br /&gt;
  → 누가, 언제 commit했으며, commit의 title과 description을 확인 할 수 있음&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit -m &quot;commit message&quot;&lt;/code&gt;&lt;br /&gt;
  → 간단히 commit message를 입력해 commit 실행&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit -am &quot;commit message&quot;&lt;/code&gt;&lt;br /&gt;
  → &lt;strong&gt;working directory의 모든 변경 사항을 포함&lt;/strong&gt;해(working directory의 파일을 staging area로 옮기는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add&lt;/code&gt;명령어의 사용을 건너 뜀) commit message를 입력해 commit 실행&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-git-directorygit-repositor&quot;&gt;3. .git directory(.git repositor)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;git version history를 가지는 곳&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checkout&lt;/code&gt; 명령어로 언제든 원하는 version으로 돌아갈 수 있음&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;push&lt;/code&gt; 명령어로 &lt;strong&gt;local&lt;/strong&gt;의 git directory를 &lt;strong&gt;server&lt;/strong&gt;에 upload&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pull&lt;/code&gt; 명령어로 server의 git directory를 local로 download&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;“깃, 깃허브 이건 알고 사용하자,” 유튜브 비디오, 06:49, 게시자 “드림코딩 by 엘리,” 2020년 11월 10일, &lt;a href=&quot;https://youtu.be/lPrxhA4PLoA&quot;&gt;https://youtu.be/lPrxhA4PLoA&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“깃, 깃허브 제대로 배우기 (기본 마스터편, 실무에서 꿀리지 말자),” 유튜브 비디오, 47:13, 게시자 “드림코딩 by 엘리,” 2020년 11월 17일,&lt;a href=&quot;https://youtu.be/Z9dvM7qgN9s&quot;&gt;https://youtu.be/Z9dvM7qgN9s&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content>

      
      
      
      
      

      <author>
          <name>ohoraming</name>
        
        
      </author>

      

      
        <category term="Other" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Test Code</title>
      <link href="https://ohoraming.github.io/Test-Code" rel="alternate" type="text/html" title="Test Code" />
      <published>2022-03-30T22:26:00+09:00</published>
      <updated>2022-03-30T22:26:00+09:00</updated>
      <id>https://ohoraming.github.io/Test%20Code</id>
      <content type="html" xml:base="https://ohoraming.github.io/Test-Code">&lt;!-- 글 작성하기 --&gt;

&lt;!-- 글이 시작될 때 관련 시리즈를 리스트로 보여줌 --&gt;
&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;여러 가지 포스팅&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./git-convention&quot;&gt;Git Convention&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./test-code&quot;&gt;Test Code&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./git-and-github&quot;&gt;Git and github&lt;/a&gt;&lt;/li&gt;
    &lt;br /&gt;
    &lt;br /&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-test-code를-작성하는-이유&quot;&gt;1. Test Code를 작성하는 이유&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;bug 발생 시점이 이를 수록 수정 비용이 적게 듦&lt;br /&gt;
수정 비용: 요구 분석/기획 &amp;lt; 설계 &amp;lt; 구현 &amp;lt; 테스트(QA) &amp;lt; 유지 보수/배포&lt;/li&gt;
  &lt;li&gt;기획 단계에서 요구 조건을 보다 명확하게 이해할 수 있음&lt;/li&gt;
  &lt;li&gt;예외 케이스의 처리 방식을 다각도로 생각해 볼 수 있음&lt;/li&gt;
  &lt;li&gt;기능을 구현할 때마다 이미 쌓여있는 Test Code를 모두 테스트하면, 현재의 코드로 인해 다른 코드들이 받을 수 있는 side effect를 즉시 감지할 수 있음(회귀 테스트(Regression Test))&lt;/li&gt;
  &lt;li&gt;test coverage만큼 코드에 대해 확실할 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-test-code를-작성하는-방법&quot;&gt;2. Test Code를 작성하는 방법&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;케이스 단위로 테스트를 정리(기능별 분리)&lt;/li&gt;
  &lt;li&gt;케이스 별로 실제 행위 유발&lt;/li&gt;
  &lt;li&gt;행위의 결과 확인(pass/fail return)&lt;/li&gt;
  &lt;li&gt;케이스의 자동화&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-주의-사항&quot;&gt;3. 주의 사항&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;많은 Test Code를 작성하고 유지하는 데 시간이 걸림&lt;/li&gt;
  &lt;li&gt;이후, 제품을 완전히 변경한다고 하면 시간 낭비일 수 있음&lt;/li&gt;
  &lt;li&gt;Test Code와 실제 code를 작성하는 개발자가 같다면 사각지대가 발생할 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;4-unit-test-tip&quot;&gt;4. Unit Test Tip&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;여러 테스트에 동일한 데이터를 재사용하지 않아야 함&lt;br /&gt;
→ global instance의 재사용 금지&lt;/li&gt;
  &lt;li&gt;python의 built-in function은 test하지 않아도 됨&lt;br /&gt;
→ 표준 라이브러리는 test의 목표가 되어선 안 됨&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>ohoraming</name>
        
        
      </author>

      

      
        <category term="Other" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Git Convention</title>
      <link href="https://ohoraming.github.io/git-convention" rel="alternate" type="text/html" title="Git Convention" />
      <published>2022-03-10T21:25:00+09:00</published>
      <updated>2022-03-10T21:25:00+09:00</updated>
      <id>https://ohoraming.github.io/git-convention</id>
      <content type="html" xml:base="https://ohoraming.github.io/git-convention">&lt;!-- 글 작성하기 --&gt;

&lt;!-- 글이 시작될 때 관련 시리즈를 리스트로 보여줌 --&gt;
&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;여러 가지 포스팅&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./git-convention&quot;&gt;Git Convention&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./test-code&quot;&gt;Test Code&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./git-and-github&quot;&gt;Git and github&lt;/a&gt;&lt;/li&gt;
    &lt;br /&gt;
    &lt;br /&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://codingsight.com/git-branching-naming-convention-best-practices/&quot;&gt;https://codingsight.com/git-branching-naming-convention-best-practices/&lt;/a&gt;의 내용을 번역한 것입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;git-branching-naming-convention-best-practices&quot;&gt;Git Branching Naming Convention: Best Practices&lt;/h2&gt;
&lt;p&gt;Git branch는 Regular와 Temporary branch로 나눔&lt;/p&gt;

&lt;h2 id=&quot;regular-git-branches&quot;&gt;Regular Git Branches&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;영구적인 repository에 씀&lt;/li&gt;
  &lt;li&gt;간단하고 쉬운 naming convention&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;dev(development)&lt;/strong&gt;는 main 개발 branch임&lt;br /&gt;
dev branch의 아이디어는 해당 branch에서만 변경를 일으키고, master branch의 직접적인 변경은 제한함&lt;br /&gt;
dev branch의 변경은 review(검토)를 받고, 테스트 후 master branch와 merge됨&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;master&lt;/strong&gt;는 Git repository의 기본 branch임&lt;br /&gt;
항상 안정적이며, 어떠한 직접적인 check-in도 허용하지 않음&lt;br /&gt;
code review이후에만 merge가 가능함&lt;br /&gt;
팀 구성원 모두가 master를 안정적이며, 최신의 상태로 유지하는 것에 책임이 있음&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;QA 또는 test branch&lt;/strong&gt;는 QA testing과 자동 testing을 위한 모든 코드를 포함하고 있음&lt;br /&gt;
어떠한 변경이 production 환경으로 가기 전, 안정적인 codebase를 위해 반드시 QA testing을 거쳐야 함&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;temporary-git-branches&quot;&gt;Temporary Git Branches&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;이름에서 알 수 있는 것처럼, 필요할 때마다 만들고 없앨 수 있음&lt;/li&gt;
  &lt;li&gt;Bug Fix, Hot Fix, Feature Branches, Experimental Branches, WIP branches 용도로 사용할 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;git-branching-naming-convention&quot;&gt;Git Branching Naming Convention&lt;/h2&gt;
&lt;p&gt;수많은 naming convention이 존재함&lt;br /&gt;
이 중 가장 좋은 일곱 개의 naming convention에 대해 알아보자&lt;/p&gt;

&lt;h2 id=&quot;1-start-branch-name-with-a-group-word&quot;&gt;1. Start branch name with a Group word&lt;/h2&gt;
&lt;p&gt;group word로 branch 이름을 시작하라.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;최고의 방법 중 하나&lt;/li&gt;
  &lt;li&gt;group word는 자신의 작업 흐름과 일치하는 어느것이든 상관 없음&lt;br /&gt;
e.g.)&lt;br /&gt;
&lt;strong&gt;Bug&lt;/strong&gt; - 곧 해결되어야하는 버그,&lt;br /&gt;
&lt;strong&gt;WIP&lt;/strong&gt; - 작업이 진행 중에 있으며, 조만간 끝나지 않을 것이라 예상되지 않을 때&lt;br /&gt;
(WIP: work in process/progress)&lt;/li&gt;
  &lt;li&gt;branch 이름을 봤을 때, 해당 Git branch가 무엇에 대한 것이며, 어떤 목적을 가지고 있는지 알 수 있어야 함&lt;br /&gt;
e.g.) &lt;strong&gt;bug-logo-alignment-issue&lt;/strong&gt;: logo alignment issue를 고치는 중임&lt;br /&gt;
&lt;strong&gt;wip-ioc-container-added&lt;/strong&gt;: IoC container를 추가하는 작업을 진행 중임&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-use-unique-id-in-branch-names&quot;&gt;2. Use Unique ID in branch names&lt;/h2&gt;
&lt;p&gt;branch이름에 고유한 ID를 사용하라.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;branch 이름에 issue tracker ID를 사용할 수 있음&lt;/li&gt;
  &lt;li&gt;버그를 고칠 때, 선호하는 방법임&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;e.g.)&lt;br /&gt;
&lt;strong&gt;wip-8712-add-testing-module&lt;/strong&gt;라는 이름은&lt;br /&gt;
해당 branch가 testing module을 추가하는 업무에 적용되며,&lt;br /&gt;
issue의 tracking Id는 8712이고,&lt;br /&gt;
해당 업무가 진행 중에 있다는 것을 보여줌&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;branch 이름에 외부 tracking ID를 사용하는 것의 장점은 외부 시스템에서 진행 상황을 추적할 수 있다는 것임&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-use-hyphen-or-slash-as-separators&quot;&gt;3. Use Hyphen or Slash as Separators&lt;/h2&gt;
&lt;p&gt;구분자로 하이픈이나 슬래시를 사용하라.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;많은 개발자들은 구분자로 슬래시와 하이픈을 사용함&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;어떤 것을 사용할 지는 자신 또는 자신의 팀의 선호에 달려있음&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;개인적으로, 하이픈은 이름을 읽기 편하게 만들어 주어서 branch 이름의 구분자로 적절하다고 생각함&lt;/li&gt;
  &lt;li&gt;슬래시, 하이픈, 언더스코어 모두 사용할 수 있음&lt;/li&gt;
  &lt;li&gt;중요한 것은 일관되어야 한다는 것임&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;branch 이름에 구분자를 넣으면 두 가지 장점이 있음&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;가독성을 높일 수 있으며, 혼동을 줄여줄 수 있음&lt;/li&gt;
  &lt;li&gt;특히, 많은 branch를 다루고 있다면 관리하기 좋음&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;구분자가 없는 &lt;strong&gt;featureupgradejqueryversionloginmodule&lt;/strong&gt;보다는&lt;br /&gt;
구분자가 있는 &lt;strong&gt;feature_upgrade_jquery_version_login_module&lt;/strong&gt;이 읽기 쉬움&lt;/p&gt;

&lt;h2 id=&quot;4-git-branch-with-author-name&quot;&gt;4. Git Branch with Author Name&lt;/h2&gt;
&lt;p&gt;작성자 이름을 포함하는 Git branch&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;많은 회사들은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;author&amp;gt;_&amp;lt;branch-type&amp;gt;_&amp;lt;branch-name&amp;gt;&lt;/code&gt; 형식에 따라 작성자의 이름이 branch이름에 있는 것을 선호함&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;e.g.)  &lt;strong&gt;rajeev.bera_feature_new-experimental-changes&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;이 방법은 다른 개발자들의 작업과 추가적인 시스템의 진행 상황을 추적하기 좋음&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;5-avoid-using-numbers-only&quot;&gt;5. Avoid using numbers only&lt;/h2&gt;
&lt;p&gt;숫자만 사용하는 것을 피하라.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;몇몇 개발자들은 branch 이름에 issue Id만 기입하는데, 이는 일의 진행에 도움이 되지 않음&lt;/li&gt;
  &lt;li&gt;예를 들어, &lt;strong&gt;9912&lt;/strong&gt;라는 branch 이름은 무엇을 설명하는지 알 수가 없음&lt;/li&gt;
  &lt;li&gt;특히 이 방식은 다른 git branch와 merge하는 중에 혼란과 실수의 가능성만 증가시킴&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;6-avoid-using-all-naming-convention-simultaneously&quot;&gt;6. Avoid using all naming convention simultaneously&lt;/h2&gt;
&lt;p&gt;모든 naming convention을 동시에 사용하는 것을 피하라.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;모든 naming convention을 혼용해 사용하는 것은 좋은 방식이 아님&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;혼란만 가중시키고, 전반적인 처리 과정을 더 복잡하게 만듦&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;팀은 업무 중에 사용할 naming convention을 한번 정한 후, 팀원들이 받아들이도록 해야 함&lt;/li&gt;
  &lt;li&gt;일관성이 가장 중요함&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;7-avoid-long-descriptive-names-for-long-lived-branches&quot;&gt;7. Avoid long descriptive names for long-lived branches&lt;/h2&gt;
&lt;p&gt;오래가는 branch에 길게 설명하는 이름은 피하라.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;branch 이름의 필수적인 특징은 정확해야 하며, 유용한 정보를 주어야 한다는 것임&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;e.g.)&lt;br /&gt;
&lt;strong&gt;wip_login_module_which_will_used_in_the_public_website&lt;/strong&gt;,  &lt;strong&gt;wip_login_module_which_will_used_in_the_internal_website&lt;/strong&gt;&lt;br /&gt;
와 같은 branch 이름의 경우, 길고 상세함
필수적이지 않음
대신에,&lt;br /&gt;
&lt;strong&gt;wip_feature_login_module&lt;/strong&gt;과 같은 branch 이름은 짧지만 branch의 목적을 잘 설명함&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Git의 Branching 모델은 강력하지만, branch를 적절하고 효과적으로 다뤄야만 함&lt;/li&gt;
  &lt;li&gt;필수적인 요건 중 하나는 모든 팀원이 같은 convention을 따라야 하는 것임&lt;/li&gt;
  &lt;li&gt;pre-commit hook과 같은 Git hook을 사용하는 것도 쉬운 방법 중 하나임&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>ohoraming</name>
        
        
      </author>

      

      
        <category term="Other" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
</feed>
