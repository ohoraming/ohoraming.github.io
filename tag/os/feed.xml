<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="https://ohoraming.github.io/tag/os/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://ohoraming.github.io/" rel="alternate" type="text/html" />
  <updated>2022-02-07T22:54:10+09:00</updated>
  <id>https://ohoraming.github.io/tag/os/feed.xml</id>

  
  
  

  
    <title type="html">예비 개발자의 노트 | </title>
  

  
    <subtitle>배움을 기록합니다</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">OS(7) - Deadlock</title>
      <link href="https://ohoraming.github.io/OS-deadlock" rel="alternate" type="text/html" title="OS(7) - Deadlock" />
      <published>2022-02-04T23:03:00+09:00</published>
      <updated>2022-02-04T23:03:00+09:00</updated>
      <id>https://ohoraming.github.io/OS-deadlock</id>
      <content type="html" xml:base="https://ohoraming.github.io/OS-deadlock">&lt;!-- 글 작성하기 --&gt;

&lt;!-- 글이 시작될 때 관련 시리즈를 리스트로 보여줌 --&gt;
&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;OS 관련 포스팅&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-intro&quot;&gt;OS(1) - Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-interrupt&quot;&gt;OS(2) - Interrupt-Based System&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-processmgmt&quot;&gt;OS(3) - Process Management&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-cpuscheduling&quot;&gt;OS(4) - CPU Scheduling&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-thread&quot;&gt;OS(5) - Thread&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-classicalsync&quot;&gt;OS(6) - Classical Synchronization Problems&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-deadlock&quot;&gt;OS(7) - Deadlock&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;deadlock&quot;&gt;Deadlock&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;OS는 자원(Resources)을 Application에 잘 나누어주는 역할을 함&lt;/li&gt;
  &lt;li&gt;자원: CPU, memory, file, printer…&lt;/li&gt;
  &lt;li&gt;자원을 잘 못 나누어주면 deadlock에 빠지게 됨&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Necessary Conditions For Deadlock&lt;/strong&gt; &lt;br /&gt;
  → 아래의 네 조건이 &lt;strong&gt;모두 만족&lt;/strong&gt;되어야 deadlock 발생 가능성이 있음
    &lt;ol&gt;
      &lt;li&gt;Mutual exclution(상호배타)&lt;/li&gt;
      &lt;li&gt;Hold and wait(보유 및 점유)&lt;/li&gt;
      &lt;li&gt;No preemption(비선점)&lt;/li&gt;
      &lt;li&gt;Circular wait(환형대기)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;동일 형식(type)의 자원이 여러 개 있을 수 있음 → &lt;strong&gt;instance&lt;/strong&gt;&lt;br /&gt;
  e.g.) 동일 CPU 2개, 동일 printer 3개 등&lt;/li&gt;
  &lt;li&gt;자원의 사용&lt;br /&gt;
  [요청 → 사용 → 반납]&lt;br /&gt;
  자원을 필요로하는 application이 OS에 해당 자원을 &lt;strong&gt;요청&lt;/strong&gt;하면,&lt;br /&gt;
  OS가 올바른 요청인지 확인 후 허용&lt;br /&gt;
  application은 자원을 &lt;strong&gt;사용&lt;/strong&gt; 후 OS에 &lt;strong&gt;반납&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;자원 할당도(Resource Allocation Graph)&lt;/strong&gt;&lt;br /&gt;
  → 자원은 &lt;strong&gt;사각형&lt;/strong&gt;, 인스턴스는 사각형 안의 &lt;strong&gt;점&lt;/strong&gt;, 프로세스는 &lt;strong&gt;원&lt;/strong&gt;,&lt;br /&gt;
  할당은 &lt;strong&gt;화살표&lt;/strong&gt;로 표현&lt;br /&gt;
  자원(R) → 프로세스(P): assign(할당) &lt;br /&gt;
  프로세스(P) → 자원(R): request(요청)&lt;/li&gt;
  &lt;li&gt;자원 할당도 상에 원이 만들어지면 환형 대기 상태가 됨&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;deadlock-처리&quot;&gt;Deadlock 처리&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Deadlock Prevention(교착상태 방지)&lt;/li&gt;
  &lt;li&gt;Deadlock Avoidance(교착상태 회피)&lt;/li&gt;
  &lt;li&gt;Deadlock Detection &amp;amp; Recovery(교착상태 검출 및 복구)&lt;/li&gt;
  &lt;li&gt;Don’t Care(교착상태 무시)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;1-교착상태-방지&quot;&gt;(1) 교착상태 방지&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;교착상태 필요조건 4가지 중 한 가지 이상 불만족&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Mutual exclution(상호배타)&lt;/strong&gt; 깨려면,&lt;br /&gt;
  → 자원을 공유&lt;br /&gt;
  → CPU의 경우 시간을 두고 switching은 가능하지만 동시에 사용 불가&lt;br /&gt;
  → 원천적으로 불가한 조건&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Hold and wait(보유 및 점유)&lt;/strong&gt; 깨려면,&lt;br /&gt;
  → 일부의 자원만 가지고 있을 경우, 다른 자원을 기다려야한다면 보유한 자원을 모두 포기&lt;br /&gt;
  → 단점: 자원 활용율 저하, starvation(process가 진행을 못 함)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;No preemption(비선점)&lt;/strong&gt; 깨려면,&lt;br /&gt;
  → 자원을 강제로 빼앗음&lt;br /&gt;
  → CPU는 context switching해서 사용이 가능하나, printer는 불가능함&lt;br /&gt;
  → 원천적으로 불가한 조건&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Circular wait(환형대기)&lt;/strong&gt; 깨려면,&lt;br /&gt;
  → e.g.) 자원에 번호를 부여해 순서대로 자원을 요청&lt;br /&gt;
  → 단점: 자원 활용율 저하&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-교착상태-회피&quot;&gt;(2) 교착상태 회피&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;deadlock을 자원 요청에 대한 잘못된 승인으로 해석&lt;/li&gt;
  &lt;li&gt;대출 전문 은행(Banker’s Algorithm)의 파산과 같다고 생각해 더이상 거래가 불가능한 상태로 인식&lt;/li&gt;
  &lt;li&gt;OS는 자원을 할당할 때 불안전한 할당(Unsafe allocation)이 되지 않도록 해야 함&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-교착상태-검출-및-복구&quot;&gt;(3) 교착상태 검출 및 복구&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;hold and wait 되더라도 말리지 않고 원하는 대로 자원을 나눠주다보면 deadlock 발생할 수 있음&lt;/li&gt;
  &lt;li&gt;deadlock 발생을 허용하며 주기적으로 검사함&lt;/li&gt;
  &lt;li&gt;검사(detection)시 overhead 발생&lt;br /&gt;
  → CPU 계산, memory&lt;br /&gt;
  → 너무 자주하면 deadlock 발견은 빠르지만 overhead 발생 가능성 증가&lt;/li&gt;
  &lt;li&gt;복구(recovery)&lt;br /&gt;
  → process 일부 강제 종료&lt;br /&gt;
  → 자원 선점해 일부 process에 할당&lt;br /&gt;
  → deadlock 발생 전으로 되돌리려면 주기적으로 현상태를 기억해야 하기에 memory필요&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;4-교착상태-무시&quot;&gt;(4) 교착상태 무시&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;deadlock은 실제로 잘 일어나지 않음&lt;/li&gt;
  &lt;li&gt;4개의 필요조건을 모두 만족하더라도 반드시 일어나는 것 아님&lt;/li&gt;
  &lt;li&gt;개인 PC의 경우 deadlock발생시 재부팅하면 해결됨&lt;/li&gt;
  &lt;li&gt;그래서 다른 방법을 시도하는 것 보다는 재부팅이 효율적일 수 있음&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>ohoraming</name>
        
        
      </author>

      

      
        <category term="OS" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">OS(6) - Classical Synchronization Problems</title>
      <link href="https://ohoraming.github.io/OS-classicalsync" rel="alternate" type="text/html" title="OS(6) - Classical Synchronization Problems" />
      <published>2022-02-02T21:58:00+09:00</published>
      <updated>2022-02-02T21:58:00+09:00</updated>
      <id>https://ohoraming.github.io/OS-classicalsync</id>
      <content type="html" xml:base="https://ohoraming.github.io/OS-classicalsync">&lt;!-- 글 작성하기 --&gt;

&lt;!-- 글이 시작될 때 관련 시리즈를 리스트로 보여줌 --&gt;
&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;OS 관련 포스팅&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-intro&quot;&gt;OS(1) - Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-interrupt&quot;&gt;OS(2) - Interrupt-Based System&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-processmgmt&quot;&gt;OS(3) - Process Management&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-cpuscheduling&quot;&gt;OS(4) - CPU Scheduling&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-thread&quot;&gt;OS(5) - Thread&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-classicalsync&quot;&gt;OS(6) - Classical Synchronization Problems&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-deadlock&quot;&gt;OS(7) - Deadlock&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;producer-consumer-problem&quot;&gt;Producer-Consumer Problem&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;producer(생산자)가 data를 생산하면 consumer(소비자)가 소비&lt;/li&gt;
  &lt;li&gt;e.g.) compiler(= producer)와 assembler(= consumer)의 경우,&lt;br /&gt;
  compiler가 high level language를 low level language(assembly어)로 번역하면,  assembler가 번역된 assembly어를 기계어로 번역&lt;/li&gt;
  &lt;li&gt;e.g.) 파일 서버(= producer)와 클라이언트(= consumer)의 경우,&lt;br /&gt;
  web browser가 요청을 보내면, server가 file안의 data를 처리해 응답하고, web brower가 web page형태로 보여줌&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Bounded Buffer(유한 버퍼)&lt;/strong&gt;&lt;br /&gt;
  → 생산한 데이터는 버퍼에 우선 저장함&lt;br /&gt;
  → buffer의 사이즈는 유한함&lt;br /&gt;
  → producer는 buffer가 가득 차면 더이상 데이터를 넣을 수 없으며,&lt;br /&gt;
  → consumer는 buffer가 비면 더이상 데이터를 뺄 수 없음&lt;/li&gt;
  &lt;li&gt;같은 수의 생산(insert)과 소비(remove)가 이루어졌다면, 결괏값은 0이 나와야 함&lt;/li&gt;
  &lt;li&gt;common variable인 count와 buf[]를 업데이트하는 C.S.(critical-section)에 동시 진입이 이루어져 최종 결괏값으로 0이 나오지 않음&lt;/li&gt;
  &lt;li&gt;solution&lt;br /&gt;
  → &lt;strong&gt;mutual exclusion&lt;/strong&gt;&lt;br /&gt;
  → semaphore를 이용해 동시접근 방지&lt;br /&gt;
  → number of permit = 1&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Busy-wait&lt;/strong&gt;&lt;br /&gt;
  → producer: buffer가 가득차면 기다려야하며,&lt;br /&gt;
  → consumer: buffer가 비면 기다려야 함&lt;br /&gt;
  → OS의 ‘효율성 증가’의 목적에 위배됨&lt;br /&gt;
  → semaphore를 사용해 busy-wait회피&lt;br /&gt;
  → 무한 loop(while문)를 돌며 기다리지않고 semaphore에 가둠&lt;br /&gt;
  → CPU 서비스를 받지 않고 block됨&lt;br /&gt;
  → 빈공간이 생기면 producer를 깨우고, 데이터가 들어오면 consumer를 깨움&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;readers-writers-problem&quot;&gt;Readers-Writers Problem&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Reader: C.S.을 편집하지 않고 읽기만 함&lt;/li&gt;
  &lt;li&gt;Writer: C.S.를 읽고 편집함&lt;/li&gt;
  &lt;li&gt;Reader에 mutual exclusion을 적용하면 비효율적임&lt;/li&gt;
  &lt;li&gt;Reader가 들어왔는데 다른 Writer가 들어오려하면 block&lt;/li&gt;
  &lt;li&gt;Writer가 들어와 있으면 Reader는 block&lt;/li&gt;
  &lt;li&gt;Reader가 들어와 있는데 다른 Reader가 들어온다면 허용(효율성 제고)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;dining-philosopher-problem&quot;&gt;Dining Philosopher Problem&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;5명의 철학자와 5개의 젓가락이 서로 엇갈려 한 테이블에 존재&lt;/li&gt;
  &lt;li&gt;‘생각 → 식사’의 반복&lt;/li&gt;
  &lt;li&gt;왼쪽 젓가락을 든 뒤, 오른쪽 젓가락을 듬&lt;/li&gt;
  &lt;li&gt;number of permit = 1 : 두 철학자 중 한 명만 젓가락 드는 것이 허용됨&lt;/li&gt;
  &lt;li&gt;결과: starvation: 모든 철학자들이 굶어 죽는 상황 발생&lt;/li&gt;
  &lt;li&gt;모두가 동시에 젓가락을 드는 상황이 있으면 deadlock에 빠짐&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>ohoraming</name>
        
        
      </author>

      

      
        <category term="OS" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">OS(5) - Thread</title>
      <link href="https://ohoraming.github.io/OS-thread" rel="alternate" type="text/html" title="OS(5) - Thread" />
      <published>2022-01-31T22:59:00+09:00</published>
      <updated>2022-01-31T22:59:00+09:00</updated>
      <id>https://ohoraming.github.io/OS-thread</id>
      <content type="html" xml:base="https://ohoraming.github.io/OS-thread">&lt;!-- 글 작성하기 --&gt;

&lt;!-- 글이 시작될 때 관련 시리즈를 리스트로 보여줌 --&gt;
&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;OS 관련 포스팅&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-intro&quot;&gt;OS(1) - Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-interrupt&quot;&gt;OS(2) - Interrupt-Based System&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-processmgmt&quot;&gt;OS(3) - Process Management&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-cpuscheduling&quot;&gt;OS(4) - CPU Scheduling&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-thread&quot;&gt;OS(5) - Thread&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-classicalsync&quot;&gt;OS(6) - Classical Synchronization Problems&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-deadlock&quot;&gt;OS(7) - Deadlock&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;thread&quot;&gt;Thread&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;하나의 프로그램은 하나의 흐름/맥이 있음(single thread)&lt;/li&gt;
  &lt;li&gt;여러 흐름/맥이 있다면(multi threads)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;multithreads&quot;&gt;Multithreads&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;한 프로그램에 둘 이상의 흐름/맥이 있는 경우&lt;/li&gt;
  &lt;li&gt;짧은 시간 간격으로 흐름이 switching됨&lt;br /&gt;
  → 여러 흐름/맥이 동시에 실행되는 것 같음(concurrent)&lt;br /&gt;
  cf.) simultaneous - 실제로 동시에 여러 thread가 실행됨(불가능)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;thread-vs-process&quot;&gt;Thread vs. Process&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;하나의 process에는 하나 이상의 thread가 존재(multi-thread program)&lt;/li&gt;
  &lt;li&gt;하나의 program은 code, data, stack으로 구성됨&lt;/li&gt;
  &lt;li&gt;thread는 process의 메모리 공간(code, data) 및 자원(file, I/O)을 공유&lt;/li&gt;
  &lt;li&gt;개별적인 program counter(PC), stack pointer(SP), registers, stack은 비공유&lt;/li&gt;
  &lt;li&gt;thread가 switching 될 때마다 PC, SP, registers값 모두 변화되므로 공유하지 않음&lt;/li&gt;
  &lt;li&gt;함수 호출시, stack에 return address, parameter 등을 저장함&lt;/li&gt;
  &lt;li&gt;현대의 context switching 단위는 process가 아닌 thread!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;javalangthread&quot;&gt;java.lang.Thread&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;JAVA의 thread는 java.lang package 안에 있음&lt;/li&gt;
  &lt;li&gt;Thread.&lt;strong&gt;run()&lt;/strong&gt; : thread가 시작되면 run() 메서드가 실행됨&lt;/li&gt;
  &lt;li&gt;run() 메서드를 override
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyThread&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;c1&quot;&gt;// code&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;process-synchronization프로세스-동기화&quot;&gt;Process Synchronization(프로세스 동기화)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;엄밀히 말하면 현대 OS는 context switching의 단위가 thread이므로 &lt;strong&gt;thread synchronization&lt;/strong&gt;이 맞음&lt;/li&gt;
  &lt;li&gt;일반적으로, main memory에 올라간 process간에는 어떤 식으로든 &lt;strong&gt;영향&lt;/strong&gt;을 주고 받음(cooperating process)&lt;/li&gt;
  &lt;li&gt;하나의 데이터베이스와 같은 &lt;strong&gt;공통된 자원(common resources)&lt;/strong&gt;에 서로 접근하려 하기때문에 영향을 주고 받게 됨&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bank-account-problem&quot;&gt;Bank Account Problem&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;parent는 deposit(입금), child는 withdraw(출금)을 진행&lt;/li&gt;
  &lt;li&gt;common variable인 balance(잔액)에 대해 동시 update가 발생함&lt;/li&gt;
  &lt;li&gt;코드를 읽어가다가 context switching이 일어날 경우, balance에 오류가 생김&lt;/li&gt;
  &lt;li&gt;high level language는 기계어(assembly어)로 변환되는 과정을 거침&lt;/li&gt;
  &lt;li&gt;한 줄의 코드가 여러 줄의 기계어로 번역될 때 context switching 일어나면 잘못된 결과가 발생&lt;/li&gt;
  &lt;li&gt;common variable update 진행 중에는 context switching 일어나면 안 됨&lt;br /&gt;
  → common variable에 대해 한번에 하나의 thread만 update&lt;br /&gt;
  → Critical-Section Problem (임계 구역 문제)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;critical-section-problem&quot;&gt;Critical-Section Problem&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Critical-Section (C.S.)&lt;/strong&gt;&lt;br /&gt;
  → multiple thread로 구성된 system&lt;br /&gt;
  → common variable changing이 일어날 수 있는 구간&lt;/li&gt;
  &lt;li&gt;해결&lt;br /&gt;
  → &lt;strong&gt;Mutual exclusion&lt;/strong&gt; (상호 배타): 하나의 thread만 진입&lt;br /&gt;
  → Progress (진행): 유한 시간 내에 C.S.에 누가 먼저 진입할 지 결정&lt;br /&gt;
  → Bounded waiting (유한 대기): 유한 시간 내에 C.S.에 진입할 기회가 생김&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;synchronization-tools&quot;&gt;Synchronization Tools&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Semaphores (세마포): 가장 전통적인 동기화 도구&lt;/li&gt;
  &lt;li&gt;Monitor (모니터): java에서 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;semaphore&quot;&gt;Semaphore&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;네덜란드의 Edsger Kijkstra가 제안&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;정수형 변수&lt;/strong&gt;와 &lt;strong&gt;두 개의 동작&lt;/strong&gt;(&lt;strong&gt;P, V&lt;/strong&gt;)으로 구성&lt;/li&gt;
  &lt;li&gt;네덜란드어(&lt;strong&gt;P&lt;/strong&gt;roberen, &lt;strong&gt;V&lt;/strong&gt;erhogen)를 영어로 변환&lt;/li&gt;
  &lt;li&gt;P: &lt;strong&gt;acquire()&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;V: &lt;strong&gt;release()&lt;/strong&gt;
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Semaphore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Semaphore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// code&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;acquire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;wakeup&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;정수형 변수: number of permits&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;acquire()&lt;/strong&gt;&lt;br /&gt;
  → 정수값이 1감소&lt;br /&gt;
  → 감소된 정수값이 0보다 작으면 호출한 process/thread를 queue안에 넣음&lt;br /&gt;
      (block상태(= ready queue에 못 감))&lt;br /&gt;
  → interrupted exception발생(try~catch)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;release()&lt;/strong&gt;&lt;br /&gt;
  → 정수값이 1증가&lt;br /&gt;
  → 증가된 정수값이 0보다 작거나 같으면(= queue에 block된 thread 존재) 호출한 process/thread를 queue에서 꺼냄(wake up)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;일반적-사용1-mutual-exclusion&quot;&gt;일반적 사용(1): Mutual exclusion&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;number of permits = 1&lt;br /&gt;
  → C.S.에 하나의 process/thread만 들임&lt;/p&gt;

    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;acquire();&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Critical-Section&lt;/strong&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;release();&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;일반적-사용2-ordering&quot;&gt;일반적 사용(2): Ordering&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;number of permits = 1&lt;/p&gt;

    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;p1&lt;/td&gt;
          &lt;td&gt;p2&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt; &lt;/td&gt;
          &lt;td&gt;acquire();&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;S1;&lt;/td&gt;
          &lt;td&gt;S2;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;release();&lt;/td&gt;
          &lt;td&gt; &lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>ohoraming</name>
        
        
      </author>

      

      
        <category term="OS" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">OS(4) - CPU Scheduling</title>
      <link href="https://ohoraming.github.io/OS-cpuscheduling" rel="alternate" type="text/html" title="OS(4) - CPU Scheduling" />
      <published>2022-01-30T00:01:00+09:00</published>
      <updated>2022-01-30T00:01:00+09:00</updated>
      <id>https://ohoraming.github.io/OS-cpuscheduling</id>
      <content type="html" xml:base="https://ohoraming.github.io/OS-cpuscheduling">&lt;!-- 글 작성하기 --&gt;

&lt;!-- 글이 시작될 때 관련 시리즈를 리스트로 보여줌 --&gt;
&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;OS 관련 포스팅&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-intro&quot;&gt;OS(1) - Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-interrupt&quot;&gt;OS(2) - Interrupt-Based System&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-processmgmt&quot;&gt;OS(3) - Process Management&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-cpuscheduling&quot;&gt;OS(4) - CPU Scheduling&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-thread&quot;&gt;OS(5) - Thread&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-classicalsync&quot;&gt;OS(6) - Classical Synchronization Problems&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-deadlock&quot;&gt;OS(7) - Deadlock&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cpu-scheduling&quot;&gt;CPU Scheduling&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Preemptive(선점)&lt;br /&gt;
  → CPU가 어떤 프로세스를 실행 중에 강제로 쫓아내고 다른 프로세스를 실행시킬 수 있는 scheduling 방식&lt;/li&gt;
  &lt;li&gt;Non-preemptive(비선점)&lt;br /&gt;
  → CPU가 어떤 프로세스를 실행 중이라면 해당 프로세스가 I/O를 만나거나 종료되지 않은 상황에서는 절대 scheduling이 일어나지 않는 방식&lt;/li&gt;
  &lt;li&gt;CPU Utilization(CPU 이용률)&lt;br /&gt;
  → CPU가 얼마나 열심히 일하고 있는가(%)&lt;/li&gt;
  &lt;li&gt;Throughput(처리율)&lt;br /&gt;
  → 시간당 몇 개의 작업을 처리하는가(jobs/sec)&lt;/li&gt;
  &lt;li&gt;Turnaround time(반환시간)&lt;br /&gt;
  → 어떤 작업이 ready queue에 들어가서 작업을 끝내고 나오는 시간(sec)&lt;/li&gt;
  &lt;li&gt;Waiting time(대기시간)&lt;br /&gt;
  → ready queue에서 기다린 시간(sec)&lt;/li&gt;
  &lt;li&gt;Response time(응답시간)&lt;br /&gt;
  → interactive system(대화형 시스템)에서 중요&lt;br /&gt;
  → 첫 응답이 나오는 데까지 걸리는 시간&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cpu-scheduling-algorithms&quot;&gt;CPU Scheduling Algorithms&lt;/h2&gt;

&lt;h3 id=&quot;1-first-come-first-servedfcfs&quot;&gt;1. First-Come, First-Served(FCFS)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;먼저 들어오면, 먼저 서비스 함&lt;/li&gt;
  &lt;li&gt;간단하며, 공평하지만 반드시 좋은 성능을 보장하지는 않음&lt;/li&gt;
  &lt;li&gt;Average Waiting Time(AWT): ready queue에서 기다리는 시간&lt;/li&gt;
  &lt;li&gt;단점: Convoy Effect(호위 효과) - burst time이 긴 프로세스가 앞에 있으면 나머지 프로세스는 뒤에서 오래 기다리게 되는데 그 모양새를 왕을 호위하는 사람에 비유&lt;/li&gt;
  &lt;li&gt;Non-preeptive scheduling방식&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-shortest-job-firstsjf&quot;&gt;2. Shortest-Job-First(SJF)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;실행 시간이 짧은 것을 먼저 서비스 함&lt;/li&gt;
  &lt;li&gt;대기 시간을 줄이는 면에서, 증명된 최적의 방법&lt;/li&gt;
  &lt;li&gt;단점: 비현실적임(실제 CPU 시간은 실행을 해보기 전에는 모름),&lt;br /&gt;
      예측이 필수(과거를 기억하고 있어야 함), overhead발생, 시간이 많이 걸림&lt;br /&gt;
      → 현실적인 적용이 어려움&lt;/li&gt;
  &lt;li&gt;선점(preemptive)/비선점(non-preemptive) 두 가지 방식 가능&lt;/li&gt;
  &lt;li&gt;선점 방식의 경우 최소 잔여 시간 우선&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-priority-scheduling&quot;&gt;3. Priority Scheduling&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;우선 순위가 높은 것을 먼저 서비스 함&lt;/li&gt;
  &lt;li&gt;우선 순위 설정
    &lt;ul&gt;
      &lt;li&gt;내부적: 실행 시간 짧은, 메모리 작게 차지하는, I/O가 긴(=CPU가 짧은) 등&lt;/li&gt;
      &lt;li&gt;외부적: 비용을 많이 지불한 쪽, 정치적인 요소 등&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;선점 또는 비선점&lt;/li&gt;
  &lt;li&gt;문제점: starvation 돌입 가능 - 우선 순위에서 밀리면 아무리 기다려도 서비스를 받지 못 함&lt;/li&gt;
  &lt;li&gt;해결: aging - ready queue에서 오래 기다릴 수록 priority를 조금씩 상승시킴&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;4-round-robinrr&quot;&gt;4. Round-Robin(RR)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;time-sharing system에서 많이 사용&lt;/li&gt;
  &lt;li&gt;time quantum = time slice = Δ&lt;br /&gt;
  → 10 ~ 100msec: 1초당 10 ~ 100 번의 switching 발생&lt;/li&gt;
  &lt;li&gt;time quantum에 따라 성능이 달라짐&lt;/li&gt;
  &lt;li&gt;Δ → ∞ : FCFS&lt;/li&gt;
  &lt;li&gt;Δ → 0 : switching이 빈번해 여러 프로세스가 동시에 서비스 되는 것 같은 느낌을 줌&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;multilevel-queue-scheduling&quot;&gt;Multilevel Queue Scheduling&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;process별로 queue를 달리해 서비스 함&lt;/li&gt;
  &lt;li&gt;여러 single ready queue의 묶음&lt;/li&gt;
  &lt;li&gt;queue마다 우선 순위는 다름&lt;/li&gt;
  &lt;li&gt;CPU time을 각 queue에 차등 배분함&lt;/li&gt;
  &lt;li&gt;queue별로 다른 scheduling 정책을 실행함&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;multilevel-feedback-queue-scheduling&quot;&gt;Multilevel Feedback Queue Scheduling&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;여러 개의 queue&lt;br /&gt;
  → multilevel queue scheduling과의 공통점&lt;/li&gt;
  &lt;li&gt;모든 process는 하나의 입구로 진입&lt;/li&gt;
  &lt;li&gt;너무 많은 CPU time 소비 시, 기아 상태가 우려될 시 다른 queue로 이동&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;process-creation&quot;&gt;Process Creation&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;프로세스는 프로세스에 의해 만들어짐&lt;br /&gt;
  → parent/child/sibling process, process tree&lt;/li&gt;
  &lt;li&gt;Process Identifier(PID)&lt;br /&gt;
  → 사람의 주민등록번호와 같은 것&lt;br /&gt;
  cf.) Parent Process Identifier(PPID)&lt;/li&gt;
  &lt;li&gt;system call
    &lt;ul&gt;
      &lt;li&gt;fork(): parent process 복사&lt;/li&gt;
      &lt;li&gt;exec(): 실행파일을 메모리로 가져오기&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;process-termination&quot;&gt;Process Termination&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;system call
    &lt;ul&gt;
      &lt;li&gt;exit(): 해당 프로세스의 자원 OS에 반환&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>ohoraming</name>
        
        
      </author>

      

      
        <category term="OS" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">OS(3) - Process Management</title>
      <link href="https://ohoraming.github.io/OS-processmgmt" rel="alternate" type="text/html" title="OS(3) - Process Management" />
      <published>2022-01-26T23:10:00+09:00</published>
      <updated>2022-01-26T23:10:00+09:00</updated>
      <id>https://ohoraming.github.io/OS-processmgmt</id>
      <content type="html" xml:base="https://ohoraming.github.io/OS-processmgmt">&lt;!-- 글 작성하기 --&gt;

&lt;!-- 글이 시작될 때 관련 시리즈를 리스트로 보여줌 --&gt;
&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;OS 관련 포스팅&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-intro&quot;&gt;OS(1) - Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-interrupt&quot;&gt;OS(2) - Interrupt-Based System&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-processmgmt&quot;&gt;OS(3) - Process Management&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-cpuscheduling&quot;&gt;OS(4) - CPU Scheduling&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-thread&quot;&gt;OS(5) - Thread&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-classicalsync&quot;&gt;OS(6) - Classical Synchronization Problems&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-deadlock&quot;&gt;OS(7) - Deadlock&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;process&quot;&gt;Process&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;실행 중인 프로그램&lt;/li&gt;
  &lt;li&gt;메인 메모리에 프로그램이 올라오면, text(code) + data + stack도 메인메모리에 생성됨&lt;/li&gt;
  &lt;li&gt;program vs. process&lt;br /&gt;
  → 아무 일도 못하는 program, 살아 움직이는 process&lt;/li&gt;
  &lt;li&gt;상태: new, ready, running, waiting, terminated
&lt;a href=&quot;https://static.javatpoint.com/operating-system/images/os-process-state-diagram.png&quot;&gt;&lt;img src=&quot;https://static.javatpoint.com/operating-system/images/os-process-state-diagram.png&quot; alt=&quot;process state trasition diagram&quot; /&gt;&lt;/a&gt;
(출처: &lt;a href=&quot;https://www.javatpoint.com/os-process-states&quot;&gt;https://www.javatpoint.com/os-process-states&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;pcbprocess-control-block&quot;&gt;PCB(Process Control Block)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;= Task Control Block(TCB)&lt;/li&gt;
  &lt;li&gt;C언어 구조체&lt;/li&gt;
  &lt;li&gt;OS의 process management 안에 존재&lt;/li&gt;
  &lt;li&gt;프로세스에 대한 모든 정보가 들어있음&lt;/li&gt;
  &lt;li&gt;process state(running, ready, waiting, …), program counter(PC, 몇 번째로 실행할지), MMU info(base, limit), CPU time(독점 방지용 시간 기록), process id(고유 번호), …&lt;/li&gt;
  &lt;li&gt;하나의 프로세스에 대해 하나의 PCB가 할당됨&lt;/li&gt;
  &lt;li&gt;CPU가 프로그램을 실행하다 I/O를 만나거나 time expired가 되어 다른 프로세스로 갈 때 이전까지 실행했던 정보들을 가지고 있어야 CPU 서비스를 다시 받을 때 이전 상태부터 이어서 받을 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;queues&quot;&gt;Queues&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;OS의 process management 안에 존재&lt;/li&gt;
  &lt;li&gt;각 queue마다 PCB들이 기다리고 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Job Queue
    &lt;ul&gt;
      &lt;li&gt;굉장히 더디며, 드물게 일어남&lt;/li&gt;
      &lt;li&gt;프로세스가 완전히 끝나 메모리가 비워져야 이 scheduling이 일어남&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Ready Queue
    &lt;ul&gt;
      &lt;li&gt;아주 짧은 시간에 빈번하게 발생&lt;/li&gt;
      &lt;li&gt;프로세스 간의 이동이므로 switching이 빠름&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Device Queue
    &lt;ul&gt;
      &lt;li&gt;특정 장치(I/O)를 사용하기 위해 대기&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;multiprogramming&quot;&gt;Multiprogramming&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;메인 메모리에 올려진 process의 수&lt;/li&gt;
  &lt;li&gt;I/O 관련 작업인지 CPU 사용 관련 계싼 작업인지 구분&lt;/li&gt;
  &lt;li&gt;midium-term scheduler&lt;br /&gt;
  (※ Job scheduling: long term scheduler, CPU scheduling: short term scheduler)&lt;/li&gt;
  &lt;li&gt;context switching&lt;br /&gt;
  → process간 전환&lt;br /&gt;
  → dispatcher: scheculer가 선택한 process를 실행하도록 여러 값을 바꿔줌&lt;br /&gt;
  → 자주 일어나면 overhead가 발생하므로 low level 언어로 코드를 구성해야 함&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>ohoraming</name>
        
        
      </author>

      

      
        <category term="OS" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">OS(2) - Interrupt-Based System</title>
      <link href="https://ohoraming.github.io/OS-interrupt" rel="alternate" type="text/html" title="OS(2) - Interrupt-Based System" />
      <published>2022-01-18T01:18:00+09:00</published>
      <updated>2022-01-18T01:18:00+09:00</updated>
      <id>https://ohoraming.github.io/OS-interrupt</id>
      <content type="html" xml:base="https://ohoraming.github.io/OS-interrupt">&lt;!-- 글 작성하기 --&gt;

&lt;!-- 글이 시작될 때 관련 시리즈를 리스트로 보여줌 --&gt;
&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;OS 관련 포스팅&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-intro&quot;&gt;OS(1) - Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-interrupt&quot;&gt;OS(2) - Interrupt-Based System&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-processmgmt&quot;&gt;OS(3) - Process Management&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-cpuscheduling&quot;&gt;OS(4) - CPU Scheduling&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-thread&quot;&gt;OS(5) - Thread&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-classicalsync&quot;&gt;OS(6) - Classical Synchronization Problems&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-deadlock&quot;&gt;OS(7) - Deadlock&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;interrupt&quot;&gt;Interrupt&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;interrupt: v. 방해하다, 중단시키다&lt;/em&gt;&lt;br /&gt;
→ 어떤 일을 하고 있는데 &lt;strong&gt;가로채서&lt;/strong&gt; 다른 일을 함&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;현대 운영체제는 interrupt 기반 시스템
    &lt;ul&gt;
      &lt;li&gt;booting 완료 후, OS는 메모리에 상주함(resident)&lt;/li&gt;
      &lt;li&gt;마우스를 움직이면 전기신호(=interrupt)가 발생해 CPU의 interrupt선으로 감 &amp;lt;HW interrupt&amp;gt;&lt;/li&gt;
      &lt;li&gt;CPU는 하던 일을 중지하고 OS안의 마우스 Interrupt Service Routine(ISR)(코드)으로 점프&lt;/li&gt;
      &lt;li&gt;특정 icon을 더블클릭하면 interrupt가 걸리고, 더블클릭의 routine(코드)을 실행 &amp;lt;SW interrupt&amp;gt;&lt;/li&gt;
      &lt;li&gt;하드 디스크 속 특정 프로그램을 메인 메모리에 올림&lt;/li&gt;
      &lt;li&gt;바탕화면이 바뀌며 특정 프로그램의 화면이 나옴&lt;/li&gt;
      &lt;li&gt;IRS 종료후 다시 user program 또는 원래의 대기상태로 복귀&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;interrupt-기반-os&quot;&gt;interrupt 기반 OS&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;OS는 여러 가지 code들의 모임&lt;br /&gt;
  → 평소에는 작동하지 않고 interrupt에 의해 작동함&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;평소 OS는 대기상태&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;HW/SW/Internal(내부) interrupt에 의해 운영체제 코드(ISR)을 실행&lt;/li&gt;
      &lt;li&gt;Internal interrupt&lt;br /&gt;
  e.g.) divide by zero: 
  결괏값이 무한대가 되어 컴퓨터에 저장 공간이 없음&lt;br /&gt;
  → CPU가 내부적인 interrupt로 인식&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;이중-모드dual-mode&quot;&gt;이중 모드(Dual Mode)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;사용 환경
    &lt;ul&gt;
      &lt;li&gt;한 컴퓨터(= 서버 컴퓨터)를 여러 사람이 동시에 사용하는 환경&lt;/li&gt;
      &lt;li&gt;또는 한 사람이 여러 프로그램을 동시에 사용하는 환경 (e.g.) pc, 스마트폰)&lt;/li&gt;
      &lt;li&gt;또는 한 사람이 특권 명령을 입력하는 경우&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;사용자 모드(User mode) vs. 관리자 모드(Supervisor mode)
    &lt;ul&gt;
      &lt;li&gt;CPU 동작 모드를 &lt;strong&gt;두 가지&lt;/strong&gt;로 진행&lt;/li&gt;
      &lt;li&gt;OS 서비스가 실행될 때, HW/SW interrupt 발생할 때 &lt;strong&gt;관리자 모드&lt;/strong&gt; 실행&lt;/li&gt;
      &lt;li&gt;사용자 프로그램이 실행될 때, OS 서비스가 끝나면 다시 &lt;strong&gt;사용자 모드&lt;/strong&gt; 실행&lt;/li&gt;
      &lt;li&gt;사용자 모드에서는 CPU 중지 명령어(STOP, HALT, RESET 등)와 같은 치명적인 명령어를 사용하지 못하도록 함&lt;/li&gt;
      &lt;li&gt;관리자(supervisor) 모드 = 시스템(system) 모드 = 모니터(monitor)(감시자) 모드 = 특권(priviliged) 모드&lt;/li&gt;
      &lt;li&gt;레지스터에 mode를 나타내는 flag가 존재함
        &lt;ul&gt;
          &lt;li&gt;register: 비트들의 모임&lt;/li&gt;
          &lt;li&gt;flags(carry, negative, zero, overflow)에 monitor 비트를 추가해 0과 1로 이중모드를 구현&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;특권 명령(Privileged instruction)
    &lt;ul&gt;
      &lt;li&gt;특권 모드에서만 내릴 수 있는 명령어&lt;/li&gt;
      &lt;li&gt;STOP/HALT/RESET(CPU 중지 명령어), SET_TIMER(일반 유저가 시간을 바꾸면 안 됨), SET_HW(HW의 값을 바꿈)…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;일반 User program은 하드 디스크에 접근이 불가함&lt;br /&gt;
  즉, 서버 컴퓨터에 접속해 타인의 파일을 열람할 수 없다는 뜻(보안 문제)&lt;br /&gt;
  그래서 OS에 SW interrupt를 걸어 ISR을 실행해 필요한 작업을 하게 함&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;일반적인 프로그램의 실행
    &lt;ol&gt;
      &lt;li&gt;power on&lt;/li&gt;
      &lt;li&gt;booting: 하드 디스크의 프로그램이 메인 메모리에 적재
        &lt;ul&gt;
          &lt;li&gt;monitor 비트 = 1 : system mode라는 뜻&lt;/li&gt;
          &lt;li&gt;OS는 system mode에서 동작함&lt;/li&gt;
          &lt;li&gt;일반 user는 못 내리는 명령 수행 가능&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;user mode &amp;gt; (키보드, 마우스) HW interrupt &amp;gt; system mode(ISR) &amp;gt; user mode &amp;gt; (모니터, 디스크, 프린터) &amp;gt; system mode &amp;gt; user mode
        &lt;ul&gt;
          &lt;li&gt;만약, user mode에서 CPU에 STOP 명령을 내리면,&lt;br /&gt;
 CPU는 internal interrupt가 발생했다고 여겨 OS의 ISR로 점프해&lt;br /&gt;
 해당 명령을 내린 프로그램을 강제 종료시켜 메모리에서 내림&lt;br /&gt;
  → protection과 연관됨&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;하드웨어-보호&quot;&gt;하드웨어 보호&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;입출력장치 보호&lt;br /&gt;
 → 사용자가 input/output device에 바로 접근하는 것 불가, 반드시 OS를 거쳐야함&lt;/li&gt;
  &lt;li&gt;메모리 보호&lt;br /&gt;
 → 자신에게 주어진 메모리 영역을 넘어서는 것을 막음&lt;/li&gt;
  &lt;li&gt;CPU 보호&lt;br /&gt;
 → 한 컴퓨터를 여러 명이 쓴다면, CPU 역시 침범 대상이 될 수 있음&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;1-입출력장치-보호&quot;&gt;(1) 입출력장치 보호&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;서로 다른 사용자들 간의 입출력 정보가 끼어들어 혼선이 생기는 것을 막기 위함&lt;/li&gt;
  &lt;li&gt;입출력 명령(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IN OUT&lt;/code&gt;)을 &lt;strong&gt;특권 명령&lt;/strong&gt;으로 지정함&lt;/li&gt;
  &lt;li&gt;SW interrupt(명령어: INT) &amp;gt; OS에 요청(system mode로 전환) &amp;gt; 입출력 실행 &amp;gt; 다시 user mode로 복귀&lt;/li&gt;
  &lt;li&gt;이때, 올바른 요청인지 ISR의 초반에 확인하며, 그렇지 않다면 OS가 거부함&lt;/li&gt;
  &lt;li&gt;user mode에서 사용자가 직접 입출력 명령을 내린다면 ISR로 점프해 해당 프로그램을 종료시킴(privileged instruction violation, 특권 명령 침범)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-메모리-보호&quot;&gt;(2) 메모리 보호&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;다른 사용자의 메모리 혹은 OS영역의 메모리에 접근하는 것을 막기 위함&lt;/li&gt;
  &lt;li&gt;MMU(&lt;strong&gt;M&lt;/strong&gt;emory &lt;strong&gt;M&lt;/strong&gt;anagement &lt;strong&gt;U&lt;/strong&gt;nit)를 두어 다른 메모리 영역 침범을 감시함&lt;/li&gt;
  &lt;li&gt;일종의 문지기로 &lt;strong&gt;base registar&lt;/strong&gt;와 &lt;strong&gt;limit register&lt;/strong&gt; 사이의 값만 통과시킴&lt;/li&gt;
  &lt;li&gt;Address bus에 base/limit register를 설정해두고 그 범위를 넘어서면 interrupt를 발생시킴&lt;/li&gt;
  &lt;li&gt;메모리에 잘못된 접근이 일어나면 ISR이 동작해 해당 프로그램을 강제 종료시킴(segment violation, 영역 침범)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-cpu-보호&quot;&gt;(3) CPU 보호&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;한 사용자의 CPU 시간 독점이 다른 사용자의 프로그램 실행을 방해하는 것을 막기 위함&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;TIMER&lt;/strong&gt;를 두어 일정 시간 경과시 timer interrupt 발생&lt;/li&gt;
  &lt;li&gt;timer가 cpu에 주기적으로 interrupt를 걸어줌&lt;/li&gt;
  &lt;li&gt;interrupt가 발생 &amp;gt; ISR로 jump &amp;gt; ISR의 코드에 한 프로그램이 CPU시간을 독점하는지 감시하는 부분이 존재 &amp;gt; 다른 프로그램으로 강제 전환&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;os-서비스&quot;&gt;OS 서비스&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;프로세스 관리 ★★
    &lt;ul&gt;
      &lt;li&gt;process: 메모리에서 실행 중인 program&lt;br /&gt;
  (vs. program: 하드 디스크에 존재)&lt;/li&gt;
      &lt;li&gt;process의 생성, 소멸, 활동 일시 정지, 활동 재개, 통신, 동기화, 교착상태 처리 등&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;주기억장치 관리 ★
    &lt;ul&gt;
      &lt;li&gt;process에 메모리 공간 할당, process 종료시 메모리 회수, 가상 메모리&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;파일 관리
    &lt;ul&gt;
      &lt;li&gt;파일의 생성과 삭제, directory(folder))의 생성과 삭제, file 기본 동작, 백업&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;보조기억장치 관리
    &lt;ul&gt;
      &lt;li&gt;하드 디스크, 스마트 폰의 플래시 메모리 등&lt;/li&gt;
      &lt;li&gt;빈 공간 관리, 저장공간 할당, 디스크 스케줄링&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;입출력장치 관리
    &lt;ul&gt;
      &lt;li&gt;장치 드라이브, 입출력 장치의 성능 향상
…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;시스템-콜&quot;&gt;시스템 콜&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;OS 서비스를 받기 위한 호출(요청)&lt;/li&gt;
  &lt;li&gt;주요 시스템 콜
    &lt;ul&gt;
      &lt;li&gt;Process: end(종료), abort(강제 종료), load(하드 디스크의 프로그램을 메인 메로리로 가져오는 것), execute(실행), create(process 생성), terminate(종료(=end)), get/set attributes(속성)&lt;/li&gt;
      &lt;li&gt;Memory: allocate(새 객체 생성시 메모리가 필요해 OS에 요청), free(메모리를 다 쓰고 나서 돌려줌)&lt;/li&gt;
      &lt;li&gt;File: create(생성), delete(삭제)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>ohoraming</name>
        
        
      </author>

      

      
        <category term="OS" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">OS(1) - Introduction</title>
      <link href="https://ohoraming.github.io/OS-intro" rel="alternate" type="text/html" title="OS(1) - Introduction" />
      <published>2022-01-12T22:06:00+09:00</published>
      <updated>2022-01-12T22:06:00+09:00</updated>
      <id>https://ohoraming.github.io/OS-intro</id>
      <content type="html" xml:base="https://ohoraming.github.io/OS-intro">&lt;!-- 글 작성하기 --&gt;

&lt;!-- 글이 시작될 때 관련 시리즈를 리스트로 보여줌 --&gt;
&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;OS 관련 포스팅&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-intro&quot;&gt;OS(1) - Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-interrupt&quot;&gt;OS(2) - Interrupt-Based System&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-processmgmt&quot;&gt;OS(3) - Process Management&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-cpuscheduling&quot;&gt;OS(4) - CPU Scheduling&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-thread&quot;&gt;OS(5) - Thread&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-classicalsync&quot;&gt;OS(6) - Classical Synchronization Problems&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-deadlock&quot;&gt;OS(7) - Deadlock&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;운영체제operating-system-os의-목적&quot;&gt;운영체제(Operating System, OS)의 목적&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;컴퓨터 &lt;strong&gt;하드웨어를 잘 관리&lt;/strong&gt;하여
    &lt;ul&gt;
      &lt;li&gt;HW: processor, memory, disk, keyboard, mouse, monitor…&lt;/li&gt;
      &lt;li&gt;OS가 메모리에 올라오면 User가 컴퓨터를 제어할 수 있게 됨&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;성능&lt;/strong&gt;을 높이고
    &lt;ul&gt;
      &lt;li&gt;같은 HW라도 OS가 좋으면 성능이 향상됨&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;사용자에게 &lt;strong&gt;편의성&lt;/strong&gt;을 제공
    &lt;ul&gt;
      &lt;li&gt;컴퓨터를 몇 번만 사용해보면 누구나 쉽게 사용할 수 있음&lt;/li&gt;
      &lt;li&gt;과거, 1940s-1950s에는 전문가(oprator)들만 컴퓨터를 사용할 수 있었음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;부팅booting&quot;&gt;부팅(Booting)&lt;/h2&gt;
&lt;p&gt;boot: &lt;em&gt;n. 목이 긴 신발, 부츠&lt;/em&gt;&lt;br /&gt;
booting: 부츠를 끌어당겨 신는 것처럼 OS를 메인 메모리로 끌어당김&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;전원을 켜면&lt;/li&gt;
  &lt;li&gt;ROM의 code를 읽어와 실행
    &lt;ul&gt;
      &lt;li&gt;ROM: Read Only Memory&lt;/li&gt;
      &lt;li&gt;RAM: main memory의 대부분을 차지(수GB(10^9))&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;POST(Power-On Self-Test) 실행
    &lt;ul&gt;
      &lt;li&gt;전원을 켰을 때, 컴퓨터의 환경 설정이 제대로 되었는지 확인&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Boot loader실행
    &lt;ul&gt;
      &lt;li&gt;load: v.적재하다&lt;/li&gt;
      &lt;li&gt;하드 디스크 안의 OS를 메인 메모리로 가져옴&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;OS가 메인 메모리(RAM)에 올라오면, 명령을 받아들일 준비를 마침
    &lt;ul&gt;
      &lt;li&gt;Windows의 경우 바탕화면이 뜨고, Linux의 경우 prompt 창이 뜸&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;os--kernel--shell&quot;&gt;OS = kernel + shell&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Kernel
    &lt;ul&gt;
      &lt;li&gt;핵심&lt;/li&gt;
      &lt;li&gt;HW를 둘러싸며 이를 제어, 관리함&lt;/li&gt;
      &lt;li&gt;실제로 관리하는 프로그램&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Shell
    &lt;ul&gt;
      &lt;li&gt;OS의 껍질 부분&lt;/li&gt;
      &lt;li&gt;명령어 해석기(command interpreter)&lt;/li&gt;
      &lt;li&gt;사용자로부터 명령을 받아 변역 후 해당 명령을 실행함&lt;/li&gt;
      &lt;li&gt;명령: 아이콘 더블 클릭(Windows), 텍스트 입력(Linux &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ls&lt;/code&gt;(현 directory file 보여줌), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$who&lt;/code&gt;(사용자 확인), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ds&lt;/code&gt;(디스크 용량 확인) 등)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;os의-위치&quot;&gt;OS의 위치&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Application(App) ⊃ OS  ⊃ HW 
&lt;a href=&quot;https://www.ssla.co.uk/wp-content/uploads/2020/07/linux-operating-system-600x493.png&quot;&gt;&lt;img src=&quot;https://www.ssla.co.uk/wp-content/uploads/2020/07/linux-operating-system-600x493.png&quot; alt=&quot;os diagram&quot; width=&quot;50%&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;정부(government)에 비유할 수 있음&lt;/li&gt;
  &lt;li&gt;주어진 자원을 &lt;strong&gt;할당&lt;/strong&gt;(resource allocator)하고 &lt;strong&gt;관리&lt;/strong&gt;함(resource manager)&lt;/li&gt;
  &lt;li&gt;OS가 직접 일을 하지 않고, 각 부서에 맞는 업무를 할당함&lt;/li&gt;
  &lt;li&gt;프로세스 관리와 메인 메모리 관리가 가장 중요한 업무&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;역사&quot;&gt;역사&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;컴퓨터의 역사
    &lt;ul&gt;
      &lt;li&gt;1940s, &lt;strong&gt;OS가 없었음&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;programmer가 &lt;strong&gt;종이&lt;/strong&gt;에 연필로 program을 작성해 전산실에 전달&lt;/li&gt;
      &lt;li&gt;전달받은대로 구멍(천공)을 뚫은 카드와 compiler 프로그램 카드를 &lt;strong&gt;카드 리더기&lt;/strong&gt;에 올림&lt;/li&gt;
      &lt;li&gt;프로그램과 compiler가 &lt;strong&gt;메모리&lt;/strong&gt;에 적재되고 기계어가 도출됨&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;처리기(processor)&lt;/strong&gt;가 기계어를 실행하면&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;line printer&lt;/strong&gt;가 망치로 두드려 결과를 인쇄&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Batch processing system(일괄처리)
    &lt;ul&gt;
      &lt;li&gt;resident monitor: &lt;strong&gt;최초의 OS&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;사람(operator)이 직접 compiler, linker, loading을 했음&lt;/li&gt;
      &lt;li&gt;이 일련의 과정을 메모리에 프로그램으로 넣어(=&lt;strong&gt;상주&lt;/strong&gt;시켜) &lt;strong&gt;자동으로 실행&lt;/strong&gt;시킴&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Multiprogramming system(다중 프로그래밍)
    &lt;ul&gt;
      &lt;li&gt;컴퓨터는 비싼 자원&lt;/li&gt;
      &lt;li&gt;CPU에 비해 i/o의 처리 속도는 느리며, i/o 처리 시간 동안 CPU는 idle상태(가동되지 않는)가 됨&lt;/li&gt;
      &lt;li&gt;i/o 처리시 다음 user의 연산을 처리&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;하나의 CPU를 여러 user(program)가 사용&lt;/strong&gt;해 이용률을 증가시킴&lt;/li&gt;
      &lt;li&gt;user program의 효율적인 배치를 고민해야 함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Time-sharing system(시공유 시스템)
    &lt;ul&gt;
      &lt;li&gt;아주 &lt;strong&gt;짧은 시간(1/100초~1/1000초)동안 각 user의 작업을 나눠서 처리&lt;/strong&gt;함&lt;/li&gt;
      &lt;li&gt;혼자서 CPU를 쓰는 느낌을 줄 수 있음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;os-기술-천이&quot;&gt;OS 기술 천이&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;컴퓨터 규모별 분류
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Supercomputer &amp;gt; Mainframe &amp;gt; Mini &amp;gt; Micro&lt;/strong&gt;&lt;br /&gt;
  Supercomputer: 최강의 컴퓨터. 메모리 용량이 크고, CPU가 빠르며, 보조 기억장치가 뛰어남&lt;br /&gt;
  Mainframe: 수백 대의 단말기를 연결한 형태&lt;br /&gt;
  Mini: 수십 대의 단말기를 연결한 형태&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Supercomputer &amp;gt; Server &amp;gt; Workstation &amp;gt; PC &amp;gt; Handheld &amp;gt; Embeded&lt;/strong&gt;&lt;br /&gt;
  Handheld: 노트북, 태블릿, 스마트 폰&lt;br /&gt;
  Embeded: 차나 가전에 내장된 형태&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;고성능 컴퓨터의 기능이 Handheld, Embeded까지 적용됨&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;고등-운영체제&quot;&gt;고등 운영체제&lt;/h2&gt;
&lt;p&gt;(※대학원 과정)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;다중 프로세서 시스템&lt;/li&gt;
  &lt;li&gt;분산 시스템&lt;/li&gt;
  &lt;li&gt;실시간 시스템&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>ohoraming</name>
        
        
      </author>

      

      
        <category term="OS" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
</feed>
