<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="https://ohoraming.github.io/author/ohoraming/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://ohoraming.github.io/" rel="alternate" type="text/html" />
  <updated>2022-03-11T23:45:46+09:00</updated>
  <id>https://ohoraming.github.io/author/ohoraming/feed.xml</id>

  
  
  

  
    <title type="html">예비 개발자의 노트 | </title>
  

  
    <subtitle>배움을 기록합니다</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">Python(2) - MySQL</title>
      <link href="https://ohoraming.github.io/Python-mysql" rel="alternate" type="text/html" title="Python(2) - MySQL" />
      <published>2022-03-11T22:35:00+09:00</published>
      <updated>2022-03-11T22:35:00+09:00</updated>
      <id>https://ohoraming.github.io/Python-mysql</id>
      <content type="html" xml:base="https://ohoraming.github.io/Python-mysql">&lt;!-- 글 작성하기 --&gt;

&lt;!-- 글이 시작될 때 관련 시리즈를 리스트로 보여줌 --&gt;
&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;OS 관련 포스팅&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./Python-django&quot;&gt;Python(1) - Django 설치&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./Python-mysql&quot;&gt;Python(2) - MySQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-pymysql-설치&quot;&gt;1. pymysql 설치&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ pip install pymysql&lt;/code&gt; 입력&lt;/p&gt;

&lt;h2 id=&quot;2-db-연결&quot;&gt;2. db 연결&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;pymysql import&lt;/li&gt;
  &lt;li&gt;연결하려는 db의 기본 정보 입력
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pymysql&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pymysql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;root&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1234&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dbpractice&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-cursor-설정&quot;&gt;3. cursor 설정&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;cursor 가져오기&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curs = conn.cursor()&lt;/code&gt;
→ tuple로 반환&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curs = conn.cursor(pymysql.cursors.DictCursor)&lt;/code&gt;&lt;br /&gt;
→ parameter로 pymysql.cursors.DictCursor 전달&lt;br /&gt;
→ dictionary로 반환
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curs.execute('USE dbpractice;')&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;4-crud&quot;&gt;4. CRUD&lt;/h2&gt;
&lt;h3 id=&quot;1-insert&quot;&gt;(1) INSERT&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;execute()
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;curs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'INSERT INTO user (id, name, region, insdt) VALUES(&quot;hong&quot;, &quot;홍길동&quot;, &quot;서울&quot;, now());'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;sql 변수를 만들어 넣는 방법
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;INSERT INTO user (id, name, region, insdt) VALUES('hong2', '홍길동2', '서울2', now())&quot;&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;curs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# cursor를 가져온 상태에서 sql문을 실행
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-select&quot;&gt;(2) SELECT&lt;/h3&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SELECT * FROM user&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SELECT * FROM user WHERE region=%s&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;curs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# cursor를 가져온 상태에서 sql문을 실행
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'서울'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# %s에 들어갈 문자열을 추가함
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetchall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 실행한 데이터를 가져옴
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;fetchall: 모든 레코드를 가져옴&lt;/li&gt;
  &lt;li&gt;fetmany: 지정한 개수만큼 레코드를 가져옴&lt;/li&gt;
  &lt;li&gt;fetchone: 하나의 레코드만 가져옴
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 모든 행을 가져옴
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;region&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 특정 행, 열의 내용을 가져옴
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-update&quot;&gt;(3) UPDATE&lt;/h3&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;UPDATE user SET name='포로리' WHERE name='테스트'&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;curs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;4-delete&quot;&gt;(4) DELETE&lt;/h3&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;DELETE FROM user WHERE name='홍길동'&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;curs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content>

      
      
      
      
      

      <author>
          <name>ohoraming</name>
        
        
      </author>

      

      
        <category term="Python" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Git - Git Convention</title>
      <link href="https://ohoraming.github.io/git-convention" rel="alternate" type="text/html" title="Git - Git Convention" />
      <published>2022-03-10T21:25:00+09:00</published>
      <updated>2022-03-10T21:25:00+09:00</updated>
      <id>https://ohoraming.github.io/git-convention</id>
      <content type="html" xml:base="https://ohoraming.github.io/git-convention">&lt;!-- 글 작성하기 --&gt;

&lt;!-- 글이 시작될 때 관련 시리즈를 리스트로 보여줌 --&gt;
&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;여러 가지 포스팅&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./Other-git-convention&quot;&gt;Git - Git Convention&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://codingsight.com/git-branching-naming-convention-best-practices/&quot;&gt;https://codingsight.com/git-branching-naming-convention-best-practices/&lt;/a&gt;의 내용을 번역한 것입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;git-branching-naming-convention-best-practices&quot;&gt;Git Branching Naming Convention: Best Practices&lt;/h2&gt;
&lt;p&gt;Git branch는 Regular와 Temporary branch로 나눔&lt;/p&gt;

&lt;h2 id=&quot;regular-git-branches&quot;&gt;Regular Git Branches&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;영구적인 repository에 씀&lt;/li&gt;
  &lt;li&gt;간단하고 쉬운 naming convention&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;dev(development)&lt;/strong&gt;는 main 개발 branch임&lt;br /&gt;
dev branch의 아이디어는 해당 branch에서만 변경를 일으키고, master branch의 직접적인 변경은 제한함&lt;br /&gt;
dev branch의 변경은 review(검토)를 받고, 테스트 후 master branch와 merge됨&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;master&lt;/strong&gt;는 Git repository의 기본 branch임&lt;br /&gt;
항상 안정적이며, 어떠한 직접적인 check-in도 허용하지 않음&lt;br /&gt;
code review이후에만 merge가 가능함&lt;br /&gt;
팀 구성원 모두가 master를 안정적이며, 최신의 상태로 유지하는 것에 책임이 있음&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;QA 또는 test branch&lt;/strong&gt;는 QA testing과 자동 testing을 위한 모든 코드를 포함하고 있음&lt;br /&gt;
어떠한 변경이 production 환경으로 가기 전, 안정적인 codebase를 위해 반드시 QA testing을 거쳐야 함&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;temporary-git-branches&quot;&gt;Temporary Git Branches&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;이름에서 알 수 있는 것처럼, 필요할 때마다 만들고 없앨 수 있음&lt;/li&gt;
  &lt;li&gt;Bug Fix, Hot Fix, Feature Branches, Experimental Branches, WIP branches 용도로 사용할 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;git-branching-naming-convention&quot;&gt;Git Branching Naming Convention&lt;/h2&gt;
&lt;p&gt;수많은 naming convention이 존재함&lt;br /&gt;
이 중 가장 좋은 일곱 개의 naming convention에 대해 알아보자&lt;/p&gt;

&lt;h2 id=&quot;1-start-branch-name-with-a-group-word&quot;&gt;1. Start branch name with a Group word&lt;/h2&gt;
&lt;p&gt;group word로 branch 이름을 시작하라.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;최고의 방법 중 하나&lt;/li&gt;
  &lt;li&gt;group word는 자신의 작업 흐름과 일치하는 어느것이든 상관 없음&lt;br /&gt;
e.g.)&lt;br /&gt;
&lt;strong&gt;Bug&lt;/strong&gt; - 곧 해결되어야하는 버그,&lt;br /&gt;
&lt;strong&gt;WIP&lt;/strong&gt; - 작업이 진행 중에 있으며, 조만간 끝나지 않을 것이라 예상되지 않을 때&lt;br /&gt;
(WIP: work in process/progress)&lt;/li&gt;
  &lt;li&gt;branch 이름을 봤을 때, 해당 Git branch가 무엇에 대한 것이며, 어떤 목적을 가지고 있는지 알 수 있어야 함&lt;br /&gt;
e.g.) &lt;strong&gt;bug-logo-alignment-issue&lt;/strong&gt;: logo alignment issue를 고치는 중임&lt;br /&gt;
&lt;strong&gt;wip-ioc-container-added&lt;/strong&gt;: IoC container를 추가하는 작업을 진행 중임&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-use-unique-id-in-branch-names&quot;&gt;2. Use Unique ID in branch names&lt;/h2&gt;
&lt;p&gt;branch이름에 고유한 ID를 사용하라.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;branch 이름에 issue tracker ID를 사용할 수 있음&lt;/li&gt;
  &lt;li&gt;버그를 고칠 때, 선호하는 방법임&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;e.g.)&lt;br /&gt;
&lt;strong&gt;wip-8712-add-testing-module&lt;/strong&gt;라는 이름은&lt;br /&gt;
해당 branch가 testing module을 추가하는 업무에 적용되며,&lt;br /&gt;
issue의 tracking Id는 8712이고,&lt;br /&gt;
해당 업무가 진행 중에 있다는 것을 보여줌&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;branch 이름에 외부 tracking ID를 사용하는 것의 장점은 외부 시스템에서 진행 상황을 추적할 수 있다는 것임&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-use-hyphen-or-slash-as-separators&quot;&gt;3. Use Hyphen or Slash as Separators&lt;/h2&gt;
&lt;p&gt;구분자로 하이픈이나 슬래시를 사용하라.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;많은 개발자들은 구분자로 슬래시와 하이픈을 사용함&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;어떤 것을 사용할 지는 자신 또는 자신의 팀의 선호에 달려있음&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;개인적으로, 하이픈은 이름을 읽기 편하게 만들어 주어서 branch 이름의 구분자로 적절하다고 생각함&lt;/li&gt;
  &lt;li&gt;슬래시, 하이픈, 언더스코어 모두 사용할 수 있음&lt;/li&gt;
  &lt;li&gt;중요한 것은 일관되어야 한다는 것임&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;branch 이름에 구분자를 넣으면 두 가지 장점이 있음&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;가독성을 높일 수 있으며, 혼동을 줄여줄 수 있음&lt;/li&gt;
  &lt;li&gt;특히, 많은 branch를 다루고 있다면 관리하기 좋음&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;구분자가 없는 &lt;strong&gt;featureupgradejqueryversionloginmodule&lt;/strong&gt;보다는&lt;br /&gt;
구분자가 있는 &lt;strong&gt;feature_upgrade_jquery_version_login_module&lt;/strong&gt;이 읽기 쉬움&lt;/p&gt;

&lt;h2 id=&quot;4-git-branch-with-author-name&quot;&gt;4. Git Branch with Author Name&lt;/h2&gt;
&lt;p&gt;작성자 이름을 포함하는 Git branch&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;많은 회사들은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;author&amp;gt;_&amp;lt;branch-type&amp;gt;_&amp;lt;branch-name&amp;gt;&lt;/code&gt; 형식에 따라 작성자의 이름이 branch이름에 있는 것을 선호함&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;e.g.)  &lt;strong&gt;rajeev.bera_feature_new-experimental-changes&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;이 방법은 다른 개발자들의 작업과 추가적인 시스템의 진행 상황을 추적하기 좋음&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;5-avoid-using-numbers-only&quot;&gt;5. Avoid using numbers only&lt;/h2&gt;
&lt;p&gt;숫자만 사용하는 것을 피하라.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;몇몇 개발자들은 branch 이름에 issue Id만 기입하는데, 이는 일의 진행에 도움이 되지 않음&lt;/li&gt;
  &lt;li&gt;예를 들어, &lt;strong&gt;9912&lt;/strong&gt;라는 branch 이름은 무엇을 설명하는지 알 수가 없음&lt;/li&gt;
  &lt;li&gt;특히 이 방식은 다른 git branch와 merge하는 중에 혼란과 실수의 가능성만 증가시킴&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;6-avoid-using-all-naming-convention-simultaneously&quot;&gt;6. Avoid using all naming convention simultaneously&lt;/h2&gt;
&lt;p&gt;모든 naming convention을 동시에 사용하는 것을 피하라.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;모든 naming convention을 혼용해 사용하는 것은 좋은 방식이 아님&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;혼란만 가중시키고, 전반적인 처리 과정을 더 복잡하게 만듦&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;팀은 업무 중에 사용할 naming convention을 한번 정한 후, 팀원들이 받아들이도록 해야 함&lt;/li&gt;
  &lt;li&gt;일관성이 가장 중요함&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;7-avoid-long-descriptive-names-for-long-lived-branches&quot;&gt;7. Avoid long descriptive names for long-lived branches&lt;/h2&gt;
&lt;p&gt;오래가는 branch에 길게 설명하는 이름은 피하라.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;branch 이름의 필수적인 특징은 정확해야 하며, 유용한 정보를 주어야 한다는 것임&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;e.g.)&lt;br /&gt;
&lt;strong&gt;wip_login_module_which_will_used_in_the_public_website&lt;/strong&gt;,  &lt;strong&gt;wip_login_module_which_will_used_in_the_internal_website&lt;/strong&gt;&lt;br /&gt;
와 같은 branch 이름의 경우, 길고 상세함
필수적이지 않음
대신에,&lt;br /&gt;
&lt;strong&gt;wip_feature_login_module&lt;/strong&gt;과 같은 branch 이름은 짧지만 branch의 목적을 잘 설명함&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Git의 Branching 모델은 강력하지만, branch를 적절하고 효과적으로 다뤄야만 함&lt;/li&gt;
  &lt;li&gt;필수적인 요건 중 하나는 모든 팀원이 같은 convention을 따라야 하는 것임&lt;/li&gt;
  &lt;li&gt;pre-commit hook과 같은 Git hook을 사용하는 것도 쉬운 방법 중 하나임&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>ohoraming</name>
        
        
      </author>

      

      
        <category term="Other" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">OS(11) - Contiguous Memory Allocation</title>
      <link href="https://ohoraming.github.io/OS-contiguous-memory-allocation" rel="alternate" type="text/html" title="OS(11) - Contiguous Memory Allocation" />
      <published>2022-03-01T15:23:00+09:00</published>
      <updated>2022-03-01T15:23:00+09:00</updated>
      <id>https://ohoraming.github.io/OS-contiguous-memory-allocation</id>
      <content type="html" xml:base="https://ohoraming.github.io/OS-contiguous-memory-allocation">&lt;!-- 글 작성하기 --&gt;

&lt;!-- 글이 시작될 때 관련 시리즈를 리스트로 보여줌 --&gt;
&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;OS 관련 포스팅&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-intro&quot;&gt;OS(1) - Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-interrupt-based-system&quot;&gt;OS(2) - Interrupt-Based System&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-process-mgmt&quot;&gt;OS(3) - Process Management&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-cpu-scheduling&quot;&gt;OS(4) - CPU Scheduling&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-thread&quot;&gt;OS(5) - Thread&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-classical-sync-problems&quot;&gt;OS(6) - Classical Synchronization Problems&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-deadlock&quot;&gt;OS(7) - Deadlock&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-monitor&quot;&gt;OS(8) - Monitor&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-midterm&quot;&gt;OS(9) - Midterm&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-main-memory-mgmt&quot;&gt;OS(10) - Main Memory Management&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-contiguous-memory-allocation&quot;&gt;OS(11) - Contiguous Memory Allocation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;contiguous-memory-allocation-연속-메모리-할당&quot;&gt;Contiguous Memory Allocation (연속 메모리 할당)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;최초의 컴퓨터&lt;/strong&gt;&lt;br /&gt;
  → OS 없음&lt;br /&gt;
  → 하나의 process만 main memory에서 돎&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;OS 등장&lt;/strong&gt;&lt;br /&gt;
  → OS와 하나의 process가 돎&lt;br /&gt;
  → MS-DOS&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Multi-programming&lt;/strong&gt; 환경&lt;br /&gt;
  → OS와 여러 개의 process가 돎&lt;br /&gt;
  → booting 직후에는 OS와 &lt;strong&gt;big single hole&lt;/strong&gt;(비어있는 하나의 큰 메모리)&lt;br /&gt;
  → process 생성과 종료의 반복 후에는 OS와 &lt;strong&gt;scattered holes&lt;/strong&gt;(흩어져있는 여러 메모리)&lt;br /&gt;
  → memory가 흩어져 있으면 새 process 적재 불가&lt;br /&gt;
      (hole을 모두 합하면 적재할 process 용량보다 커도 이어져있지 않으면 사용 불가)
      (= 외부 단편화(&lt;strong&gt;external fragmentation&lt;/strong&gt;))&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;연속 메모리 할당 방식&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;First-fit&lt;/strong&gt;&lt;br /&gt;
  → memory를 위(또는 아래)에서 순차적으로 훑어 처음으로 만난 적합한 공간에 할당&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Best-fit&lt;/strong&gt;&lt;br /&gt;
  → 빈 hole 중에서 새 process 용량과 가장 크기가 비슷한 곳에 할당&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Worst-fit&lt;/strong&gt;&lt;br /&gt;
  → 빈 hole 중에서 새 process 용량과 가장 크기가 크게 차이나는 곳에 할당&lt;/li&gt;
      &lt;li&gt;속도: first-fit이 가장 빠름&lt;br /&gt;
  → 조건에 부합하는 첫 메모리 공간에 할당하기 때문&lt;/li&gt;
      &lt;li&gt;이용률: first-fit, best-fit 방식이 실행 못하는 process 수가 비교적 적음&lt;/li&gt;
      &lt;li&gt;first-fit이나 best-fit을 선택하더라도  &lt;br /&gt;
  &lt;strong&gt;여전히 external fragmentation 발생&lt;/strong&gt;&lt;br /&gt;
  → memory의 약 1/3은 사용 불가&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;compaction&lt;/strong&gt;: 흩어져 있는 hole들을 한 곳으로 모으는 것&lt;br /&gt;
  → 최적의 알고리즘의 부재, 고부담의 단점이 존재&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;paging-페이징&quot;&gt;Paging (페이징)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;memory에 process가 연속 할당되어야 한다는 생각때문에 발생한 &lt;strong&gt;external fragmentation의 해결책&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;memory&lt;/strong&gt;를 일정한 크기(= &lt;strong&gt;frame&lt;/strong&gt;)로 자르고 &lt;strong&gt;process&lt;/strong&gt; 역시 같은 일정한 크기(= &lt;strong&gt;page&lt;/strong&gt;)로 자름&lt;br /&gt;
  → size: frame = page&lt;/li&gt;
  &lt;li&gt;여러 개의 MMU가 relocation register값을 바꿔주면 각 page들이 hole의 frame에 각각 배치될 때, CPU는 process가 연속 할당되었다고 속음&lt;/li&gt;
  &lt;li&gt;이때의 MMU는 &lt;strong&gt;page table&lt;/strong&gt;이라고 함&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;address-translation-주소-변환-&quot;&gt;Address Translation (주소 변환) ★★★★★&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Logical address(논리 주소)와 Physical address(물리 주소)는 MMU를 기준으로 나뉨&lt;/li&gt;
  &lt;li&gt;Logical address&lt;br /&gt;
  → CPU가 내는 주소, 2진수(binary)&lt;br /&gt;
  → 전체 &lt;strong&gt;m&lt;/strong&gt;비트, 하위 &lt;strong&gt;n&lt;/strong&gt;비트(offset 또는 &lt;strong&gt;displacement(d)&lt;/strong&gt;), 상위 &lt;strong&gt;m-n&lt;/strong&gt;비트(&lt;strong&gt;page number(p)&lt;/strong&gt;)&lt;/li&gt;
  &lt;li&gt;Address translation: Logical address → Physical address&lt;br /&gt;
  → page number: page table의 index 값&lt;br /&gt;
  → frame number: 해당 page number의 내용&lt;br /&gt;
  → displacement(변위): 변하지 않음
  → page table의 entry 수 = 해당 process가 사용하는 page 수&lt;/li&gt;
  &lt;li&gt;예제 # 01
    &lt;ul&gt;
      &lt;li&gt;page size = 4byte&lt;/li&gt;
      &lt;li&gt;page table: 5 6 1 2&lt;/li&gt;
      &lt;li&gt;logical address = &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;13&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;pysical address = ?&lt;br /&gt;
sol.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;index number&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;page table&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;page size (= frame size) = 4byte = 2^n = 2^2 → &lt;strong&gt;n = 2&lt;/strong&gt;&lt;br /&gt;
logical address: 13(10) = 1101(2)&lt;br /&gt;
logical address = &lt;strong&gt;‘page number(p)’&lt;/strong&gt; + &lt;strong&gt;‘displacement(d)’&lt;/strong&gt;&lt;br /&gt;
logical address의 뒤에서부터 두 자리(=&lt;strong&gt;n&lt;/strong&gt;)는 &lt;strong&gt;(d)&lt;/strong&gt;, 남은 앞의 두 자리는 &lt;strong&gt;(p)&lt;/strong&gt;&lt;br /&gt;
→ p: 11/01 :d&lt;br /&gt;
page number: 11(2) = 3(10)이며, page table 3번 index의 frame number는 2(10) = 10(2)&lt;br /&gt;
pysical address = ‘frame number(&lt;strong&gt;f&lt;/strong&gt;)’ + ‘displacement(&lt;strong&gt;d&lt;/strong&gt;, ※불변)’이므로&lt;br /&gt;
&lt;strong&gt;pysical address&lt;/strong&gt; = 1001(2) = &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;9&lt;/code&gt;(10)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;예제 # 02
    &lt;ul&gt;
      &lt;li&gt;page size = 1KB&lt;/li&gt;
      &lt;li&gt;page table: 1 2 5 4 8 3 0 6&lt;/li&gt;
      &lt;li&gt;logical address = &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3000&lt;/code&gt;, pysical address = ?&lt;/li&gt;
      &lt;li&gt;pysical address = &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x1A53&lt;/code&gt;, logical address = ? &lt;br /&gt;
sol.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;index number&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;page table&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;6&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;7&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;6&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;page size (= frame size) = 1KB = 2^n = 2^10 → &lt;strong&gt;n = 10&lt;/strong&gt;&lt;br /&gt;
logical address: 3000(10) = 1011 1011 1000(2)&lt;br /&gt;
logical address = &lt;strong&gt;‘page number(p)’&lt;/strong&gt; + &lt;strong&gt;‘displacement(d)’&lt;/strong&gt;&lt;br /&gt;
logical address의 뒤에서부터 열 자리(=&lt;strong&gt;n&lt;/strong&gt;)는 &lt;strong&gt;(d)&lt;/strong&gt;, 남은 앞의 두 자리는 &lt;strong&gt;(p)&lt;/strong&gt;&lt;br /&gt;
 → p: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;11 1011 1000&lt;/code&gt; :d&lt;br /&gt;
page number: 10(2) = 2(10)이며, page table 2번 index의 &lt;strong&gt;frame number(f)&lt;/strong&gt;는 5(10) = 101(2)&lt;br /&gt;
pysical address = frame number(&lt;strong&gt;f&lt;/strong&gt;):101(2) + displacement(&lt;strong&gt;d&lt;/strong&gt;, ※불변): 11 1011 1000(2)이므로&lt;br /&gt;
&lt;strong&gt;pysical address&lt;/strong&gt; = 1 0111 1011 1000(2) = &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6072&lt;/code&gt;(10)&lt;/p&gt;

&lt;p&gt;pysical address: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x1A53&lt;/code&gt; = 1 1010 0101 0011(2)&lt;br /&gt;
n = 10, pysical address = ‘frame number(&lt;strong&gt;f&lt;/strong&gt;)’ + ‘displacement(&lt;strong&gt;d&lt;/strong&gt;, ※불변)’이므로&lt;br /&gt;
→ f: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1 10&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10 0101 0011&lt;/code&gt; :d&lt;br /&gt;
frame number: 110(2) = 6(10)이며, frame number 6의 index number는 7(10) = 111(2)&lt;br /&gt;
logical address = page number(&lt;strong&gt;p&lt;/strong&gt;):111(2) + displacement(&lt;strong&gt;d&lt;/strong&gt;, ※불변):10 0101 0011(2)이므로&lt;br /&gt;
&lt;strong&gt;logical address&lt;/strong&gt; = 1 1110 0101 0011(2) = &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x1E53&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;internal-fragmentation내부-단편화&quot;&gt;Internal Fragmentation(내부 단편화)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;process size가 page size의 배수가 아니어서 마지막 page는 한 frame을 다 못 채우는 것&lt;br /&gt;
e.g.) process: 15byte, page size: 4byte 일 때,&lt;br /&gt;
|  4  |  4  |  4  |  3  |으로 마지막 frame의 남은 1byte는 못 쓰게 됨 → 낭비&lt;/li&gt;
  &lt;li&gt;내부 단편화는 비교적 미미한 낭비라 큰 문제는 아님&lt;/li&gt;
  &lt;li&gt;내부 단편화의 최대 크기 = page size - 1byte&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;page-table-만들기&quot;&gt;page table 만들기&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;CPU register&lt;/strong&gt;로 page table 만들기
    &lt;ul&gt;
      &lt;li&gt;CPU 안의 기억장치인 CPU register로 page table을 만들면,&lt;br /&gt;
 → 장점: 주소 변환 &lt;strong&gt;속도 빠름&lt;/strong&gt;&lt;br /&gt;
 → 단점: CPU는 memory가 아니라서 table entry &lt;strong&gt;저장 용량이 작음&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Memory&lt;/strong&gt;로 page table 만들기
    &lt;ul&gt;
      &lt;li&gt;main memory 안에 넣는 방법으로,&lt;br /&gt;
 → 장점: table entry 수가 많아도 &lt;strong&gt;저장 용량에 문제 없음&lt;/strong&gt;&lt;br /&gt;
 → 단점: CPU가 낸 주소는 OS 안으로 가는데 그 주소를 한 번 읽어 frame number를 알아낸 뒤, 해당 frame number의 주소를 또 읽어야 해서 &lt;strong&gt;속도가 두 배로 느림&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;TLB(Translation Look-aside Buffer)&lt;/strong&gt;로 page table 만들기
    &lt;ul&gt;
      &lt;li&gt;주소 변환을 목적으로 별도의 SRAM 칩으로 만듦&lt;/li&gt;
      &lt;li&gt;원리는 cash memory와 비슷&lt;/li&gt;
      &lt;li&gt;CPU보다는 느리지만 보다 많은 entry 저장 가능&lt;/li&gt;
      &lt;li&gt;CPU와 memory의 중간 성격&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Effective Memory Access Time(유효 메모리 접근 시간)&lt;/strong&gt;&lt;br /&gt;
  → CPU가 주소를 내고, 메모리의 내용을 읽어오는데 걸리는 시간&lt;br /&gt;
  → &lt;strong&gt;Tm&lt;/strong&gt;: 메모리 내용을 읽는데 걸리는 시간&lt;br /&gt;
  &lt;strong&gt;Tb&lt;/strong&gt;: buffer를 읽는데 걸리는 시간&lt;br /&gt;
  &lt;strong&gt;hit ratio(h)&lt;/strong&gt;: 주소에 해당하는 page table entry가 buffer에 존재할 확률&lt;br /&gt;
  (buffer의 크기는 충분히 크지 않아서 entry 중 일부만 buffer에 있고 나머지는 memory에 존재)&lt;br /&gt;
  &lt;strong&gt;(★ 중요 예제 ★)&lt;/strong&gt;&lt;br /&gt;
  Tm: 100ns, Tb: 20ns, hit ratio(h): 80% 일때, Teff=?&lt;br /&gt;
  sol.) h(Tb+Tm) + (1-h)(Tb+Tm+Tm)&lt;br /&gt;
  = (0.8*120ns) + (0.2)(220ns)&lt;br /&gt;
  = 140ns&lt;br /&gt;
  → Tm: 100ns인데 40%의 손실이 발생한 결과임&lt;br /&gt;
  → 하지만, 실제 hit ratio는 95%이상이므로 손실은 아주 작음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content>

      
      
      
      
      

      <author>
          <name>ohoraming</name>
        
        
      </author>

      

      
        <category term="OS" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Python(1) - Django 설치</title>
      <link href="https://ohoraming.github.io/Python-django" rel="alternate" type="text/html" title="Python(1) - Django 설치" />
      <published>2022-02-28T22:40:00+09:00</published>
      <updated>2022-02-28T22:40:00+09:00</updated>
      <id>https://ohoraming.github.io/Python-django</id>
      <content type="html" xml:base="https://ohoraming.github.io/Python-django">&lt;!-- 글 작성하기 --&gt;

&lt;!-- 글이 시작될 때 관련 시리즈를 리스트로 보여줌 --&gt;
&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;OS 관련 포스팅&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./Python-django&quot;&gt;Python(1) - Django 설치&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./Python-mysql&quot;&gt;Python(2) - MySQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-django-설치&quot;&gt;1. Django 설치&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ python -m pip install Django&lt;/code&gt;입력&lt;br /&gt;
설치 끝나면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;django-admin&lt;/code&gt; 명령을 쓸 수 있음&lt;br /&gt;
→ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ django-admin&lt;/code&gt; 입력시 사용 가능한 서브 명령이 출력됨&lt;/p&gt;

&lt;h2 id=&quot;2-project-시작&quot;&gt;2. Project 시작&lt;/h2&gt;
&lt;h3 id=&quot;2-1-project-생성&quot;&gt;2-1. project 생성&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ django-admin startproject [project 이름]&lt;/code&gt;&lt;br /&gt;
→ 현재 디렉터리에 &lt;strong&gt;project파일이 생성되고&lt;/strong&gt; 그 안에 같은 이름의 project파일이 생김&lt;br /&gt;
&lt;strong&gt;또는,&lt;/strong&gt;&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ django-admin startproject [project 이름] .&lt;/code&gt;&lt;br /&gt;
→ 현재 디렉터리에 project파일이 생성됨&lt;/p&gt;

&lt;h3 id=&quot;2-2-project-파일-구성&quot;&gt;2-2. project 파일 구성&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myproject&lt;/code&gt; 폴더
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  myproject/
      manage.py
      myproject/
          __init__.py
          asgi.py
          settings.py
          urls.py
          wsgi.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;urls.py&lt;/code&gt;파일&lt;br /&gt;
  → 사용자가 접속하는 path에 따라 그 요청 처리를 지정(routing)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-django-실행&quot;&gt;3. Django 실행&lt;/h2&gt;
&lt;h3 id=&quot;3-1-managepy를-이용&quot;&gt;3-1. manage.py를 이용&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ python manage.py&lt;/code&gt;입력시 사용 가능한 서브 명령이 출력됨&lt;br /&gt;
(※ 반드시 현재의 디렉터리가 project폴더인지 확인하기!)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ python manage.py runserver&lt;/code&gt; 입력&lt;br /&gt;
→ 8000번 포트에서 서버가 성공적으로 열림&lt;br /&gt;
(※ python 개발 서버는 기본적으로 8000번 포트에서 리스닝)&lt;/p&gt;

&lt;h3 id=&quot;3-2-서버를-끄고-싶다면&quot;&gt;3-2. 서버를 끄고 싶다면,&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ctrl + c&lt;/code&gt; 입력&lt;/p&gt;
&lt;h3 id=&quot;3-3-포트-번호를-바꾸고-싶다면&quot;&gt;3-3. 포트 번호를 바꾸고 싶다면,&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ python manage.py runserver [바꿀 포트 번호]&lt;/code&gt; 를 입력&lt;/p&gt;

&lt;h2 id=&quot;4-application-설치&quot;&gt;4. Application 설치&lt;/h2&gt;
&lt;h3 id=&quot;4-1-django-admin-startapp-app-이름&quot;&gt;4-1. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;django-admin startapp [app 이름]&lt;/code&gt;&lt;/h3&gt;
&lt;h3 id=&quot;4-2-app-파일-구성&quot;&gt;4-2. app 파일 구성&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp&lt;/code&gt; 폴더
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  myapp/
      migrations/
          __init__.py
      __init__.py
      admin.py
      apps.py
      models.py
      tests.py
      views.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;5-routing&quot;&gt;5. Routing&lt;/h2&gt;
&lt;h3 id=&quot;5-1-projecturlspy-설정&quot;&gt;5-1. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[project]/urls.py&lt;/code&gt; 설정&lt;/h3&gt;
&lt;p&gt;→ 큰 틀의 라우팅은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[project]/urls.py&lt;/code&gt; 에서 지정&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myproject/urls.py&lt;/code&gt;
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.urls&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'myapp.urls'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;→ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;urlpatterns&lt;/code&gt; 정의(routing 관련 정보를 기록)&lt;br /&gt;
  → &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;path()&lt;/code&gt; 를 이용해 url을 넣어줌&lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;path('접속 경로/', include('연결할 app.urls'))&lt;/code&gt;&lt;br /&gt;
  → &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include()&lt;/code&gt;: import 필요&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;→ user 접속시 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp.urls&lt;/code&gt; 로 연결&lt;/p&gt;

&lt;h3 id=&quot;5-2-appurlspy-생성-및-설정&quot;&gt;5-2. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[app]/urls.py&lt;/code&gt; 생성 및 설정&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp/urls.py&lt;/code&gt;
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.urls&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'create/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'read/1/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;→ user가 각 경로로 접속했을 때, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;views.py&lt;/code&gt;로 전달&lt;br /&gt;
→ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;views.py&lt;/code&gt;: client로 정보를 전달할 &lt;strong&gt;함수 작성&lt;/strong&gt;(index, create, read)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp/views.py&lt;/code&gt;
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.http&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.shortcuts&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Create your views here.
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Welcome!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Create!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Read!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;5-3. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[app]/urls.py&lt;/code&gt; 수정&lt;br /&gt;
→ 사용자가 기본 포트로 접속 시, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp/views.py&lt;/code&gt;의 index 함수를 실행하도록 수정&lt;br /&gt;
→ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;views.index&lt;/code&gt; import&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp/urls.py&lt;/code&gt;
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.urls&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;myapp&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;views&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'create/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'read/1/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;cf.) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;path('read/1/', view.read)&lt;/code&gt; 에서 1이 바뀔 수 있는 숫자라면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;&amp;gt;&lt;/code&gt;를 이용해 작성&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp/urls.py&lt;/code&gt;
        &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'read/&amp;lt;id&amp;gt;/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;→ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;views.py&lt;/code&gt;의 read()가 해당 인자(id)를 받아서 처리&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp/views.py&lt;/code&gt;
        &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Read!'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;routing-정리&quot;&gt;&amp;lt;routing 정리&amp;gt;&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;user가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read/1&lt;/code&gt; 경로로 접속시&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myproject/urls.py&lt;/code&gt;로 감
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'myapp.urls'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp/urls.py&lt;/code&gt;로 위임
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'read/&amp;lt;id&amp;gt;/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;위 코드에 걸림&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp/views.py&lt;/code&gt;로 위임
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Read!'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read() 함수&lt;/code&gt;실행&lt;/li&gt;
  &lt;li&gt;client에 반환 값 전송&lt;/li&gt;
&lt;/ol&gt;</content>

      
      
      
      
      

      <author>
          <name>ohoraming</name>
        
        
      </author>

      

      
        <category term="Python" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">OS(10) - Main Memory Management</title>
      <link href="https://ohoraming.github.io/OS-main-memory-mgmt" rel="alternate" type="text/html" title="OS(10) - Main Memory Management" />
      <published>2022-02-24T22:24:00+09:00</published>
      <updated>2022-02-24T22:24:00+09:00</updated>
      <id>https://ohoraming.github.io/OS-main-memory-mgmt</id>
      <content type="html" xml:base="https://ohoraming.github.io/OS-main-memory-mgmt">&lt;!-- 글 작성하기 --&gt;

&lt;!-- 글이 시작될 때 관련 시리즈를 리스트로 보여줌 --&gt;
&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;OS 관련 포스팅&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-intro&quot;&gt;OS(1) - Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-interrupt-based-system&quot;&gt;OS(2) - Interrupt-Based System&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-process-mgmt&quot;&gt;OS(3) - Process Management&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-cpu-scheduling&quot;&gt;OS(4) - CPU Scheduling&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-thread&quot;&gt;OS(5) - Thread&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-classical-sync-problems&quot;&gt;OS(6) - Classical Synchronization Problems&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-deadlock&quot;&gt;OS(7) - Deadlock&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-monitor&quot;&gt;OS(8) - Monitor&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-midterm&quot;&gt;OS(9) - Midterm&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-main-memory-mgmt&quot;&gt;OS(10) - Main Memory Management&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-contiguous-memory-allocation&quot;&gt;OS(11) - Contiguous Memory Allocation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;메모리-역사&quot;&gt;메모리 역사&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Core memory&lt;/strong&gt;&lt;br /&gt;
  → 반지 모양의 철심에 자성 물질을 바른 뒤 전기 흘려 자기장이 발생해 순간적으로 자석이 되는 원리를 이용해 메모리를 만듦&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;진공관 메모리&lt;/strong&gt;&lt;br /&gt;
  → 1950s ~ 1960s, 손가락 3-4개 정도의 크기로 1bit 저장시 4-5개 필요&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;트랜지스터 메모리&lt;/strong&gt;&lt;br /&gt;
  → 1960s ~ 1970s, 반도체 칩 안의 소자로 손톱만한 크기&lt;br /&gt;
  → 1bit 저장시 4-6개 필요&lt;/li&gt;
  &lt;li&gt;결국,&lt;br /&gt;
  공간을 많이 차지해 큰 메모리를 저장하기가 힘듦&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;집적회로 메모리&lt;/strong&gt;(현재)&lt;br /&gt;
  → SRAM: 주로 캐시 메모리 만들 때 사용&lt;br /&gt;
  → DRAM: 메인 메모리 만들 때 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;언제나-부족한-메모리&quot;&gt;언제나 부족한 메모리&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;메모리 용량은 1970s(64KB)에서 현재(수GB)로 늘어났지만,&lt;br /&gt;
&lt;strong&gt;프로그램의 크기도 증가&lt;/strong&gt;해 메모리는 여전히 부족함&lt;br /&gt;
→ 과거(1960s)의 &lt;strong&gt;메모리 관리가 여전히 중요&lt;/strong&gt;한 이유&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;메모리의 효과적인 사용&lt;br /&gt;
  → 메모리 낭비 없애기&lt;br /&gt;
  → &lt;strong&gt;virtual memory&lt;/strong&gt;(가상 메모리): 실제 물리적인 memory보다 크게 보이도록 하는 기술&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;프로그램을-메모리에-올리기&quot;&gt;프로그램을 메모리에 올리기&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;메모리 구조&lt;br /&gt;
  → &lt;strong&gt;address&lt;/strong&gt;: cpu가 읽고자하는 memory의 주소&lt;br /&gt;
  → &lt;strong&gt;data&lt;/strong&gt;: 해당 주소에 있는 내용을 cpu에 전송(양방향)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;프로그램 개발
    &lt;ol&gt;
      &lt;li&gt;&lt;strong&gt;source file&lt;/strong&gt;: high level language 또는 assembly language &lt;br /&gt;
 → high level language로 코드 작성&lt;br /&gt;
 → &lt;strong&gt;compiler&lt;/strong&gt;가 compile하면 기계어로 번역됨&lt;br /&gt;
 또는,&lt;br /&gt;
 → assembly language로 코드 작성&lt;br /&gt;
 → &lt;strong&gt;assembler&lt;/strong&gt;가 assemble하면 기계어로 번역됨&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;object file&lt;/strong&gt;: compile 또는 assemble 결과 = 기계어&lt;br /&gt;
 → 유용한 함수들을 모아놓은 library와 object file을 &lt;strong&gt;linker&lt;/strong&gt;가 연결(link)&lt;br /&gt;
 = 실행 파일(exe file)&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;executable file&lt;/strong&gt;: 실행 파일&lt;br /&gt;
 → 하드 디스크에 들어감  &lt;br /&gt;
 → 프로그램을 실행하려면 &lt;strong&gt;loader&lt;/strong&gt;가 main memory에 적재(load)&lt;br /&gt;
 → &lt;strong&gt;‘code + data + stack’&lt;/strong&gt; 으로 구성&lt;br /&gt;
 e.g.) ‘a와 b 중 더 큰 수를 구하라’에서&lt;br /&gt;
 a, b는 &lt;strong&gt;data&lt;/strong&gt;, 더 큰 수를 구하는 것은 &lt;strong&gt;code&lt;/strong&gt;,&lt;br /&gt;
 함수 호출시 돌아오는 주소 저장 또는 지역 변수를 저장하는 것은 &lt;strong&gt;stack&lt;/strong&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;실행 파일을 메모리에 올릴 때,&lt;br /&gt;
몇 번지의 메모리에 올릴지 → &lt;strong&gt;loader&lt;/strong&gt;가 결정&lt;br /&gt;
메인 메모리에 여러 process가 올라와 있다면 → 메모리 번지 변화 → &lt;strong&gt;MMU&lt;/strong&gt;사용&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;MMU&lt;/strong&gt;(&lt;strong&gt;M&lt;/strong&gt;emory &lt;strong&gt;M&lt;/strong&gt;anagement &lt;strong&gt;U&lt;/strong&gt;nit)&lt;br /&gt;
  → CPU와 memory 사이에 존재&lt;br /&gt;
  → base, limit, relocation register 존재&lt;br /&gt;
  → CPU에서 나온 address가 바로 memory로 가는 것을 방지(memory 보호)&lt;br /&gt;
  → 실행 중인 process가 address를 침범하는지 수시로 감시&lt;br /&gt;
  e.g.) main.exe가&lt;br /&gt;
  0번지(→ &lt;strong&gt;logical address&lt;/strong&gt;: CPU가 보내는 주소)에서 실행하도록 프로그래밍 되어있는데, 실행 가능한 메모리는 500번지(→ &lt;strong&gt;physical address&lt;/strong&gt;: 실제 메인 메모리로 가는 주소)가 비어있다면,&lt;br /&gt;
  OS가 MMU의 &lt;strong&gt;relocation register&lt;/strong&gt; 값을 500으로 변경함&lt;br /&gt;
  즉, CPU가 봤을 땐 0번지에서 실행, 실제로는 500번지에서 실행되도록 함&lt;br /&gt;
  (→ &lt;strong&gt;address translation&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;메모리-낭비-방지&quot;&gt;메모리 낭비 방지&lt;/h2&gt;
&lt;h3 id=&quot;1-dynamic-loading동적-적재&quot;&gt;1. Dynamic Loading(동적 적재)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;현대 OS의 처리 방식&lt;/li&gt;
  &lt;li&gt;프로그램 실행에 반드시 필요한 routine/data만 메모리에 적재(load)&lt;/li&gt;
  &lt;li&gt;오류처리, 버퍼 용량, java의 class 등이 항상 다 사용되는 것 아님&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;‘필요할 때’ 해당 부분을 메모리에 올림&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;과거에는 Static Loading(정적 적재)를 많이 했음&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-dynamic-linking동적-연결&quot;&gt;2. Dynamic Linking(동적 연결)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;여러 프로그램에 &lt;strong&gt;공통으로 사용되는 library를 메모리에 중복해 올리면 메모리 낭비&lt;/strong&gt; 발생&lt;/li&gt;
  &lt;li&gt;과거의 &lt;strong&gt;Static linking(정적 연결)&lt;/strong&gt;의 경우, compile후 실행 파일 만들기 전에 link가 일어나 memory 낭비가 있었음&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dynamic Linking(동적 연결)&lt;/strong&gt;은 common library를 제외한 나머지 부분을 memory에 load 후, 실행할 때 lib를 load해 link&lt;/li&gt;
  &lt;li&gt;library routine 연결(link)을 실행(load)할 때로 미루는 방법임&lt;br /&gt;
  → Linux: shared library 확장자 .so(shared object)파일&lt;br /&gt;
  → Windows: Dyanamic Linking Library(DLL) 확장자 .dll파일&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-swapping&quot;&gt;3. Swapping&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;main memory에 적재되어 있지만, 현재는 사용하지 않고 있는 &lt;strong&gt;process image&lt;/strong&gt;를 &lt;strong&gt;backing store&lt;/strong&gt;로 몰아냄&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;backing store&lt;/strong&gt;&lt;br /&gt;
→ 하드 디스크의 일부분으로 실행파일이 저장되어있는 부분(→ &lt;strong&gt;file system&lt;/strong&gt;)과는 다른 곳 &lt;br /&gt;
→ 대략 main memory 정도의 크기면 됨&lt;/li&gt;
  &lt;li&gt;swapping되어 backing store에 들어가면, 해당 main memory 공간은 비워지고 다른 process가 들어갈 수 있게 됨&lt;/li&gt;
  &lt;li&gt;backing store에서 main memory로 복귀시 이전과는 다른 자리에 들어가지만, &lt;strong&gt;relocation register&lt;/strong&gt;를 사용하므로 적재 위치는 무관함&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>ohoraming</name>
        
        
      </author>

      

      
        <category term="OS" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">OS(9) - Midterm</title>
      <link href="https://ohoraming.github.io/OS-midterm" rel="alternate" type="text/html" title="OS(9) - Midterm" />
      <published>2022-02-09T22:58:00+09:00</published>
      <updated>2022-02-09T22:58:00+09:00</updated>
      <id>https://ohoraming.github.io/OS-midterm</id>
      <content type="html" xml:base="https://ohoraming.github.io/OS-midterm">&lt;!-- 글 작성하기 --&gt;

&lt;!-- 글이 시작될 때 관련 시리즈를 리스트로 보여줌 --&gt;
&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;OS 관련 포스팅&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-intro&quot;&gt;OS(1) - Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-interrupt-based-system&quot;&gt;OS(2) - Interrupt-Based System&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-process-mgmt&quot;&gt;OS(3) - Process Management&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-cpu-scheduling&quot;&gt;OS(4) - CPU Scheduling&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-thread&quot;&gt;OS(5) - Thread&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-classical-sync-problems&quot;&gt;OS(6) - Classical Synchronization Problems&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-deadlock&quot;&gt;OS(7) - Deadlock&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-monitor&quot;&gt;OS(8) - Monitor&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-midterm&quot;&gt;OS(9) - Midterm&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-main-memory-mgmt&quot;&gt;OS(10) - Main Memory Management&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-contiguous-memory-allocation&quot;&gt;OS(11) - Contiguous Memory Allocation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1&quot;&gt;1.&lt;/h2&gt;
&lt;p&gt;프로세스 P1, P2, P3 의 CPU burst time 은 각각 4, 2, 8 msec 이며,&lt;br /&gt;
세 프로세스는 각각 다른 시간에 ready queue 에 도착했다.&lt;br /&gt;
즉 P1 은 0 msec에, P2 는 1 msec에, P3 는 5 msec 에 각각 도착했다.&lt;br /&gt;
CPU scheduling 에 대한 아래 물음에 답하라.&lt;br /&gt;
(※ 각 경우마다 Gantt chart를 그리고 수식도 적어라.&lt;br /&gt;
답은 계산하지 않아도 되지만, 반드시 단위는 기록해야 한다).&lt;/p&gt;

&lt;p&gt;→ 먼저, process별로 알아보기 쉽게 표를 작성&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;process&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Arrival Time(msec)&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Burst Time(msec)&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Priority&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;P1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;P2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;P3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;8&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;(a) FCFS 스케쥴링을 사용하면 평균 대기시간(average waiting time)은 얼마인가?&lt;/strong&gt;&lt;br /&gt;
    → &lt;strong&gt;F&lt;/strong&gt;irst &lt;strong&gt;C&lt;/strong&gt;ome &lt;strong&gt;F&lt;/strong&gt;irst &lt;strong&gt;S&lt;/strong&gt;erved&lt;br /&gt;
    → AWT = ( 0 + 3 + 1) / 3 = 4/3msec&lt;/p&gt;

&lt;div id=&quot;gantt&quot;&gt; &lt;table id=&quot;chart&quot; style=&quot;table-layout: fixed;border-collapse: collapse;width: 100%;border-spacing: 0;&quot;&gt; &lt;thead id=&quot;thead&quot;&gt;&lt;tr&gt;&lt;th rowid=&quot;0&quot; colid=&quot;0&quot; style=&quot;width: 10px; border-width: 3px; border-color: rgb(0, 0, 0); text-align: center; user-select: none; padding: 0.5rem; position: relative;&quot;&gt;P1&lt;/th&gt;&lt;th rowid=&quot;0&quot; colid=&quot;1&quot; style=&quot;width: 10px; border-width: 3px; border-color: rgb(0, 0, 0); text-align: center; user-select: none; padding: 0.5rem; position: relative;&quot;&gt;P2&lt;/th&gt;&lt;th rowid=&quot;0&quot; colid=&quot;2&quot; style=&quot;width: 10px; border-width: 3px; border-color: rgb(0, 0, 0); text-align: center; user-select: none; padding: 0.5rem; position: relative;&quot;&gt;P3&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tbody id=&quot;tbody&quot;&gt;&lt;tr&gt;&lt;td rowid=&quot;0&quot; colid=&quot;0&quot; style=&quot;border-width: 0px; border-color: rgb(224, 0, 0); user-select: none; padding: 0.5rem; position: relative;&quot;&gt;&amp;nbsp;0&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;4&lt;br /&gt;↑&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;↑&lt;br /&gt;P1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;P2&lt;/td&gt;&lt;td rowid=&quot;0&quot; colid=&quot;1&quot; style=&quot;border-width: 0px; border-color: rgb(224, 0, 0); user-select: none; padding: 0.5rem; position: relative;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;5&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;6&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;↑&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;P3&lt;/td&gt;&lt;td rowid=&quot;0&quot; colid=&quot;2&quot; style=&quot;text-align: center; border-width: 0px; border-color: rgb(224, 0, 0); user-select: none; padding: 0.5rem; position: relative;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;14&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt;

&lt;p&gt;&lt;strong&gt;(b) 선점형(preemptive) SJF 스케쥴링을 사용할 때 평균반환시간(average turnaround time)은 얼마인가?&lt;/strong&gt;&lt;br /&gt;
    → &lt;strong&gt;S&lt;/strong&gt;hortest &lt;strong&gt;J&lt;/strong&gt;ob &lt;strong&gt;F&lt;/strong&gt;irst&lt;br /&gt;
    → P1의 burst time은 4로 P2보다 길지만 0msec에 P1만 도착해있으므로 P1부터 실행함&lt;br /&gt;
    → 1msec에서 burst time이 짧은 것은 P2이므로 P2실행&lt;br /&gt;
    → preemptive이므로 강제전환 가능&lt;br /&gt;
    → ATT: 도착부터 서비스가 끝나서 나가기까지 걸리는 시간&lt;br /&gt;
    → ATT = ( 6 + 2 + 9) / 3 = 17/3msec&lt;/p&gt;

&lt;div id=&quot;gantt&quot; draggable=&quot;false&quot;&gt; &lt;table id=&quot;chart&quot; style=&quot;table-layout: auto; border-collapse: collapse; width: 100%; border-spacing: 0px;&quot;&gt; &lt;thead id=&quot;thead&quot;&gt;&lt;tr&gt;&lt;th rowid=&quot;0&quot; colid=&quot;0&quot; style=&quot;background-color: rgb(255, 255, 255); font-size: 20px; width: 60px; border-width: 3px; border-color: rgb(0, 0, 0); text-align: center;&quot;&gt;P1&lt;/th&gt;&lt;th rowid=&quot;0&quot; colid=&quot;1&quot; style=&quot;background-color: rgb(255, 255, 255); font-size: 20px; width: 120px; border-width: 3px; border-color: rgb(0, 0, 0); text-align: center;&quot;&gt;P2&lt;/th&gt;&lt;th rowid=&quot;0&quot; colid=&quot;2&quot; style=&quot;background-color: rgb(255, 255, 255); font-size: 20px; width: 120px; border-width: 3px; border-color: rgb(0, 0, 0); text-align: center;&quot;&gt;P1&lt;/th&gt;&lt;th rowid=&quot;0&quot; colid=&quot;3&quot; style=&quot;background-color: rgb(255, 255, 255); font-size: 20px; width: 60px; border-width: 3px; border-color: rgb(0, 0, 0); text-align: center;&quot;&gt;P1&lt;/th&gt;&lt;th rowid=&quot;0&quot; colid=&quot;4&quot; style=&quot;background-color: rgb(255, 255, 255); font-size: 20px; width: 480px; border-width: 3px; border-color: rgb(0, 0, 0); text-align: center;&quot;&gt;P3&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th rowid=&quot;1&quot; colid=&quot;0&quot; style=&quot;background-color: rgb(255, 255, 255); text-align: center; border-style: solid hidden hidden; border-top-width: 1px; padding-right: 0px;&quot;&gt;0&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1&lt;/th&gt;&lt;th rowid=&quot;1&quot; colid=&quot;1&quot; style=&quot;background-color: rgb(255, 255, 255); text-align: center; border-style: solid hidden hidden; border-top-width: 1px; padding-right: 0px;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;3&lt;/th&gt;&lt;th rowid=&quot;1&quot; colid=&quot;2&quot; style=&quot;background-color: rgb(255, 255, 255); text-align: center; border-style: solid hidden hidden; border-top-width: 1px; padding-right: 0px;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;5&lt;/th&gt;&lt;th rowid=&quot;1&quot; colid=&quot;3&quot; style=&quot;background-color: rgb(255, 255, 255); text-align: center; border-style: solid hidden hidden; border-top-width: 1px; padding-right: 0px;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;6&lt;/th&gt;&lt;th rowid=&quot;1&quot; colid=&quot;4&quot; style=&quot;background-color: rgb(255, 255, 255); text-align: center; border-style: solid hidden hidden; border-top-width: 1px; padding-right: 0px;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;14&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tbody id=&quot;tbody&quot;&gt;&lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt;

&lt;p&gt;&lt;strong&gt;(c) Time quantum 이 무한대 (∞) 인 Round-Robin scheduling을 적용하면 평균반환시간은 얼마인가?&lt;/strong&gt;&lt;br /&gt;
    → Time quantum = ∞ 이므로 FCFS와 같은 scheduling 양상을 보임&lt;br /&gt;
    → AWT = ( 4 + 5 + 9) / 3 = 18/3 = 6msec&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(d) 비선점형(nonpreemptive) 우선순위(priority) 스케쥴링을 사용하면 처리율(throughput)은 얼마인가? 단, 프로세스 P1, P2, P3 의 우선순위는 각각 3, 2, 1 이며, 숫자가 작을수록 우선순위가 높다.&lt;/strong&gt;&lt;br /&gt;
    → Priority scheduling이지만 non-preemptive이므로 강제전환 불가&lt;br /&gt;
    → priority가 더 낮은 P1이 끝나야 P2실행 가능&lt;br /&gt;
    → throughput: 단위 시간당 처리한 작업의 수&lt;br /&gt;
    → throughput = 3/14 jobs/msec&lt;/p&gt;

&lt;h2 id=&quot;2&quot;&gt;2.&lt;/h2&gt;
&lt;p&gt;프로세스 P1, P2, P3 의 코드는 각각 다음과 같다. 세마포(semaphore)를 사용하여 아래 조건이 각각 만족되도록 프로세스의 코드를 수정하라. 세마포의 초기값도 나타내어야 한다. 세마포는 한 개 또는 여러 개를 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;P1: S1&lt;br /&gt;
P2: S2&lt;br /&gt;
P3: S3&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(a) S1 이 끝나야 S2 나 S3 가 실행된다. S2, S3 의 순서는 상관없다.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;sem.value&lt;/strong&gt; = 0;&lt;br /&gt;
  &lt;strong&gt;P1&lt;/strong&gt;: S1; sem.release(); sem.release();&lt;br /&gt;
  &lt;strong&gt;P2&lt;/strong&gt;: sem.acquire(); S2;  &lt;br /&gt;
  &lt;strong&gt;P3&lt;/strong&gt;: sem.acquire(); S3;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;(b) S1 과 S2 가 모두 끝나야만 S3 가 실행된다. S1, S2 의 순서는 상관없다.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;semaphore 2개 쓰는 경우,&lt;br /&gt;
  &lt;strong&gt;sem.value&lt;/strong&gt; = 0;&lt;br /&gt;
  &lt;strong&gt;sem2.value&lt;/strong&gt; = 0;&lt;br /&gt;
  &lt;strong&gt;P1&lt;/strong&gt;: S1; sem.release(); &lt;br /&gt;
  &lt;strong&gt;P2&lt;/strong&gt;: S2; sem2.release();  &lt;br /&gt;
  &lt;strong&gt;P3&lt;/strong&gt;: sem.acquire(); sem2.acquire(); S3;&lt;/li&gt;
  &lt;li&gt;semaphore 1개 쓰는 경우,&lt;br /&gt;
  &lt;strong&gt;sem.value&lt;/strong&gt; = 0;&lt;br /&gt;
  &lt;strong&gt;P1&lt;/strong&gt;: S1; sem.release(); &lt;br /&gt;
  &lt;strong&gt;P2&lt;/strong&gt;: S2; sem.release();  &lt;br /&gt;
  &lt;strong&gt;P3&lt;/strong&gt;: sem.acquire(); sem.acquire(); S3;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;(c) S1, S2, S3 의 순서대로 실행된다. 즉 S1 → S2 → S3 의 순서를 따라야 한다.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;sem.value&lt;/strong&gt; = 0;&lt;br /&gt;
  &lt;strong&gt;sem2.value&lt;/strong&gt; = 0;&lt;br /&gt;
  &lt;strong&gt;P1&lt;/strong&gt;: S1; sem.release();&lt;br /&gt;
  &lt;strong&gt;P2&lt;/strong&gt;: sem.acquire(); S2; sem2.release();&lt;br /&gt;
  &lt;strong&gt;P3&lt;/strong&gt;: sem2.acquire(); S3;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3&quot;&gt;3.&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;a) 프로세스 동기화(process synchronization)란 무엇을 의미하는가?&lt;/strong&gt;&lt;br /&gt;
    → 올바른 계산 결과가 나올 수 있도록 임계구역(Critical Section) 문제를 해결하는 것&lt;br /&gt;
    → process의 실행 순서를 제어하는 것&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;b) 세마포의 내부 구조를 그림으로 나타내고 간략히 설명하라.&lt;/strong&gt;&lt;br /&gt;
    → 어떤 process가 acquire()를 호출하면 value가 1감소하고 그 결괏값이 0보다 작으면 해당 process를 queue에 가둠&lt;br /&gt;
    → 어떤 process가 release()를 호출하면 value가 1증가하고 그 결괏값이 0보다 작거나 같으면 queue에 갇혀있는 process를 깨움(= ready queue에 넣음)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;c) 어떤 세마포에 다섯 개의 프로세스가 블록(block)되어있다고 가정하자.&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;이때 세마포 내부의 정수 값(value)은 얼마인가?&lt;/strong&gt;&lt;br /&gt;
    → 처음 sem.value = 0; 일때, 어떤 process가 acquire()를 호출하면 value = -1이 되고 block 됨. 이 원리로 5개의 process가 acquire()를 호출하면 value = -5가 되고 모두 block됨&lt;/p&gt;

&lt;h2 id=&quot;4&quot;&gt;4.&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;a) 시스템 콜(system call)과 소프트웨어 인터럽트(software interrupt)는 어떤 관련성이 있는가?&lt;/strong&gt;&lt;br /&gt;
    → 시스템 콜은 운영체제 서비스를 받기 위해 호출하며 s/w interrupt로 만듦&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;b) 유닉스/리눅스 운영체제에서 fork() 시스템 콜은 어떤 용도로 사용되는가?&lt;/strong&gt;&lt;br /&gt;
    → 하나의 parent process에서 여러 개의 child process를 만드는 목적으로 사용함&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;c) 자신이 알고 있는 유닉스/리눅스 시스템 콜의 종류를 세 가지 나열하고 간략히 설명하라.&lt;/strong&gt;&lt;br /&gt;
    → exit(): process 종료&lt;br /&gt;
    → open(): file 열기&lt;br /&gt;
    → close(): file 닫기&lt;br /&gt;
    → read(): file 읽기&lt;br /&gt;
    → write(): file 쓰기&lt;br /&gt;
    → exec(): 생성된 process에 실행 파일을 복사해 넣음&lt;/p&gt;

&lt;h2 id=&quot;5&quot;&gt;5.&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;다음 용어의 의미를 간략히 설명하라.&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;a) parent process&lt;/strong&gt;      &lt;br /&gt;
    → process는 process에 의해 만들어지는데, 자신을 만든 process를 parent process라고 함&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;b) command interpreter&lt;/strong&gt;&lt;br /&gt;
    → 사용자에게 명령을 받아 그 명령을 번역한 뒤 실행함. os에서는 shell이라고 함&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;c) job scheduler&lt;/strong&gt;&lt;br /&gt;
    → job queue 안의 여러 process 중 어떤 것을 main memory로 올려보낼지 결정함.&lt;br /&gt;
    long-term scheduler&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;d) multi-level queue scheduling&lt;/strong&gt;&lt;br /&gt;
    → 여러 개의 queue가 존재. 각각의 queue에 절대적인 우선순위가 존재하거나 CPU time을 차등배분하여 독립된 scheduling 정책을 시행함&lt;/p&gt;

&lt;h2 id=&quot;6&quot;&gt;6.&lt;/h2&gt;
&lt;p&gt;생산자-소비자 문제는 mutex, empty, full 등 세 가지 세마포를 사용하여 해결할 수 있다. 
mutex 는 상호배타 목적, empty 와 full 은 각각 버퍼의 빈 공간 및 차있는 공간에 대한 접근목적으로 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;a) 버퍼에서 데이터를 빼내어 소비하는 동작을 위 세마포를 포함한 코드로 작성하라.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;full.acquire();&lt;br /&gt;
mutex.acquire();&lt;br /&gt;
buf&lt;br /&gt;
count–;&lt;br /&gt;
mutex.release();&lt;br /&gt;
empty.release();&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;b) 생산자와 소비자는 프로세스, 각 세마포는 자원이라고 가정하자.&lt;/strong&gt; &lt;br /&gt;
&lt;strong&gt;생산자는 버퍼에 대한 접근 허용을 기다리고 있고, 소비자는 버퍼에서 데이터를 빼내어 소비하는 상황을 나타내는 자원할당도(resource allocation graph)를 그려라.&lt;/strong&gt; &lt;br /&gt;
&lt;strong&gt;단, 버퍼 크기는 10이고 그 중 8개가 차있다고 가정한다.&lt;/strong&gt;&lt;br /&gt;
    →&lt;/p&gt;

&lt;h2 id=&quot;7&quot;&gt;7.&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;a) 교착상태(deadlock)가 일어나기 위한 네 가지 필요조건 중 보유 및 대기(hold and wait) 란 무슨 의미인가?&lt;/strong&gt;&lt;br /&gt;
    → 한 가지 자원을 가지고 있으면서 또 다른 자원을 가지려고 대기하는 것&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;b) 식사하는 철학자 문제(dining philosopher problem)에서 보유 및 대기 조건이 만족되지 않게 하려면 어떻게 해야 하는가?&lt;/strong&gt;&lt;br /&gt;
    → 1. 젓가락 두 개를 동시에 집도록 함&lt;br /&gt;
    → 2. 한 젓가락을 집고, 다른 하나는 이미 사용 중이라면 가지고 있던 젓가락을 내려 놓음 &lt;br /&gt;
    (일부 자원만 이용가능하면 보유 자원을 모두 포기)&lt;/p&gt;

&lt;h2 id=&quot;cf&quot;&gt;cf.&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;a) 교착상태(deadlock)가 일어나기 위한 네 가지 필요조건 중 환형대기(circular wait) 란 무슨 의미인가?&lt;/strong&gt;&lt;br /&gt;
    → 자원할당도 상에 원이 만들어짐&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;b) 식사하는 철학자 문제(dining philosopher problem)에서 환형대기 조건이 만족되지 않게 하려면 어떻게 해야 하는가?&lt;/strong&gt;&lt;br /&gt;
    → 자원에 번호를 부여하고 오름(또는 내림) 차순으로 요청하기&lt;br /&gt;
    → 짝수번 철학자는 왼쪽에서 오른쪽 순서로, 홀수번 철학자는 오른쪽에서 왼쪽 순서로 젓가락 들기&lt;/p&gt;

&lt;h2 id=&quot;8&quot;&gt;8.&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;아래 문제에서 변수 n, i, s 는 각 프로세스의 지역변수이며, value 는 모든 프로세스가 공통적으로 사용하는 전역변수이다. 프로세스 P1 과 P2 의 코드는 각각 다음과 같다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;P1&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;P2&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;(a) 프로세스 동기화 문제에서 임계구역(critical section)이란 무엇을 의미하는가?&lt;/strong&gt;&lt;br /&gt;
→ 공통 변수(common variable)를 업데이트 하는 구간&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(b) 위 P2 프로세스의 코드 내용 중 임계구역에 해당되는 부분은 어디인가? 이유도 설명하라.&lt;/strong&gt;&lt;br /&gt;
→ value = value - s;&lt;br /&gt;
→ 이유: 임계구역은 공통변수를 업데이트하는 구간임.&lt;br /&gt;
value는 모든 프로세스가 공통 사용하는 공통변수&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(c) 세마포어(semaphore)를 사용하여 P1, P2  코드의 임계구역 문제를 해결하라. 세마포어의 초기 값도 나타내어라.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// mutual exclusion용 semaphore  &lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;P1&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;acquire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  
    &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Critical Section&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  
    &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;no&quot;&gt;P1&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;acquire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Critical Section&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;(d) 프로세스 스케쥴링 방식과 관계없이 항상 P1 이 P2 보다 전역변수 value 값을 먼저 업데이트 하도록 세마포어를 사용하여 위 P1, P2 의 코드를 수정하여라. 세마포어의 초기 값도 나타내어라.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// mutual exclusion용 semaphore&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sem2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ordering용 semaphore&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;P1&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;acquire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Critical Section&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;sem2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;P1&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;acquire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sem2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;acquire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Critical Section&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;9&quot;&gt;9.&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;프로세스(process)와 쓰레드(thread)의 유사점 및 차이점을 각각 설명하라.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;process → 메모리 공간이 따로 존재&lt;/li&gt;
  &lt;li&gt;thread → 동일한 메모리 공간을 공유&lt;/li&gt;
  &lt;li&gt;유사점 → context switching이 일어남&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;10&quot;&gt;10.&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;a) 프로세서(processor)의 이중모드(dual mode)란 무엇을 의미하는가?&lt;/strong&gt;&lt;br /&gt;
→ 한 컴퓨터를 여러 사람이 동시에 접속하거나, 한 사람이 여러 프로그램을 동시에 사용하는 환경에서 사용자 모드와 관리자 모드를 나누는 것. 관리자 모드에서만 특권명령과 하드웨어 접근이 가능함&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;b) 이중모드를 사용한 입출력장치(i/o devices) 보호 방법에 대해 설명하여라.&lt;/strong&gt;&lt;br /&gt;
→ I/O 명령을 관리자(시스템)모드로 만들어 사용자 모드에서 I/O명령 사용시 SW interrupt가 발생해 해당 process를 종료함&lt;/p&gt;

&lt;h2 id=&quot;11&quot;&gt;11.&lt;/h2&gt;
&lt;p&gt;프로세스의 상태는 new, ready, running, waiting, terminated 등 다섯 종류로 나눌 수 있다.&lt;br /&gt;
&lt;strong&gt;a) 프로세스 상태 변화를 보여주는 상태천이도(state transition diagram)를 그려라.&lt;/strong&gt;&lt;br /&gt;
→&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;b) ready 와 waiting 상태는 어떻게 다른지 구분하여 설명하라.&lt;/strong&gt;&lt;br /&gt;
→ ready: CPU 서비스를 받기 위해 기다리는 것&lt;br /&gt;
→ waiting: I/O 서비스를 받기 위해 기다리는 것&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>ohoraming</name>
        
        
      </author>

      

      
        <category term="OS" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">OS(8) - Monitor</title>
      <link href="https://ohoraming.github.io/OS-monitor" rel="alternate" type="text/html" title="OS(8) - Monitor" />
      <published>2022-02-07T22:58:00+09:00</published>
      <updated>2022-02-07T22:58:00+09:00</updated>
      <id>https://ohoraming.github.io/OS-monitor</id>
      <content type="html" xml:base="https://ohoraming.github.io/OS-monitor">&lt;!-- 글 작성하기 --&gt;

&lt;!-- 글이 시작될 때 관련 시리즈를 리스트로 보여줌 --&gt;
&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;OS 관련 포스팅&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-intro&quot;&gt;OS(1) - Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-interrupt-based-system&quot;&gt;OS(2) - Interrupt-Based System&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-process-mgmt&quot;&gt;OS(3) - Process Management&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-cpu-scheduling&quot;&gt;OS(4) - CPU Scheduling&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-thread&quot;&gt;OS(5) - Thread&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-classical-sync-problems&quot;&gt;OS(6) - Classical Synchronization Problems&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-deadlock&quot;&gt;OS(7) - Deadlock&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-monitor&quot;&gt;OS(8) - Monitor&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-midterm&quot;&gt;OS(9) - Midterm&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-main-memory-mgmt&quot;&gt;OS(10) - Main Memory Management&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-contiguous-memory-allocation&quot;&gt;OS(11) - Contiguous Memory Allocation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;monitor&quot;&gt;Monitor&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;semaphore 이후 process synchronization tool&lt;/li&gt;
  &lt;li&gt;semaphore(assembly 수준) 보다 고수준(high level language 수준) 개념&lt;/li&gt;
  &lt;li&gt;구조&lt;br /&gt;
  → &lt;strong&gt;공유자원&lt;/strong&gt;(common variable) + &lt;strong&gt;공유자원 접근함수&lt;/strong&gt;&lt;br /&gt;
  → 2개의 queues: &lt;strong&gt;배타동기&lt;/strong&gt; + &lt;strong&gt;조건동기&lt;/strong&gt;&lt;br /&gt;
  → 공유자원 접근함수에는 최대 1개의 thread만 진입(배타동기) &lt;br /&gt;
      : mutual exclusion&lt;br /&gt;
  → common variable에 접근한 method를 실행하고 있다면 다른 thread는 queue에 대기&lt;br /&gt;
  → 진입 thread가 조건동기(wait())로 block되면 새 thread 진입가능&lt;br /&gt;
      : conditional synchronization&lt;br /&gt;
      : wait()을 부르면 실행중인 thread가 queue에 갇힘(= 새 thread 진입가능)&lt;br /&gt;
  → 새 thread는 조건동기(notify())로 block된 thread를 깨울 수 있음&lt;br /&gt;
  → 깨운 thread는 현재의 thread가 나가면 진입할 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;java-monitor&quot;&gt;Java Monitor&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Java의 모든 객체는 monitor가 될 수 있음&lt;br /&gt;
  → 배타동기: &lt;strong&gt;synchronized&lt;/strong&gt; 키워드 사용&lt;br /&gt;
  → 조건동기: &lt;strong&gt;wait(), notify(), notifyAll()&lt;/strong&gt; method사용&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;일반적-사용1-mutual-exclusion&quot;&gt;일반적 사용(1): Mutual exclusion&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;synchronized {&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Critical-Section&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;}&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;→ &lt;strong&gt;synchronized&lt;/strong&gt; 키워드만 사용하면 됨: 간단&lt;br /&gt;
→ monitor는 초깃값 설정 없음&lt;br /&gt;
→ semaphore는 semaphore import, 초깃값(= 1) 설정,&lt;br /&gt;
    C.S. 앞뒤로 acquire(), release() 선언: 복잡&lt;/p&gt;

&lt;h3 id=&quot;일반적-사용2-ordering&quot;&gt;일반적 사용(2): Ordering&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;p1&lt;/td&gt;
      &lt;td&gt;p2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;wait();&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;S1;&lt;/td&gt;
      &lt;td&gt;S2;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;notify();&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content>

      
      
      
      
      

      <author>
          <name>ohoraming</name>
        
        
      </author>

      

      
        <category term="OS" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">OS(7) - Deadlock</title>
      <link href="https://ohoraming.github.io/OS-deadlock" rel="alternate" type="text/html" title="OS(7) - Deadlock" />
      <published>2022-02-04T23:03:00+09:00</published>
      <updated>2022-02-04T23:03:00+09:00</updated>
      <id>https://ohoraming.github.io/OS-deadlock</id>
      <content type="html" xml:base="https://ohoraming.github.io/OS-deadlock">&lt;!-- 글 작성하기 --&gt;

&lt;!-- 글이 시작될 때 관련 시리즈를 리스트로 보여줌 --&gt;
&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;OS 관련 포스팅&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-intro&quot;&gt;OS(1) - Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-interrupt-based-system&quot;&gt;OS(2) - Interrupt-Based System&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-process-mgmt&quot;&gt;OS(3) - Process Management&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-cpu-scheduling&quot;&gt;OS(4) - CPU Scheduling&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-thread&quot;&gt;OS(5) - Thread&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-classical-sync-problems&quot;&gt;OS(6) - Classical Synchronization Problems&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-deadlock&quot;&gt;OS(7) - Deadlock&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-monitor&quot;&gt;OS(8) - Monitor&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-midterm&quot;&gt;OS(9) - Midterm&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-main-memory-mgmt&quot;&gt;OS(10) - Main Memory Management&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-contiguous-memory-allocation&quot;&gt;OS(11) - Contiguous Memory Allocation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;deadlock&quot;&gt;Deadlock&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;OS는 자원(Resources)을 Application에 잘 나누어주는 역할을 함&lt;/li&gt;
  &lt;li&gt;자원: CPU, memory, file, printer…&lt;/li&gt;
  &lt;li&gt;자원을 잘 못 나누어주면 deadlock에 빠지게 됨&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Necessary Conditions For Deadlock&lt;/strong&gt; &lt;br /&gt;
  → 아래의 네 조건이 &lt;strong&gt;모두 만족&lt;/strong&gt;되어야 deadlock 발생 가능성이 있음
    &lt;ol&gt;
      &lt;li&gt;Mutual exclution(상호배타)&lt;/li&gt;
      &lt;li&gt;Hold and wait(보유 및 점유)&lt;/li&gt;
      &lt;li&gt;No preemption(비선점)&lt;/li&gt;
      &lt;li&gt;Circular wait(환형대기)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;동일 형식(type)의 자원이 여러 개 있을 수 있음 → &lt;strong&gt;instance&lt;/strong&gt;&lt;br /&gt;
  e.g.) 동일 CPU 2개, 동일 printer 3개 등&lt;/li&gt;
  &lt;li&gt;자원의 사용&lt;br /&gt;
  [요청 → 사용 → 반납]&lt;br /&gt;
  자원을 필요로하는 application이 OS에 해당 자원을 &lt;strong&gt;요청&lt;/strong&gt;하면,&lt;br /&gt;
  OS가 올바른 요청인지 확인 후 허용&lt;br /&gt;
  application은 자원을 &lt;strong&gt;사용&lt;/strong&gt; 후 OS에 &lt;strong&gt;반납&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;자원 할당도(Resource Allocation Graph)&lt;/strong&gt;&lt;br /&gt;
  → 자원은 &lt;strong&gt;사각형&lt;/strong&gt;, 인스턴스는 사각형 안의 &lt;strong&gt;점&lt;/strong&gt;, 프로세스는 &lt;strong&gt;원&lt;/strong&gt;,&lt;br /&gt;
  할당은 &lt;strong&gt;화살표&lt;/strong&gt;로 표현&lt;br /&gt;
  자원(R) → 프로세스(P): assign(할당) &lt;br /&gt;
  프로세스(P) → 자원(R): request(요청)&lt;/li&gt;
  &lt;li&gt;자원 할당도 상에 원이 만들어지면 환형 대기 상태가 됨&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;deadlock-처리&quot;&gt;Deadlock 처리&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Deadlock Prevention(교착상태 방지)&lt;/li&gt;
  &lt;li&gt;Deadlock Avoidance(교착상태 회피)&lt;/li&gt;
  &lt;li&gt;Deadlock Detection &amp;amp; Recovery(교착상태 검출 및 복구)&lt;/li&gt;
  &lt;li&gt;Don’t Care(교착상태 무시)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;1-교착상태-방지&quot;&gt;(1) 교착상태 방지&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;교착상태 필요조건 4가지 중 한 가지 이상 불만족&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Mutual exclution(상호배타)&lt;/strong&gt; 깨려면,&lt;br /&gt;
  → 자원을 공유&lt;br /&gt;
  → CPU의 경우 시간을 두고 switching은 가능하지만 동시에 사용 불가&lt;br /&gt;
  → 원천적으로 불가한 조건&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Hold and wait(보유 및 점유)&lt;/strong&gt; 깨려면,&lt;br /&gt;
  → 일부의 자원만 가지고 있을 경우, 다른 자원을 기다려야한다면 보유한 자원을 모두 포기&lt;br /&gt;
  → 단점: 자원 활용율 저하, starvation(process가 진행을 못 함)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;No preemption(비선점)&lt;/strong&gt; 깨려면,&lt;br /&gt;
  → 자원을 강제로 빼앗음&lt;br /&gt;
  → CPU는 context switching해서 사용이 가능하나, printer는 불가능함&lt;br /&gt;
  → 원천적으로 불가한 조건&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Circular wait(환형대기)&lt;/strong&gt; 깨려면,&lt;br /&gt;
  → e.g.) 자원에 번호를 부여해 순서대로 자원을 요청&lt;br /&gt;
  → 단점: 자원 활용율 저하&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-교착상태-회피&quot;&gt;(2) 교착상태 회피&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;deadlock을 자원 요청에 대한 잘못된 승인으로 해석&lt;/li&gt;
  &lt;li&gt;대출 전문 은행(Banker’s Algorithm)의 파산과 같다고 생각해 더이상 거래가 불가능한 상태로 인식&lt;/li&gt;
  &lt;li&gt;OS는 자원을 할당할 때 불안전한 할당(Unsafe allocation)이 되지 않도록 해야 함&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-교착상태-검출-및-복구&quot;&gt;(3) 교착상태 검출 및 복구&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;hold and wait 되더라도 말리지 않고 원하는 대로 자원을 나눠주다보면 deadlock 발생할 수 있음&lt;/li&gt;
  &lt;li&gt;deadlock 발생을 허용하며 주기적으로 검사함&lt;/li&gt;
  &lt;li&gt;검사(detection)시 overhead 발생&lt;br /&gt;
  → CPU 계산, memory&lt;br /&gt;
  → 너무 자주하면 deadlock 발견은 빠르지만 overhead 발생 가능성 증가&lt;/li&gt;
  &lt;li&gt;복구(recovery)&lt;br /&gt;
  → process 일부 강제 종료&lt;br /&gt;
  → 자원 선점해 일부 process에 할당&lt;br /&gt;
  → deadlock 발생 전으로 되돌리려면 주기적으로 현상태를 기억해야 하기에 memory필요&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;4-교착상태-무시&quot;&gt;(4) 교착상태 무시&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;deadlock은 실제로 잘 일어나지 않음&lt;/li&gt;
  &lt;li&gt;4개의 필요조건을 모두 만족하더라도 반드시 일어나는 것 아님&lt;/li&gt;
  &lt;li&gt;개인 PC의 경우 deadlock발생시 재부팅하면 해결됨&lt;/li&gt;
  &lt;li&gt;그래서 다른 방법을 시도하는 것 보다는 재부팅이 효율적일 수 있음&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>ohoraming</name>
        
        
      </author>

      

      
        <category term="OS" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">OS(6) - Classical Synchronization Problems</title>
      <link href="https://ohoraming.github.io/OS-classical-sync-problems" rel="alternate" type="text/html" title="OS(6) - Classical Synchronization Problems" />
      <published>2022-02-02T21:58:00+09:00</published>
      <updated>2022-02-02T21:58:00+09:00</updated>
      <id>https://ohoraming.github.io/OS-classical-sync-problems</id>
      <content type="html" xml:base="https://ohoraming.github.io/OS-classical-sync-problems">&lt;!-- 글 작성하기 --&gt;

&lt;!-- 글이 시작될 때 관련 시리즈를 리스트로 보여줌 --&gt;
&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;OS 관련 포스팅&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-intro&quot;&gt;OS(1) - Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-interrupt-based-system&quot;&gt;OS(2) - Interrupt-Based System&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-process-mgmt&quot;&gt;OS(3) - Process Management&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-cpu-scheduling&quot;&gt;OS(4) - CPU Scheduling&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-thread&quot;&gt;OS(5) - Thread&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-classical-sync-problems&quot;&gt;OS(6) - Classical Synchronization Problems&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-deadlock&quot;&gt;OS(7) - Deadlock&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-monitor&quot;&gt;OS(8) - Monitor&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-midterm&quot;&gt;OS(9) - Midterm&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-main-memory-mgmt&quot;&gt;OS(10) - Main Memory Management&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-contiguous-memory-allocation&quot;&gt;OS(11) - Contiguous Memory Allocation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;producer-consumer-problem&quot;&gt;Producer-Consumer Problem&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;producer(생산자)가 data를 생산하면 consumer(소비자)가 소비&lt;/li&gt;
  &lt;li&gt;e.g.) compiler(= producer)와 assembler(= consumer)의 경우,&lt;br /&gt;
  compiler가 high level language를 low level language(assembly어)로 번역하면,  assembler가 번역된 assembly어를 기계어로 번역&lt;/li&gt;
  &lt;li&gt;e.g.) 파일 서버(= producer)와 클라이언트(= consumer)의 경우,&lt;br /&gt;
  web browser가 요청을 보내면, server가 file안의 data를 처리해 응답하고, web brower가 web page형태로 보여줌&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Bounded Buffer(유한 버퍼)&lt;/strong&gt;&lt;br /&gt;
  → 생산한 데이터는 버퍼에 우선 저장함&lt;br /&gt;
  → buffer의 사이즈는 유한함&lt;br /&gt;
  → producer는 buffer가 가득 차면 더이상 데이터를 넣을 수 없으며,&lt;br /&gt;
  → consumer는 buffer가 비면 더이상 데이터를 뺄 수 없음&lt;/li&gt;
  &lt;li&gt;같은 수의 생산(insert)과 소비(remove)가 이루어졌다면, 결괏값은 0이 나와야 함&lt;/li&gt;
  &lt;li&gt;common variable인 count와 buf[]를 업데이트하는 C.S.(critical-section)에 동시 진입이 이루어져 최종 결괏값으로 0이 나오지 않음&lt;/li&gt;
  &lt;li&gt;solution&lt;br /&gt;
  → &lt;strong&gt;mutual exclusion&lt;/strong&gt;&lt;br /&gt;
  → semaphore를 이용해 동시접근 방지&lt;br /&gt;
  → number of permit = 1&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Busy-wait&lt;/strong&gt;&lt;br /&gt;
  → producer: buffer가 가득차면 기다려야하며,&lt;br /&gt;
  → consumer: buffer가 비면 기다려야 함&lt;br /&gt;
  → OS의 ‘효율성 증가’의 목적에 위배됨&lt;br /&gt;
  → semaphore를 사용해 busy-wait회피&lt;br /&gt;
  → 무한 loop(while문)를 돌며 기다리지않고 semaphore에 가둠&lt;br /&gt;
  → CPU 서비스를 받지 않고 block됨&lt;br /&gt;
  → 빈공간이 생기면 producer를 깨우고, 데이터가 들어오면 consumer를 깨움&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;readers-writers-problem&quot;&gt;Readers-Writers Problem&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Reader: C.S.을 편집하지 않고 읽기만 함&lt;/li&gt;
  &lt;li&gt;Writer: C.S.를 읽고 편집함&lt;/li&gt;
  &lt;li&gt;Reader에 mutual exclusion을 적용하면 비효율적임&lt;/li&gt;
  &lt;li&gt;Reader가 들어왔는데 다른 Writer가 들어오려하면 block&lt;/li&gt;
  &lt;li&gt;Writer가 들어와 있으면 Reader는 block&lt;/li&gt;
  &lt;li&gt;Reader가 들어와 있는데 다른 Reader가 들어온다면 허용(효율성 제고)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;dining-philosopher-problem&quot;&gt;Dining Philosopher Problem&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;5명의 철학자와 5개의 젓가락이 서로 엇갈려 한 테이블에 존재&lt;/li&gt;
  &lt;li&gt;‘생각 → 식사’의 반복&lt;/li&gt;
  &lt;li&gt;왼쪽 젓가락을 든 뒤, 오른쪽 젓가락을 듬&lt;/li&gt;
  &lt;li&gt;number of permit = 1 : 두 철학자 중 한 명만 젓가락 드는 것이 허용됨&lt;/li&gt;
  &lt;li&gt;결과: starvation: 모든 철학자들이 굶어 죽는 상황 발생&lt;/li&gt;
  &lt;li&gt;모두가 동시에 젓가락을 드는 상황이 있으면 deadlock에 빠짐&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>ohoraming</name>
        
        
      </author>

      

      
        <category term="OS" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">OS(5) - Thread</title>
      <link href="https://ohoraming.github.io/OS-thread" rel="alternate" type="text/html" title="OS(5) - Thread" />
      <published>2022-01-31T22:59:00+09:00</published>
      <updated>2022-01-31T22:59:00+09:00</updated>
      <id>https://ohoraming.github.io/OS-thread</id>
      <content type="html" xml:base="https://ohoraming.github.io/OS-thread">&lt;!-- 글 작성하기 --&gt;

&lt;!-- 글이 시작될 때 관련 시리즈를 리스트로 보여줌 --&gt;
&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;OS 관련 포스팅&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-intro&quot;&gt;OS(1) - Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-interrupt-based-system&quot;&gt;OS(2) - Interrupt-Based System&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-process-mgmt&quot;&gt;OS(3) - Process Management&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-cpu-scheduling&quot;&gt;OS(4) - CPU Scheduling&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-thread&quot;&gt;OS(5) - Thread&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-classical-sync-problems&quot;&gt;OS(6) - Classical Synchronization Problems&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-deadlock&quot;&gt;OS(7) - Deadlock&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-monitor&quot;&gt;OS(8) - Monitor&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-midterm&quot;&gt;OS(9) - Midterm&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-main-memory-mgmt&quot;&gt;OS(10) - Main Memory Management&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-contiguous-memory-allocation&quot;&gt;OS(11) - Contiguous Memory Allocation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;thread&quot;&gt;Thread&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;하나의 프로그램은 하나의 흐름/맥이 있음(single thread)&lt;/li&gt;
  &lt;li&gt;여러 흐름/맥이 있다면(multi threads)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;multithreads&quot;&gt;Multithreads&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;한 프로그램에 둘 이상의 흐름/맥이 있는 경우&lt;/li&gt;
  &lt;li&gt;짧은 시간 간격으로 흐름이 switching됨&lt;br /&gt;
  → 여러 흐름/맥이 동시에 실행되는 것 같음(concurrent)&lt;br /&gt;
  cf.) simultaneous - 실제로 동시에 여러 thread가 실행됨(불가능)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;thread-vs-process&quot;&gt;Thread vs. Process&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;하나의 process에는 하나 이상의 thread가 존재(multi-thread program)&lt;/li&gt;
  &lt;li&gt;하나의 program은 code, data, stack으로 구성됨&lt;/li&gt;
  &lt;li&gt;thread는 process의 메모리 공간(code, data) 및 자원(file, I/O)을 공유&lt;/li&gt;
  &lt;li&gt;개별적인 program counter(PC), stack pointer(SP), registers, stack은 비공유&lt;/li&gt;
  &lt;li&gt;thread가 switching 될 때마다 PC, SP, registers값 모두 변화되므로 공유하지 않음&lt;/li&gt;
  &lt;li&gt;함수 호출시, stack에 return address, parameter 등을 저장함&lt;/li&gt;
  &lt;li&gt;현대의 context switching 단위는 process가 아닌 thread!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;javalangthread&quot;&gt;java.lang.Thread&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;JAVA의 thread는 java.lang package 안에 있음&lt;/li&gt;
  &lt;li&gt;Thread.&lt;strong&gt;run()&lt;/strong&gt; : thread가 시작되면 run() 메서드가 실행됨&lt;/li&gt;
  &lt;li&gt;run() 메서드를 override
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyThread&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;c1&quot;&gt;// code&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;process-synchronization프로세스-동기화&quot;&gt;Process Synchronization(프로세스 동기화)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;엄밀히 말하면 현대 OS는 context switching의 단위가 thread이므로 &lt;strong&gt;‘thread synchronization’&lt;/strong&gt;이 맞음&lt;/li&gt;
  &lt;li&gt;일반적으로, main memory에 올라간 process간에는 어떤 식으로든 &lt;strong&gt;영향&lt;/strong&gt;을 주고 받음(cooperating process)&lt;/li&gt;
  &lt;li&gt;하나의 데이터베이스와 같은 &lt;strong&gt;공통된 자원(common resources)&lt;/strong&gt;에 서로 접근하려 하기때문에 영향을 주고 받게 됨&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bank-account-problem&quot;&gt;Bank Account Problem&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;parent는 deposit(입금), child는 withdraw(출금)을 진행&lt;/li&gt;
  &lt;li&gt;common variable인 balance(잔액)에 대해 동시 update가 발생함&lt;/li&gt;
  &lt;li&gt;코드를 읽어가다가 context switching이 일어날 경우, balance에 오류가 생김&lt;/li&gt;
  &lt;li&gt;high level language는 기계어(assembly어)로 변환되는 과정을 거침&lt;/li&gt;
  &lt;li&gt;한 줄의 코드가 여러 줄의 기계어로 번역될 때 context switching 일어나면 잘못된 결과가 발생&lt;/li&gt;
  &lt;li&gt;common variable update 진행 중에는 context switching 일어나면 안 됨&lt;br /&gt;
  → common variable에 대해 한번에 하나의 thread만 update&lt;br /&gt;
  → Critical-Section Problem (임계 구역 문제)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;critical-section-problem&quot;&gt;Critical-Section Problem&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Critical-Section (C.S.)&lt;/strong&gt;&lt;br /&gt;
  → multiple thread로 구성된 system&lt;br /&gt;
  → common variable changing이 일어날 수 있는 구간&lt;/li&gt;
  &lt;li&gt;해결&lt;br /&gt;
  → &lt;strong&gt;Mutual exclusion&lt;/strong&gt; (상호 배타): 하나의 thread만 진입&lt;br /&gt;
  → Progress (진행): 유한 시간 내에 C.S.에 누가 먼저 진입할 지 결정&lt;br /&gt;
  → Bounded waiting (유한 대기): 유한 시간 내에 C.S.에 진입할 기회가 생김&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;synchronization-tools&quot;&gt;Synchronization Tools&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Semaphores (세마포): 가장 전통적인 동기화 도구&lt;/li&gt;
  &lt;li&gt;Monitor (모니터): java에서 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;semaphore&quot;&gt;Semaphore&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;네덜란드의 Edsger Kijkstra가 제안&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;정수형 변수&lt;/strong&gt;와 &lt;strong&gt;두 개의 동작&lt;/strong&gt;(&lt;strong&gt;P, V&lt;/strong&gt;)으로 구성&lt;/li&gt;
  &lt;li&gt;네덜란드어(&lt;strong&gt;P&lt;/strong&gt;roberen, &lt;strong&gt;V&lt;/strong&gt;erhogen)를 영어로 변환&lt;/li&gt;
  &lt;li&gt;P: &lt;strong&gt;acquire()&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;V: &lt;strong&gt;release()&lt;/strong&gt;
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Semaphore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Semaphore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// code&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;acquire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;wakeup&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;정수형 변수: number of permits&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;acquire()&lt;/strong&gt;&lt;br /&gt;
  → 정수값이 1감소&lt;br /&gt;
  → 감소된 정수값이 0보다 작으면 호출한 process/thread를 queue안에 넣음&lt;br /&gt;
      (block상태(= ready queue에 못 감))&lt;br /&gt;
  → interrupted exception발생(try~catch)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;release()&lt;/strong&gt;&lt;br /&gt;
  → 정수값이 1증가&lt;br /&gt;
  → 증가된 정수값이 0보다 작거나 같으면(= queue에 block된 thread 존재) 호출한 process/thread를 queue에서 꺼냄(wake up)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;일반적-사용1-mutual-exclusion&quot;&gt;일반적 사용(1): Mutual exclusion&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;number of permits = 1&lt;br /&gt;
  → C.S.에 하나의 process/thread만 들임&lt;/p&gt;

    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;acquire();&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Critical-Section&lt;/strong&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;release();&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;일반적-사용2-ordering&quot;&gt;일반적 사용(2): Ordering&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;number of permits = 1&lt;/p&gt;

    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;p1&lt;/td&gt;
          &lt;td&gt;p2&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt; &lt;/td&gt;
          &lt;td&gt;acquire();&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;S1;&lt;/td&gt;
          &lt;td&gt;S2;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;release();&lt;/td&gt;
          &lt;td&gt; &lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>ohoraming</name>
        
        
      </author>

      

      
        <category term="OS" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
</feed>
