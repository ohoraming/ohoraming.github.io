<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="https://ohoraming.github.io/author/ohoraming/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://ohoraming.github.io/" rel="alternate" type="text/html" />
  <updated>2022-04-15T23:49:27+09:00</updated>
  <id>https://ohoraming.github.io/author/ohoraming/feed.xml</id>

  
  
  

  
    <title type="html">예비 개발자의 노트 | </title>
  

  
    <subtitle>배움을 기록합니다</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">JavaScript(12) - Prototype과 Class 피하기</title>
      <link href="https://ohoraming.github.io/JavaScript-avoid-both-prototypes-and-classes" rel="alternate" type="text/html" title="JavaScript(12) - Prototype과 Class 피하기" />
      <published>2022-04-15T22:19:00+09:00</published>
      <updated>2022-04-15T22:19:00+09:00</updated>
      <id>https://ohoraming.github.io/JavaScript-avoid-both-prototypes-and-classes</id>
      <content type="html" xml:base="https://ohoraming.github.io/JavaScript-avoid-both-prototypes-and-classes">&lt;!-- 글 작성하기 --&gt;

&lt;!-- 글이 시작될 때 관련 시리즈를 리스트로 보여줌 --&gt;
&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;JavaScript 관련 포스팅&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./JavaScript-asyncDefer&quot;&gt;JavaScript(1) - async vs. defer&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./JavaScript-variable&quot;&gt;JavaScript(2) - variable&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./JavaScript-operator&quot;&gt;JavaScript(3) - operator&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./JavaScript-function&quot;&gt;JavaScript(4) - function&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./JavaScript-classObject&quot;&gt;JavaScript(5) - class vs. object&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./JavaScript-object&quot;&gt;JavaScript(6) - object&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./JavaScript-array&quot;&gt;JavaScript(7) - array&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./JavaScript-json&quot;&gt;JavaScript(8) - JSON&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./JavaScript-callback&quot;&gt;JavaScript(9) - callback&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./JavaScript-promise&quot;&gt;JavaScript(10) - promise&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./JavaScript-regular-expressions&quot;&gt;JavaScript(11) - Regular expressions&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./JavaScript-avoid-both-prototypes-and-classes&quot;&gt;JavaScript(12) - Prototype과 Class 피하기&lt;/a&gt;&lt;/li&gt;
    &lt;br /&gt;
    &lt;br /&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;이후에 다른 코드도 다시 보기&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;prototype과-class를-피하는-코드&quot;&gt;prototype과 class를 피하는 코드&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this&lt;/code&gt;의 사용을 피할 수 있음
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;secretFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;secret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Favor composition over inheritance, `new` is considered harmful, and the end is near!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;spillTheBeans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;secret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;spillTheBeans&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;leaker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;secretFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;leaker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;spillTheBeans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;blockquote&gt;
      &lt;h6 id=&quot;console&quot;&gt;Console&lt;/h6&gt;
      &lt;h6 id=&quot;favor-composition-over-inheritance-new-is-considered-harmful-and-the-end-is-near&quot;&gt;Favor composition over inheritance, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new&lt;/code&gt; is considered harmful, and the end is near!&lt;/h6&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;spillTheBeans를 object로 return하는 함수(secretFactory)를 만들게 되면, 함수의 내용에 직접적인 접근을 막을 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;another-example&quot;&gt;another example&lt;/h2&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;spyFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;infiltrationTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;exfiltrate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;infiltrationTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;spillTheBeans&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blackHat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;spyFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;leaker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;blackHat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exfiltrate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Favor composition over inheritance, (...)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;blackHat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;infiltrationTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// undefined (looks like we got away with it)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;h6 id=&quot;console-1&quot;&gt;Console&lt;/h6&gt;
  &lt;h6 id=&quot;favor-composition-over-inheritance-new-is-considered-harmful-and-the-end-is-near-1&quot;&gt;Favor composition over inheritance, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new&lt;/code&gt; is considered harmful, and the end is near!&lt;/h6&gt;
  &lt;h6 id=&quot;undefined&quot;&gt;undefined&lt;/h6&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Justen Robertson, “As a JS Developer, This Is What Keeps Me Up at Night”, Toptal, 2019, &lt;a href=&quot;https://www.toptal.com/javascript/es6-class-chaos-keeps-js-developer-up&quot;&gt;https://www.toptal.com/javascript/es6-class-chaos-keeps-js-developer-up&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;</content>

      
      
      
      
      

      <author>
          <name>ohoraming</name>
        
        
      </author>

      

      
        <category term="JavaScript" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">JavaScript(11) - Regular expressions</title>
      <link href="https://ohoraming.github.io/JavaScript-regular-expressions-copy" rel="alternate" type="text/html" title="JavaScript(11) - Regular expressions" />
      <published>2022-04-05T19:26:00+09:00</published>
      <updated>2022-04-05T19:26:00+09:00</updated>
      <id>https://ohoraming.github.io/JavaScript-regular-expressions%20copy</id>
      <content type="html" xml:base="https://ohoraming.github.io/JavaScript-regular-expressions-copy">&lt;!-- 글 작성하기 --&gt;

&lt;!-- 글이 시작될 때 관련 시리즈를 리스트로 보여줌 --&gt;
&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;JavaScript 관련 포스팅&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./JavaScript-asyncDefer&quot;&gt;JavaScript(1) - async vs. defer&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./JavaScript-variable&quot;&gt;JavaScript(2) - variable&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./JavaScript-operator&quot;&gt;JavaScript(3) - operator&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./JavaScript-function&quot;&gt;JavaScript(4) - function&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./JavaScript-classObject&quot;&gt;JavaScript(5) - class vs. object&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./JavaScript-object&quot;&gt;JavaScript(6) - object&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./JavaScript-array&quot;&gt;JavaScript(7) - array&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./JavaScript-json&quot;&gt;JavaScript(8) - JSON&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./JavaScript-callback&quot;&gt;JavaScript(9) - callback&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./JavaScript-promise&quot;&gt;JavaScript(10) - promise&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./JavaScript-regular-expressions&quot;&gt;JavaScript(11) - Regular expressions&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./JavaScript-avoid-both-prototypes-and-classes&quot;&gt;JavaScript(12) - Prototype과 Class 피하기&lt;/a&gt;&lt;/li&gt;
    &lt;br /&gt;
    &lt;br /&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;regular-expression-regex&quot;&gt;Regular expression (regex)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;1950, 수학자 Stephen Cole Kleene에 의해 개발됨&lt;/li&gt;
  &lt;li&gt;slash(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt;) 안에 찾고자하는 패턴을 작성 후 flag로 옵션을 지정함&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-groups-or-ranges&quot;&gt;1. Groups or ranges&lt;/h2&gt;
&lt;h3 id=&quot;1--or&quot;&gt;(1) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;|&lt;/code&gt; (or)&lt;/h3&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/Hi|Hello/gm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;→ Hi &lt;strong&gt;또는&lt;/strong&gt; Hello 매칭&lt;/p&gt;

&lt;h3 id=&quot;2--group&quot;&gt;(2) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;()&lt;/code&gt; (group)&lt;/h3&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/(Hi|Hello)|(And)/gm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;→ &lt;strong&gt;group #1&lt;/strong&gt;: Hi 또는 Hello 매칭&lt;br /&gt;
→ &lt;strong&gt;group #2&lt;/strong&gt;: And 매칭&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/gr(e|a)y/gm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;→ gr로 시작, e 또는 a, y로 끝나는 단어 매칭&lt;/p&gt;

&lt;h3 id=&quot;3--group-미지정&quot;&gt;(3) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(?:)&lt;/code&gt; (group 미지정)&lt;/h3&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/gr(?:e|a)y/gm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;→ group을 지정하고 싶지 않다면 &lt;strong&gt;( )&lt;/strong&gt; 시작에 &lt;strong&gt;?:&lt;/strong&gt; 추가&lt;/p&gt;

&lt;h3 id=&quot;4--안의-문자-찾기&quot;&gt;(4) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[]&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[]&lt;/code&gt;안의 문자 찾기)&lt;/h3&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/gr[ead]y/gm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;→ [] 안의 문자 중 하나라도 만족하는 단어 매칭&lt;br /&gt;
    gr&lt;strong&gt;a&lt;/strong&gt;y, gr&lt;strong&gt;e&lt;/strong&gt;y, gr&lt;strong&gt;d&lt;/strong&gt;y&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/[a-f]/gm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;→ a부터 f까지의 문자를 매칭&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/[a-zA-Z0-9]/gm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;→ 소문자 &lt;strong&gt;a부터 z&lt;/strong&gt;까지, 대문자 &lt;strong&gt;A부터 Z&lt;/strong&gt;까지, 숫자 &lt;strong&gt;0부터 9&lt;/strong&gt;까지의 문자를 매칭&lt;/p&gt;

&lt;h3 id=&quot;5--안의-문자를-제외한-나머지-찾기&quot;&gt;(5) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[^]&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[]&lt;/code&gt;안의 문자를 제외한 나머지 찾기)&lt;/h3&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/[^a-zA-Z0-9]/gm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;→ 소문자 &lt;strong&gt;a부터 z&lt;/strong&gt;까지, 대문자 &lt;strong&gt;A부터 Z&lt;/strong&gt;까지, 숫자 &lt;strong&gt;0부터 9&lt;/strong&gt;까지의 문자를 &lt;strong&gt;제외&lt;/strong&gt;한 나머지를 매칭&lt;/p&gt;

&lt;h2 id=&quot;2-quantifiers&quot;&gt;2. Quantifiers&lt;/h2&gt;
&lt;h3 id=&quot;1--앞의-문자가-하나있거나-없거나&quot;&gt;(1) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt;앞의 문자가 하나있거나 없거나)&lt;/h3&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/gra?y/gm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;→ &lt;strong&gt;a&lt;/strong&gt;가 하나있거나 없는 문자 매칭
gr&lt;strong&gt;a&lt;/strong&gt;y, gry&lt;/p&gt;

&lt;h3 id=&quot;2--앞의-문자가-하나-이상-있거나-없거나&quot;&gt;(2) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt;앞의 문자가 하나 이상 있거나 없거나)&lt;/h3&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/gra*y/gm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;→ &lt;strong&gt;a&lt;/strong&gt;가 있거나 없거나 많은 문자 매칭
gr&lt;strong&gt;a&lt;/strong&gt;y, gry, gr&lt;strong&gt;aa&lt;/strong&gt;y, gr&lt;strong&gt;aaa&lt;/strong&gt;y&lt;/p&gt;

&lt;h3 id=&quot;3--앞의-문자가-하나-이상&quot;&gt;(3) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+&lt;/code&gt;앞의 문자가 하나 이상)&lt;/h3&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/gra+y/gm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;→ &lt;strong&gt;a&lt;/strong&gt;가 하나 이상 있는 문자 매칭
gr&lt;strong&gt;a&lt;/strong&gt;y, gr&lt;strong&gt;aa&lt;/strong&gt;y, gr&lt;strong&gt;aaa&lt;/strong&gt;y&lt;/p&gt;

&lt;h3 id=&quot;4-n-n앞의-문자-n번-반복&quot;&gt;(4) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{n}&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{n}&lt;/code&gt;앞의 문자 n번 반복)&lt;/h3&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/gra{2}y/gm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;→ &lt;strong&gt;a&lt;/strong&gt;가 두 번 반복되는 문자 매칭
gr&lt;strong&gt;aa&lt;/strong&gt;y&lt;/p&gt;

&lt;h3 id=&quot;5-min-min앞의-문자-최소-n번-반복&quot;&gt;(5) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{min,}&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{min,}&lt;/code&gt;앞의 문자 최소 n번 반복)&lt;/h3&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/gra{2,}y/gm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;→ &lt;strong&gt;a&lt;/strong&gt;가 최소 두 번 반복되는 문자 매칭
gr&lt;strong&gt;aa&lt;/strong&gt;y, gr&lt;strong&gt;aaa&lt;/strong&gt;y&lt;/p&gt;

&lt;h3 id=&quot;6-minmax-minmax앞의-문자가-최소-min번-최대-max번-반복&quot;&gt;(6) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{min,max}&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{min,max}&lt;/code&gt;앞의 문자가 최소 min번, 최대 max번 반복)&lt;/h3&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/gra{2,3}y/gm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;→ &lt;strong&gt;a&lt;/strong&gt;가 &lt;strong&gt;최소 두 번, 최대 세 번 반복&lt;/strong&gt;되는 문자 매칭&lt;br /&gt;
gr&lt;strong&gt;aa&lt;/strong&gt;y, gr&lt;strong&gt;aaa&lt;/strong&gt;y&lt;/p&gt;

&lt;h2 id=&quot;3-boundary-type&quot;&gt;3. Boundary-type&lt;/h2&gt;
&lt;h3 id=&quot;--단어의-경계를-지정해-검색&quot;&gt;- 단어의 경계를 지정해 검색&lt;/h3&gt;
&lt;h3 id=&quot;1-b-단어의-앞-경계-또는-뒷-경계에서-검색&quot;&gt;(1) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\b&lt;/code&gt; (단어의 앞 경계 또는 뒷 경계에서 검색)&lt;/h3&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/\bYa/gm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;→ 단어 앞에 있는 Ya를 매칭&lt;br /&gt;
&lt;strong&gt;Ya&lt;/strong&gt;, &lt;strong&gt;Ya&lt;/strong&gt;YaYa, &lt;strong&gt;Ya&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/Ya\b/gm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;→ 단어 뒤에 있는 Ya를 매칭&lt;br /&gt;
&lt;strong&gt;Ya&lt;/strong&gt;, YaYa&lt;strong&gt;Ya&lt;/strong&gt;, &lt;strong&gt;Ya&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-b-b의-경우를-제외한-검색&quot;&gt;(2) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\B&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\b&lt;/code&gt;의 경우를 제외한 검색)&lt;/h3&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/Ya\B/gm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;→ 단어 뒤에 있는 Ya를 매칭(/Ya&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\b&lt;/code&gt;/gm)하는 경우를 제외한 매칭&lt;br /&gt;
&lt;strong&gt;Ya&lt;/strong&gt;YaYa, &lt;strong&gt;Ya&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;--문장의-경계를-지정해-검색&quot;&gt;- 문장의 경계를 지정해 검색&lt;/h3&gt;

&lt;h3 id=&quot;3--문장의-시작에서-검색&quot;&gt;(3) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;^&lt;/code&gt; (문장의 시작에서 검색)&lt;/h3&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/^Ya/gm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;→ 문장의 시작에 있는 Ya를 매칭&lt;/p&gt;

&lt;h3 id=&quot;4--문장의-끝에서-검색&quot;&gt;(4) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$&lt;/code&gt; (문장의 끝에서 검색)&lt;/h3&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/Ya$/gm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;→ 문장의 끝에 있는 Ya를 매칭&lt;/p&gt;

&lt;h3 id=&quot;--전체-문장의-경계를-지정해-검색&quot;&gt;- 전체 문장의 경계를 지정해 검색&lt;/h3&gt;
&lt;p&gt;※ flag에서 m(&lt;strong&gt;m&lt;/strong&gt;ultiline)을 선택하지 않으면,
전체 문장으로 경계를 지정해 검색함&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/^Ya/g
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;→ 전체 문장의 시작에 있는 Ya를 매칭&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/Ya$/g
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;→ 전체 문장의 끝에 있는 Ya를 매칭&lt;/p&gt;

&lt;h2 id=&quot;4-character-classes&quot;&gt;4. Character classes&lt;/h2&gt;
&lt;h3 id=&quot;1-특수문자&quot;&gt;(1) \특수문자&lt;/h3&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/\[/gm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;→ \ 뒤의 &lt;strong&gt;특수 문자&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[&lt;/code&gt; 를 매칭&lt;/p&gt;

&lt;h3 id=&quot;2-&quot;&gt;(2) .&lt;/h3&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/./gm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;→ 줄바꿈 문자를 제외한 &lt;strong&gt;모든 문자&lt;/strong&gt;를 매칭&lt;/p&gt;

&lt;h3 id=&quot;3-d&quot;&gt;(3) \d&lt;/h3&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/\d/gm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;→ &lt;strong&gt;숫자&lt;/strong&gt;(&lt;strong&gt;d&lt;/strong&gt;igit)를 매칭&lt;/p&gt;

&lt;h3 id=&quot;4-d&quot;&gt;(4) \D&lt;/h3&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/\D/gm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;→ &lt;strong&gt;숫자를 제외&lt;/strong&gt;한 매칭&lt;/p&gt;

&lt;h3 id=&quot;5-w-소문자-w&quot;&gt;(5) \w (소문자 w)&lt;/h3&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/\w/gm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;→ &lt;strong&gt;문자&lt;/strong&gt;(&lt;strong&gt;w&lt;/strong&gt;ord)를 매칭&lt;/p&gt;

&lt;h3 id=&quot;6-w-대문자-w&quot;&gt;(6) \W (대문자 w)&lt;/h3&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/\W/gm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;→ &lt;strong&gt;문자를 제외&lt;/strong&gt;한 매칭&lt;/p&gt;

&lt;h3 id=&quot;7-s-소문자-s&quot;&gt;(7) \s (소문자 s)&lt;/h3&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/\s/gm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;→ &lt;strong&gt;띄어쓰기&lt;/strong&gt;(&lt;strong&gt;s&lt;/strong&gt;pace) 매칭&lt;/p&gt;

&lt;h3 id=&quot;8-s-대문자-s&quot;&gt;(8) \S (대문자 S)&lt;/h3&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/\S/gm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;→ &lt;strong&gt;띄어쓰기를 제외&lt;/strong&gt; 매칭&lt;/p&gt;

&lt;h2 id=&quot;5-exercises&quot;&gt;5. Exercises&lt;/h2&gt;
&lt;h3 id=&quot;1-전화번호-형태-찾기&quot;&gt;1. 전화번호 형태 찾기&lt;/h3&gt;
&lt;p&gt;010-898-0893&lt;br /&gt;
010 898 0893&lt;br /&gt;
010.898.0893&lt;br /&gt;
010-405-3412&lt;br /&gt;
02-878-8888&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/\d{2,3}[- .]\d{3}[- .]\d{4}/gm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;→ 숫자(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\d&lt;/code&gt;)가 {2,3} 최소 두 번, 최대 세 번 반복
→ 숫자(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\d&lt;/code&gt;)가 {3} 세 번 반복
→ 숫자(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\d&lt;/code&gt;)가 {4} 네 번 반복
→ 숫자 사이에는 [- .] - 또는 공백 또는 . 으로 연결&lt;/p&gt;

&lt;h3 id=&quot;2-이메일-형태-찾기&quot;&gt;2. 이메일 형태 찾기&lt;/h3&gt;
&lt;p&gt;dream.coder.ellie@gmail.com&lt;br /&gt;
hello@daum.net&lt;br /&gt;
hello@daum.co.kr&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/[a-zA-Z0-9._+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9.]+/gm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;→ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[a-zA-Z0-9._+-]+&lt;/code&gt; 문자(소/대문자, 숫자, ., _, +, -)가 하나 이상&lt;br /&gt;
→ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@&lt;/code&gt; 연결&lt;br /&gt;
→ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[a-zA-Z0-9-]+&lt;/code&gt; 문자(소/대문자, 숫자, -)가 하나 이상&lt;br /&gt;
→ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt; 연결&lt;br /&gt;
→ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[a-zA-Z0-9.]+&lt;/code&gt; 문자(소/대문자, 숫자, .)가 하나 이상&lt;/p&gt;

&lt;h3 id=&quot;3-특정-문자열-찾기&quot;&gt;3. 특정 문자열 찾기&lt;/h3&gt;
&lt;p&gt;http://www.youtu.be/-ZClicWm0zM&lt;br /&gt;
https://www.youtu.be/-ZClicWm0zM&lt;br /&gt;
https://youtu.be/-ZClicWm0zM&lt;br /&gt;
youtu.be/-ZClicWm0zM&lt;br /&gt;
에서 youtube id인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-ZClicWm0zM&lt;/code&gt; 만 가져오기&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/(https?:\/\/)?(www.)?youtu.be\/([a-zA-Z0-9-]{11})/gm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(https?:\/\/)?&lt;/code&gt;&lt;br /&gt;
→ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?s&lt;/code&gt; s가 있어도 되고 없어도 됨 &lt;br /&gt;
→ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:\/\/&lt;/code&gt; ://(특수 문자) 연결&lt;br /&gt;
→ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(  )?&lt;/code&gt; 있어도 되고 없어도 되는 group&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(www.)?&lt;/code&gt;
→ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(  )?&lt;/code&gt; 있어도 되고 없어도 되는 group&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;youtu.be\/&lt;/code&gt;&lt;br /&gt;
→ youtu.be/ 연결&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;([a-zA-Z0-9-]{11})&lt;/code&gt;&lt;br /&gt;
→ 소/대문자,숫자,-로 이루어진 11자리의 문자 group&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;결과적으로 group #1(http://), group #2(www.), group #3(youtube id)이 생성됨
    &lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/(?:https?:\/\/)?(?:www.)?youtu.be\/([a-zA-Z0-9-]{11})/gm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;→ group #1과 group #2는 grouping하지 않으려면 group의 시작에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(?: )&lt;/code&gt;을 입력하면 됨&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;6-javascript-활용&quot;&gt;6. JavaScript 활용&lt;/h2&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;(?:&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\/\/)?(?:&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;www.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)?&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;youtu.be&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\/([&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;a-zA-Z0-9-&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;]{11})&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;http://www.youtu.be/-ZClicWm0zM&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;배열을 반환함&lt;br /&gt;
[0]: 매칭되는 전체 문자열,&lt;br /&gt;
[1]: 매칭되는 group의 data&lt;/p&gt;
&lt;blockquote&gt;
  &lt;h6 id=&quot;console&quot;&gt;Console&lt;/h6&gt;
  &lt;p&gt;0: “http://www.youtu.be/-ZClicWm0zM”&lt;br /&gt;
1: “-ZClicWm0zM”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;추가 code를 작성하면,&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;h6 id=&quot;console-1&quot;&gt;Console&lt;/h6&gt;
  &lt;p&gt;‘-ZClicWm0zM’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;7-유용한-site&quot;&gt;7. 유용한 site&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://regexone.com/&quot;&gt;https://regexone.com/&lt;/a&gt; → 학습&lt;br /&gt;
&lt;a href=&quot;https://regexr.com/&quot;&gt;https://regexr.com/&lt;/a&gt; → 정규표현식 입력시 확인&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“정규표현식 , 더이상 미루지 말자,” 유튜브 비디오, 22:01, 게시자 “드림코딩 by 엘리,” &lt;a href=&quot;https://youtu.be/t3M6toIflyQ&quot;&gt;https://youtu.be/t3M6toIflyQ&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content>

      
      
      
      
      

      <author>
          <name>ohoraming</name>
        
        
      </author>

      

      
        <category term="JavaScript" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Python(4) - Query 만들기 [object 검색]</title>
      <link href="https://ohoraming.github.io/Python-making-queries" rel="alternate" type="text/html" title="Python(4) - Query 만들기 [object 검색]" />
      <published>2022-04-04T22:14:00+09:00</published>
      <updated>2022-04-04T22:14:00+09:00</updated>
      <id>https://ohoraming.github.io/Python-making-queries</id>
      <content type="html" xml:base="https://ohoraming.github.io/Python-making-queries">&lt;!-- 글 작성하기 --&gt;

&lt;!-- 글이 시작될 때 관련 시리즈를 리스트로 보여줌 --&gt;
&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;Python 관련 포스팅&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./Python-django&quot;&gt;Python(1) - Django 설치&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./Python-mysql&quot;&gt;Python(2) - MySQL 연결&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./Python-postgresql&quot;&gt;Python(3) - PostgreSQL 연결&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./Python-making-queries&quot;&gt;Python(4) - Query 만들기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://docs.djangoproject.com/en/4.0/topics/db/queries/ 해석&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;retrieving-objects-object-검색&quot;&gt;Retrieving objects [object 검색]&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;DB에서 object를 검색하기 위해서는 model class에서 Manager를 통해 query set을 만들어야 함&lt;/li&gt;
  &lt;li&gt;query set은 db의 object 집합을 의미함&lt;/li&gt;
  &lt;li&gt;0개 이상의 filter를 가지는데, filter는 주어진 parameter에 기반해 query 결과를 좁혀줌&lt;/li&gt;
  &lt;li&gt;SQL에서는 query set은 select문과 동일하며, filter는 where나 limit절과 같음&lt;/li&gt;
  &lt;li&gt;model의 manager를 사용해 query set을 설정함&lt;/li&gt;
  &lt;li&gt;각 medel은 하나 이상의 manager를 가지며, 이는 기본적으로 objects라고 부름&lt;br /&gt;
  (manager는 ‘table-level’연산자와 ‘record-level’연산자를 분리시키기 위해 model instance보다는 model class를 통해 접근함 )&lt;/li&gt;
  &lt;li&gt;model을 통해 직접적으로 접근하려면, 아래와 같이 입력하면 됨
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# &amp;lt;django.db.models.manager.Manager object at ...&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tagline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bar'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;manager는 model의 queryset의 main source임&lt;br /&gt;
예를들어, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Blog.objects.all()&lt;/code&gt;은 DB에 있는 모든 Blog object를 포함하는 queryset을 반환함&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-retrieving-all-objects-모든-object-검색&quot;&gt;1. Retrieving all objects (모든 object 검색)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;table의 모든 object를 검색하기 위한 가장 간단한 방법&lt;/li&gt;
  &lt;li&gt;manager에 대해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;all()&lt;/code&gt; 메서드를 사용하면 됨&lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;all_entries = Entry.objects.all()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-retrieving-specific-objects-with-filters-filter를-이용한-특정-object-검색&quot;&gt;2. Retrieving specific objects with filters (filter를 이용한 특정 object 검색)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;all()&lt;/code&gt;에 의해 반환된 queryset은 db table의 모든 object를 서술함&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;하지만, 대게, 완전한 object의 특정 부분만 선택적으로 원할 것임&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;이러한 특정 부분을 생성하기 위해서는, filter 조건을 추가해 최초의 queryset을 정제해야 함&lt;/li&gt;
  &lt;li&gt;queryset을 정제하기 위한 가장 흔한 두 가지 방법,
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;filter(**kwargs)&lt;/strong&gt;&lt;br /&gt;
  주어진 검색 parameter와 일치하는 object가 포함된 새로운 queryset을 반환 함&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;exclude(**kwargs)&lt;/strong&gt;&lt;br /&gt;
  주어진 검색 parameter와 일치하지 않는 object가 포함된 새로운 queryset을 반환 함&lt;/li&gt;
      &lt;li&gt;검색 parameters(위의 함수 정의에 있는 **kwargs)는 아래의 Field lookups에 서술된 형태로 있어야 함&lt;br /&gt;
  예를 들어, 2006년부터의 blog entry들의 queryset을 얻으려면 filter()를 사용함&lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entry.objects.filter(pub_date__year=2006)&lt;/code&gt;
  기본적인 manager class에서도 동일함&lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entry.objects.all().filter(pub_date__year=2006)&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;chaining-filters연쇄-필터&quot;&gt;Chaining filters(연쇄 필터)&lt;/h3&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;headline__startswith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'What'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pub_date__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;today&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pub_date__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2005&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;db의 모든 entry의 초기 queryset을 가져와, filter를 추가한 뒤, 또 다른 filter인 예외를 추가한 것임&lt;/li&gt;
  &lt;li&gt;최종 결과는 “What”으로 시작하는 헤드라인을 가지며, 2005년 1월 30일부터 현재사이에 발행된 모든 entry를 포함한 queryset임&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;filtered-querysets-are-unique-걸러진-queryset은-고유함&quot;&gt;Filtered QuerySets are unique (걸러진 queryset은 고유함)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;queryset을 정제할 때마다, 이전의 queryset과 bound되지 않은 새로운 queryset을 받게 됨&lt;/li&gt;
  &lt;li&gt;각각의 정제는 독립된 별개의 queryset을 만들며, 저장, 사용, 재사용될 수 있음
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headline__startswith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;What&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;q2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pub_date__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;today&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;q3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pub_date__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;today&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;세 queryset은 독립되어있음
    &lt;ul&gt;
      &lt;li&gt;첫 번째는 “What”으로 시작하는 헤드라인을 포함하는 모든 entry를 가지는 기본 queryset&lt;/li&gt;
      &lt;li&gt;두 번째는 pub_date가 오늘의 record를 제외하는 추가적인 기준을 가진 첫 번째의 부분 집합&lt;/li&gt;
      &lt;li&gt;세 번째는 pub_date가 오늘인 record만 선택하는 추가적인 기준을 가진 첫 번째의 부분 집합&lt;/li&gt;
      &lt;li&gt;초기 queryset(q1)은 정제 과정에 영향 받지 않음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;querysets-are-lazy-queryset은-게으름&quot;&gt;QuerySets are lazy (queryset은 게으름)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;queryset을 생성하는 것은 어떠한 db 활동과도 연관되지 않음&lt;/li&gt;
  &lt;li&gt;온종일 filter를 쌓을 수 있고 django는 queryset이 평가될 때까지 실제로 query를 실행하지 않을 것임
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headline__startswith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;What&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pub_date__lte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;today&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body_text__icontains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;food&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;세 번의 db 접근으로 보이지만, 실제로는 마지막 줄의 print(q) 단 한 번만 db에 접근함&lt;/li&gt;
  &lt;li&gt;일반적으로 queryset의 결과는 “요청”할 때까지 db로부터 가져오지 않음&lt;/li&gt;
  &lt;li&gt;요청할 때, queryset은 db에 접근해 평가됨 (자세한 내용은 &lt;a href=&quot;https://docs.djangoproject.com/en/4.0/ref/models/querysets/#when-querysets-are-evaluated&quot;&gt;https://docs.djangoproject.com/en/4.0/ref/models/querysets/#when-querysets-are-evaluated&lt;/a&gt; 참조)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;retrieving-a-single-object-with-get-get으로-단일-object-검색&quot;&gt;Retrieving a single object with get() (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get()&lt;/code&gt;으로 단일 object 검색)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter()&lt;/code&gt;는 단 하나의 object가 query와 일치할지라도 하나의 요소가 포함된 queryset을 줌&lt;/li&gt;
  &lt;li&gt;query와 일치하는 단 하나의 object가 있다고 할 때, 직적적으로 object를 반환하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get()&lt;/code&gt; 메서드를 manager에 사용할 수 있음&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;one_entry = Entry.objects.get(pk=1)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter()&lt;/code&gt;처럼 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get()&lt;/code&gt;으로 어떤 query문이든 사용할 수 있음(&lt;a href=&quot;https://docs.djangoproject.com/en/4.0/topics/db/queries/#field-lookups&quot;&gt;https://docs.djangoproject.com/en/4.0/topics/db/queries/#field-lookups&lt;/a&gt; 참조)&lt;/li&gt;
  &lt;li&gt;[0]의 부분에 대해, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get()&lt;/code&gt;을 사용하는 것과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter()&lt;/code&gt;를 사용하는 것 사이에는 차이가 있음을 명심할 것&lt;/li&gt;
  &lt;li&gt;query와 일치하는 결과가 없다면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get()&lt;/code&gt;은 &lt;strong&gt;DoesNotExist 예외&lt;/strong&gt;를 발생시킴&lt;/li&gt;
  &lt;li&gt;이 예외는 query가 수행되는 model class 속성임&lt;/li&gt;
  &lt;li&gt;pk=1인 entry object가 없다면 django는 Entry.DoesNotExist 예외를 발생시킬 것 임&lt;/li&gt;
  &lt;li&gt;비슷하게, 하나 이상의 item과 get() query가 일치한다면, django는 항의할 것임&lt;/li&gt;
  &lt;li&gt;이 경우, model class 속성인 &lt;strong&gt;MultipleObjectsReturned&lt;/strong&gt;를 발생키길 것임&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;other-queryset-methods다른-queryset-메서드&quot;&gt;Other QuerySet methods[다른 queryset 메서드]&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;db의 object를 찾아보아야 할 때, 대부분 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;all()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exclude()&lt;/code&gt;를 사용할 것임&lt;/li&gt;
  &lt;li&gt;모든 다양한 queryset 메서드의 완전한 리스트를 위해서는 &lt;a href=&quot;https://docs.djangoproject.com/en/4.0/ref/models/querysets/#queryset-api&quot;&gt;https://docs.djangoproject.com/en/4.0/ref/models/querysets/#queryset-api&lt;/a&gt;를 참조할 것&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;limiting-querysets한정-queryset&quot;&gt;Limiting QuerySets[한정 queryset]&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;특정한 수 만큼의 결과로 queryset을 한정하기 위해 python의 array-slicing 문법의 부분 집합을 사용하라&lt;/li&gt;
  &lt;li&gt;이는 SQL의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;limit&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;offset&lt;/code&gt; 절과 동일함&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entry.objects.all()[:5]&lt;/code&gt; → 첫 5개의 object를 반환(LIMIT 5)&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entry.objects.all()[5:10]&lt;/code&gt; → 여섯~열 번째 object를 반환(OFFSET 5 LIMIT 5)&lt;/li&gt;
  &lt;li&gt;음수 indexing은 지원되지 않음(예를 들면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entry.objects.all()[-1]&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;일반적으로 queryset을 자르는 것은 새로운 queryset을 반환하며, 이는 query를 평가하지 않음&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;python의 slice 문법의 ‘step’ parameter를 사용하는 것은 예외임
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entry.objects.all()[:10:2]&lt;/code&gt;&lt;br /&gt;
→ 첫 10개의 두 번째마다의 object를 list로 반환하는 query 실행&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;잘려진 queryset를 추가적으로 filtering하거나 ordering하는 것은 금지됨&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;단일 object를 정제하기 위해 index를 slice하는 대신에 list를 사용함(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SELECT foo FROM bar LIMIT 1&lt;/code&gt;)&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entry.objects.order_by('headline')[0]&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entry.objects.order_by('headline')[0:1].get()&lt;/code&gt;&lt;br /&gt;
→ 헤드라인을 알파벳 순서에 따라 정렬한 뒤, db의 첫 Entry를 반환&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;주어진 기준과 일치하는 object가 없을 시, 첫 번째는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IndexError&lt;/code&gt;를, 두 번째는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DoesNotExist&lt;/code&gt;를 발생시킴
(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get()&lt;/code&gt;에 대한 자세한 사항은 &lt;a href=&quot;https://docs.djangoproject.com/en/4.0/ref/models/querysets/#django.db.models.query.QuerySet.get&quot;&gt;https://docs.djangoproject.com/en/4.0/ref/models/querysets/#django.db.models.query.QuerySet.get&lt;/a&gt; 참조)&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>ohoraming</name>
        
        
      </author>

      

      
        <category term="Python" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Test Code</title>
      <link href="https://ohoraming.github.io/Test-Code" rel="alternate" type="text/html" title="Test Code" />
      <published>2022-03-30T22:26:00+09:00</published>
      <updated>2022-03-30T22:26:00+09:00</updated>
      <id>https://ohoraming.github.io/Test%20Code</id>
      <content type="html" xml:base="https://ohoraming.github.io/Test-Code">&lt;!-- 글 작성하기 --&gt;

&lt;!-- 글이 시작될 때 관련 시리즈를 리스트로 보여줌 --&gt;
&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;여러 가지 포스팅&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./Other-git-convention&quot;&gt;Git - Git Convention&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./Other-test-code&quot;&gt;Test Code&lt;/a&gt;&lt;/li&gt;
    &lt;br /&gt;
    &lt;br /&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-test-code를-작성하는-이유&quot;&gt;1. Test Code를 작성하는 이유&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;bug 발생 시점이 이를 수록 수정 비용이 적게 듦&lt;br /&gt;
수정 비용: 요구 분석/기획 &amp;lt; 설계 &amp;lt; 구현 &amp;lt; 테스트(QA) &amp;lt; 유지 보수/배포&lt;/li&gt;
  &lt;li&gt;기획 단계에서 요구 조건을 보다 명확하게 이해할 수 있음&lt;/li&gt;
  &lt;li&gt;예외 케이스의 처리 방식을 다각도로 생각해 볼 수 있음&lt;/li&gt;
  &lt;li&gt;기능을 구현할 때마다 이미 쌓여있는 Test Code를 모두 테스트하면, 현재의 코드로 인해 다른 코드들이 받을 수 있는 side effect를 즉시 감지할 수 있음(회귀 테스트(Regression Test))&lt;/li&gt;
  &lt;li&gt;test coverage만큼 코드에 대해 확실할 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-test-code를-작성하는-방법&quot;&gt;2. Test Code를 작성하는 방법&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;케이스 단위로 테스트를 정리(기능별 분리)&lt;/li&gt;
  &lt;li&gt;케이스 별로 실제 행위 유발&lt;/li&gt;
  &lt;li&gt;행위의 결과 확인(pass/fail return)&lt;/li&gt;
  &lt;li&gt;케이스의 자동화&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-주의-사항&quot;&gt;3. 주의 사항&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;많은 Test Code를 작성하고 유지하는 데 시간이 걸림&lt;/li&gt;
  &lt;li&gt;이후, 제품을 완전히 변경한다고 하면 시간 낭비일 수 있음&lt;/li&gt;
  &lt;li&gt;Test Code와 실제 code를 작성하는 개발자가 같다면 사각지대가 발생할 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;4-unit-test-tip&quot;&gt;4. Unit Test Tip&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;여러 테스트에 동일한 데이터를 재사용하지 않아야 함&lt;br /&gt;
→ global instance의 재사용 금지&lt;/li&gt;
  &lt;li&gt;python의 built-in function은 test하지 않아도 됨&lt;br /&gt;
→ 표준 라이브러리는 test의 목표가 되어선 안 됨&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>ohoraming</name>
        
        
      </author>

      

      
        <category term="Other" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Python(3) - PostgreSQL 연결</title>
      <link href="https://ohoraming.github.io/Python-postgresql" rel="alternate" type="text/html" title="Python(3) - PostgreSQL 연결" />
      <published>2022-03-16T13:35:00+09:00</published>
      <updated>2022-03-16T13:35:00+09:00</updated>
      <id>https://ohoraming.github.io/Python-postgresql</id>
      <content type="html" xml:base="https://ohoraming.github.io/Python-postgresql">&lt;!-- 글 작성하기 --&gt;

&lt;!-- 글이 시작될 때 관련 시리즈를 리스트로 보여줌 --&gt;
&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;Python 관련 포스팅&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./Python-django&quot;&gt;Python(1) - Django 설치&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./Python-mysql&quot;&gt;Python(2) - MySQL 연결&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./Python-postgresql&quot;&gt;Python(3) - PostgreSQL 연결&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./Python-making-queries&quot;&gt;Python(4) - Query 만들기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-선행-작업&quot;&gt;1. 선행 작업&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;django 설치
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ python -m pip install Django&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;현재 directory에 project 만들기&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ django-admin startproject [project 이름]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;project파일 위치로 이동해 app 만들기&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ cd [project 이름]&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ django-admin startapp [app 이름]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;server 실행&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ python manage.py runserver&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;pgAdmin 4 다운로드&lt;br /&gt;
  &lt;a href=&quot;https://www.pgadmin.org/download/&quot;&gt;https://www.pgadmin.org/download/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-pgadmin-4-실행&quot;&gt;2. pgAdmin 4 실행&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Servers&lt;/code&gt; - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PostgreSQL&lt;/code&gt; - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Databases&lt;/code&gt; 우클릭 - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Create&lt;/code&gt; - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Database...&lt;/code&gt; 선택&lt;/li&gt;
  &lt;li&gt;Database 이름 기입 후, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Save&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-database-설정&quot;&gt;3. Database 설정&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[app]/settings.py&lt;/code&gt; 수정
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;DATABASES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;'default'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;'ENGINE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'django.db.backends.postgresql'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;'NAME'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'testdb'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;'USER'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'postgres'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;'PASSWORD'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'1234'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;'HOST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'localhost'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 127.0.0.1 도 가능
&lt;/span&gt;          &lt;span class=&quot;s&quot;&gt;'PORT'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'5432'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ENGINE&lt;/code&gt;: 자신이 사용할 db 엔진&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NAME&lt;/code&gt;: db 이름&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HOST&lt;/code&gt;: db host&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PORT&lt;/code&gt;: db 실행할 포트(기본값 5432)&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;'myapp'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# app 등록 
&lt;/span&gt;      &lt;span class=&quot;s&quot;&gt;'django.contrib.admin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;'django.contrib.auth'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;'django.contrib.contenttypes'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;'django.contrib.sessions'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;'django.contrib.messages'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;'django.contrib.staticfiles'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;만든 app을 INSTALLED_APPS에 추가&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;4-table-만들기&quot;&gt;4. Table 만들기&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[app]/model.py&lt;/code&gt;
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.db&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Question&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;question_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;pub_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateTimeField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'date published'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Choice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;question&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ForeignKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Question&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on_delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CASCADE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;choice_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;votes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IntegerField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;table 이름&lt;/strong&gt;을 &lt;strong&gt;class 이름&lt;/strong&gt;으로, &lt;strong&gt;column 이름&lt;/strong&gt;은 &lt;strong&gt;변수 이름&lt;/strong&gt;으로 설정&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;field type&lt;/strong&gt;은 아래 문서 참고
  &lt;a href=&quot;https://docs.djangoproject.com/en/4.0/ref/models/fields/#model-field-types&quot;&gt;https://docs.djangoproject.com/en/4.0/ref/models/fields/#model-field-types&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;5-db연결-및-table-생성&quot;&gt;5. DB연결 및 table 생성&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;psycopg2 설치: Django와 PostgreSQL을 연결&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ pip install psycopg2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;migrations 폴더 생성: model이 신규로 생성 또는 변경될 시 실행&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ python manage.py makemigrations&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;model class로부터 table 생성 및 수정 실행, 실제 migration을 DB에 적용&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ python manage.py migrate&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>ohoraming</name>
        
        
      </author>

      

      
        <category term="Python" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Python(2) - MySQL 연결</title>
      <link href="https://ohoraming.github.io/Python-mysql" rel="alternate" type="text/html" title="Python(2) - MySQL 연결" />
      <published>2022-03-11T22:35:00+09:00</published>
      <updated>2022-03-11T22:35:00+09:00</updated>
      <id>https://ohoraming.github.io/Python-mysql</id>
      <content type="html" xml:base="https://ohoraming.github.io/Python-mysql">&lt;!-- 글 작성하기 --&gt;

&lt;!-- 글이 시작될 때 관련 시리즈를 리스트로 보여줌 --&gt;
&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;Python 관련 포스팅&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./Python-django&quot;&gt;Python(1) - Django 설치&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./Python-mysql&quot;&gt;Python(2) - MySQL 연결&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./Python-postgresql&quot;&gt;Python(3) - PostgreSQL 연결&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./Python-making-queries&quot;&gt;Python(4) - Query 만들기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-pymysql-설치&quot;&gt;1. pymysql 설치&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ pip install pymysql&lt;/code&gt; 입력&lt;/p&gt;

&lt;h2 id=&quot;2-db-연결&quot;&gt;2. DB 연결&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;import&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;connect()&lt;/code&gt;에 DB 기본 정보 입력
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pymysql&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pymysql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;root&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1234&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dbpractice&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-cursor-설정&quot;&gt;3. cursor 설정&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cursor()&lt;/code&gt;로 cursor 가져오기
    &lt;ul&gt;
      &lt;li&gt;실행 결과가 &lt;strong&gt;tuple&lt;/strong&gt;로 반환됨
        &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;curs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;실행 결과를 &lt;strong&gt;dictionary&lt;/strong&gt;로 반환하려면,&lt;br /&gt;
  parameter로 pymysql.cursors.DictCursor 전달
        &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;curs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pymysql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DictCursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;tuple&lt;/strong&gt; 자료형&lt;br /&gt;
→ 요솟값이 ()에 둘러싸임&lt;br /&gt;
t3 = (1, 2, 3)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;dictionary&lt;/strong&gt; 자료형&lt;br /&gt;
→ Key : Value 쌍 여러 개가 쉼표(,)로 구분되어 { }로 둘러싸여 있음&lt;br /&gt;
→ Key에는 변하지 않는 고윳값을 사용&lt;br /&gt;
→ Value에는 문자열과 리스트 모두 사용 가능&lt;br /&gt;
{Key1:Value1, Key2:Value2, Key3:Value3, …}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;4-crud-query문-작성&quot;&gt;4. CRUD query문 작성&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;execute()&lt;/code&gt;에 작성&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;사용할 db 선언(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;USE&lt;/code&gt;) 후 용도에 맞는 query문 작성 시작&lt;br /&gt;
  → &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'USE [사용할 DB이름];'&lt;/code&gt;&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;curs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'USE dbpractice;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# cursor를 가져온 상태에서 sql문을 실행
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;1-insert&quot;&gt;(1) INSERT&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;execute()&lt;/code&gt;에 query문 작성 후, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commit()&lt;/code&gt;과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;close()&lt;/code&gt;를 실행
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;curs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'INSERT INTO user (id, name, region, insdt) VALUES(&quot;hong&quot;, &quot;홍길동&quot;, &quot;서울&quot;, now());'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;sql 변수를 만들어 query문 쓰는 방법
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;INSERT INTO user (id, name, region, insdt) VALUES('hong2', '홍길동2', '서울2', now())&quot;&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;curs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-select&quot;&gt;(2) SELECT&lt;/h3&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SELECT * FROM user&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;curs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetchall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 실행한 데이터를 가져옴
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 모든 행을 가져옴
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SELECT * FROM user WHERE region=%s&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;curs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;curs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'서울'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# %s에 들어갈 문자열을 추가함
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetchall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 실행한 데이터를 가져옴
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;region&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 특정 행, 열의 내용을 가져옴
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fetchall()&lt;/code&gt;: &lt;strong&gt;모든 레코드&lt;/strong&gt;를 가져옴&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fetmany()&lt;/code&gt;: &lt;strong&gt;지정한 개수만큼의 레코드&lt;/strong&gt;를 가져옴&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fetchone()&lt;/code&gt;: &lt;strong&gt;하나의 레코드&lt;/strong&gt;만 가져옴&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-update&quot;&gt;(3) UPDATE&lt;/h3&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;UPDATE user SET name='포로리' WHERE name='테스트'&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;curs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;4-delete&quot;&gt;(4) DELETE&lt;/h3&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;DELETE FROM user WHERE name='홍길동'&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;curs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content>

      
      
      
      
      

      <author>
          <name>ohoraming</name>
        
        
      </author>

      

      
        <category term="Python" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Git - Git Convention</title>
      <link href="https://ohoraming.github.io/git-convention" rel="alternate" type="text/html" title="Git - Git Convention" />
      <published>2022-03-10T21:25:00+09:00</published>
      <updated>2022-03-10T21:25:00+09:00</updated>
      <id>https://ohoraming.github.io/git-convention</id>
      <content type="html" xml:base="https://ohoraming.github.io/git-convention">&lt;!-- 글 작성하기 --&gt;

&lt;!-- 글이 시작될 때 관련 시리즈를 리스트로 보여줌 --&gt;
&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;여러 가지 포스팅&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./Other-git-convention&quot;&gt;Git - Git Convention&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./Other-test-code&quot;&gt;Test Code&lt;/a&gt;&lt;/li&gt;
    &lt;br /&gt;
    &lt;br /&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://codingsight.com/git-branching-naming-convention-best-practices/&quot;&gt;https://codingsight.com/git-branching-naming-convention-best-practices/&lt;/a&gt;의 내용을 번역한 것입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;git-branching-naming-convention-best-practices&quot;&gt;Git Branching Naming Convention: Best Practices&lt;/h2&gt;
&lt;p&gt;Git branch는 Regular와 Temporary branch로 나눔&lt;/p&gt;

&lt;h2 id=&quot;regular-git-branches&quot;&gt;Regular Git Branches&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;영구적인 repository에 씀&lt;/li&gt;
  &lt;li&gt;간단하고 쉬운 naming convention&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;dev(development)&lt;/strong&gt;는 main 개발 branch임&lt;br /&gt;
dev branch의 아이디어는 해당 branch에서만 변경를 일으키고, master branch의 직접적인 변경은 제한함&lt;br /&gt;
dev branch의 변경은 review(검토)를 받고, 테스트 후 master branch와 merge됨&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;master&lt;/strong&gt;는 Git repository의 기본 branch임&lt;br /&gt;
항상 안정적이며, 어떠한 직접적인 check-in도 허용하지 않음&lt;br /&gt;
code review이후에만 merge가 가능함&lt;br /&gt;
팀 구성원 모두가 master를 안정적이며, 최신의 상태로 유지하는 것에 책임이 있음&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;QA 또는 test branch&lt;/strong&gt;는 QA testing과 자동 testing을 위한 모든 코드를 포함하고 있음&lt;br /&gt;
어떠한 변경이 production 환경으로 가기 전, 안정적인 codebase를 위해 반드시 QA testing을 거쳐야 함&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;temporary-git-branches&quot;&gt;Temporary Git Branches&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;이름에서 알 수 있는 것처럼, 필요할 때마다 만들고 없앨 수 있음&lt;/li&gt;
  &lt;li&gt;Bug Fix, Hot Fix, Feature Branches, Experimental Branches, WIP branches 용도로 사용할 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;git-branching-naming-convention&quot;&gt;Git Branching Naming Convention&lt;/h2&gt;
&lt;p&gt;수많은 naming convention이 존재함&lt;br /&gt;
이 중 가장 좋은 일곱 개의 naming convention에 대해 알아보자&lt;/p&gt;

&lt;h2 id=&quot;1-start-branch-name-with-a-group-word&quot;&gt;1. Start branch name with a Group word&lt;/h2&gt;
&lt;p&gt;group word로 branch 이름을 시작하라.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;최고의 방법 중 하나&lt;/li&gt;
  &lt;li&gt;group word는 자신의 작업 흐름과 일치하는 어느것이든 상관 없음&lt;br /&gt;
e.g.)&lt;br /&gt;
&lt;strong&gt;Bug&lt;/strong&gt; - 곧 해결되어야하는 버그,&lt;br /&gt;
&lt;strong&gt;WIP&lt;/strong&gt; - 작업이 진행 중에 있으며, 조만간 끝나지 않을 것이라 예상되지 않을 때&lt;br /&gt;
(WIP: work in process/progress)&lt;/li&gt;
  &lt;li&gt;branch 이름을 봤을 때, 해당 Git branch가 무엇에 대한 것이며, 어떤 목적을 가지고 있는지 알 수 있어야 함&lt;br /&gt;
e.g.) &lt;strong&gt;bug-logo-alignment-issue&lt;/strong&gt;: logo alignment issue를 고치는 중임&lt;br /&gt;
&lt;strong&gt;wip-ioc-container-added&lt;/strong&gt;: IoC container를 추가하는 작업을 진행 중임&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-use-unique-id-in-branch-names&quot;&gt;2. Use Unique ID in branch names&lt;/h2&gt;
&lt;p&gt;branch이름에 고유한 ID를 사용하라.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;branch 이름에 issue tracker ID를 사용할 수 있음&lt;/li&gt;
  &lt;li&gt;버그를 고칠 때, 선호하는 방법임&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;e.g.)&lt;br /&gt;
&lt;strong&gt;wip-8712-add-testing-module&lt;/strong&gt;라는 이름은&lt;br /&gt;
해당 branch가 testing module을 추가하는 업무에 적용되며,&lt;br /&gt;
issue의 tracking Id는 8712이고,&lt;br /&gt;
해당 업무가 진행 중에 있다는 것을 보여줌&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;branch 이름에 외부 tracking ID를 사용하는 것의 장점은 외부 시스템에서 진행 상황을 추적할 수 있다는 것임&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-use-hyphen-or-slash-as-separators&quot;&gt;3. Use Hyphen or Slash as Separators&lt;/h2&gt;
&lt;p&gt;구분자로 하이픈이나 슬래시를 사용하라.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;많은 개발자들은 구분자로 슬래시와 하이픈을 사용함&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;어떤 것을 사용할 지는 자신 또는 자신의 팀의 선호에 달려있음&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;개인적으로, 하이픈은 이름을 읽기 편하게 만들어 주어서 branch 이름의 구분자로 적절하다고 생각함&lt;/li&gt;
  &lt;li&gt;슬래시, 하이픈, 언더스코어 모두 사용할 수 있음&lt;/li&gt;
  &lt;li&gt;중요한 것은 일관되어야 한다는 것임&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;branch 이름에 구분자를 넣으면 두 가지 장점이 있음&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;가독성을 높일 수 있으며, 혼동을 줄여줄 수 있음&lt;/li&gt;
  &lt;li&gt;특히, 많은 branch를 다루고 있다면 관리하기 좋음&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;구분자가 없는 &lt;strong&gt;featureupgradejqueryversionloginmodule&lt;/strong&gt;보다는&lt;br /&gt;
구분자가 있는 &lt;strong&gt;feature_upgrade_jquery_version_login_module&lt;/strong&gt;이 읽기 쉬움&lt;/p&gt;

&lt;h2 id=&quot;4-git-branch-with-author-name&quot;&gt;4. Git Branch with Author Name&lt;/h2&gt;
&lt;p&gt;작성자 이름을 포함하는 Git branch&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;많은 회사들은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;author&amp;gt;_&amp;lt;branch-type&amp;gt;_&amp;lt;branch-name&amp;gt;&lt;/code&gt; 형식에 따라 작성자의 이름이 branch이름에 있는 것을 선호함&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;e.g.)  &lt;strong&gt;rajeev.bera_feature_new-experimental-changes&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;이 방법은 다른 개발자들의 작업과 추가적인 시스템의 진행 상황을 추적하기 좋음&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;5-avoid-using-numbers-only&quot;&gt;5. Avoid using numbers only&lt;/h2&gt;
&lt;p&gt;숫자만 사용하는 것을 피하라.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;몇몇 개발자들은 branch 이름에 issue Id만 기입하는데, 이는 일의 진행에 도움이 되지 않음&lt;/li&gt;
  &lt;li&gt;예를 들어, &lt;strong&gt;9912&lt;/strong&gt;라는 branch 이름은 무엇을 설명하는지 알 수가 없음&lt;/li&gt;
  &lt;li&gt;특히 이 방식은 다른 git branch와 merge하는 중에 혼란과 실수의 가능성만 증가시킴&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;6-avoid-using-all-naming-convention-simultaneously&quot;&gt;6. Avoid using all naming convention simultaneously&lt;/h2&gt;
&lt;p&gt;모든 naming convention을 동시에 사용하는 것을 피하라.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;모든 naming convention을 혼용해 사용하는 것은 좋은 방식이 아님&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;혼란만 가중시키고, 전반적인 처리 과정을 더 복잡하게 만듦&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;팀은 업무 중에 사용할 naming convention을 한번 정한 후, 팀원들이 받아들이도록 해야 함&lt;/li&gt;
  &lt;li&gt;일관성이 가장 중요함&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;7-avoid-long-descriptive-names-for-long-lived-branches&quot;&gt;7. Avoid long descriptive names for long-lived branches&lt;/h2&gt;
&lt;p&gt;오래가는 branch에 길게 설명하는 이름은 피하라.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;branch 이름의 필수적인 특징은 정확해야 하며, 유용한 정보를 주어야 한다는 것임&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;e.g.)&lt;br /&gt;
&lt;strong&gt;wip_login_module_which_will_used_in_the_public_website&lt;/strong&gt;,  &lt;strong&gt;wip_login_module_which_will_used_in_the_internal_website&lt;/strong&gt;&lt;br /&gt;
와 같은 branch 이름의 경우, 길고 상세함
필수적이지 않음
대신에,&lt;br /&gt;
&lt;strong&gt;wip_feature_login_module&lt;/strong&gt;과 같은 branch 이름은 짧지만 branch의 목적을 잘 설명함&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Git의 Branching 모델은 강력하지만, branch를 적절하고 효과적으로 다뤄야만 함&lt;/li&gt;
  &lt;li&gt;필수적인 요건 중 하나는 모든 팀원이 같은 convention을 따라야 하는 것임&lt;/li&gt;
  &lt;li&gt;pre-commit hook과 같은 Git hook을 사용하는 것도 쉬운 방법 중 하나임&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>ohoraming</name>
        
        
      </author>

      

      
        <category term="Other" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">OS(11) - Contiguous Memory Allocation</title>
      <link href="https://ohoraming.github.io/OS-contiguous-memory-allocation" rel="alternate" type="text/html" title="OS(11) - Contiguous Memory Allocation" />
      <published>2022-03-01T15:23:00+09:00</published>
      <updated>2022-03-01T15:23:00+09:00</updated>
      <id>https://ohoraming.github.io/OS-contiguous-memory-allocation</id>
      <content type="html" xml:base="https://ohoraming.github.io/OS-contiguous-memory-allocation">&lt;!-- 글 작성하기 --&gt;

&lt;!-- 글이 시작될 때 관련 시리즈를 리스트로 보여줌 --&gt;
&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;OS 관련 포스팅&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-intro&quot;&gt;OS(1) - Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-interrupt-based-system&quot;&gt;OS(2) - Interrupt-Based System&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-process-mgmt&quot;&gt;OS(3) - Process Management&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-cpu-scheduling&quot;&gt;OS(4) - CPU Scheduling&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-thread&quot;&gt;OS(5) - Thread&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-classical-sync-problems&quot;&gt;OS(6) - Classical Synchronization Problems&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-deadlock&quot;&gt;OS(7) - Deadlock&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-monitor&quot;&gt;OS(8) - Monitor&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-midterm&quot;&gt;OS(9) - Midterm&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-main-memory-mgmt&quot;&gt;OS(10) - Main Memory Management&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-contiguous-memory-allocation&quot;&gt;OS(11) - Contiguous Memory Allocation&lt;/a&gt;&lt;/li&gt;
    &lt;br /&gt;
    &lt;br /&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;contiguous-memory-allocation-연속-메모리-할당&quot;&gt;Contiguous Memory Allocation (연속 메모리 할당)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;최초의 컴퓨터&lt;/strong&gt;&lt;br /&gt;
  → OS 없음&lt;br /&gt;
  → 하나의 process만 main memory에서 돎&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;OS 등장&lt;/strong&gt;&lt;br /&gt;
  → OS와 하나의 process가 돎&lt;br /&gt;
  → MS-DOS&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Multi-programming&lt;/strong&gt; 환경&lt;br /&gt;
  → OS와 여러 개의 process가 돎&lt;br /&gt;
  → booting 직후에는 OS와 &lt;strong&gt;big single hole&lt;/strong&gt;(비어있는 하나의 큰 메모리)&lt;br /&gt;
  → process 생성과 종료의 반복 후에는 OS와 &lt;strong&gt;scattered holes&lt;/strong&gt;(흩어져있는 여러 메모리)&lt;br /&gt;
  → memory가 흩어져 있으면 새 process 적재 불가&lt;br /&gt;
      (hole을 모두 합하면 적재할 process 용량보다 커도 이어져있지 않으면 사용 불가)
      (= 외부 단편화(&lt;strong&gt;external fragmentation&lt;/strong&gt;))&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;연속 메모리 할당 방식&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;First-fit&lt;/strong&gt;&lt;br /&gt;
  → memory를 위(또는 아래)에서 순차적으로 훑어 처음으로 만난 적합한 공간에 할당&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Best-fit&lt;/strong&gt;&lt;br /&gt;
  → 빈 hole 중에서 새 process 용량과 가장 크기가 비슷한 곳에 할당&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Worst-fit&lt;/strong&gt;&lt;br /&gt;
  → 빈 hole 중에서 새 process 용량과 가장 크기가 크게 차이나는 곳에 할당&lt;/li&gt;
      &lt;li&gt;속도: first-fit이 가장 빠름&lt;br /&gt;
  → 조건에 부합하는 첫 메모리 공간에 할당하기 때문&lt;/li&gt;
      &lt;li&gt;이용률: first-fit, best-fit 방식이 실행 못하는 process 수가 비교적 적음&lt;/li&gt;
      &lt;li&gt;first-fit이나 best-fit을 선택하더라도  &lt;br /&gt;
  &lt;strong&gt;여전히 external fragmentation 발생&lt;/strong&gt;&lt;br /&gt;
  → memory의 약 1/3은 사용 불가&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;compaction&lt;/strong&gt;: 흩어져 있는 hole들을 한 곳으로 모으는 것&lt;br /&gt;
  → 최적의 알고리즘의 부재, 고부담의 단점이 존재&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;paging-페이징&quot;&gt;Paging (페이징)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;memory에 process가 연속 할당되어야 한다는 생각때문에 발생한 &lt;strong&gt;external fragmentation의 해결책&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;memory&lt;/strong&gt;를 일정한 크기(= &lt;strong&gt;frame&lt;/strong&gt;)로 자르고 &lt;strong&gt;process&lt;/strong&gt; 역시 같은 일정한 크기(= &lt;strong&gt;page&lt;/strong&gt;)로 자름&lt;br /&gt;
  → size: frame = page&lt;/li&gt;
  &lt;li&gt;여러 개의 MMU가 relocation register값을 바꿔주면 각 page들이 hole의 frame에 각각 배치될 때, CPU는 process가 연속 할당되었다고 속음&lt;/li&gt;
  &lt;li&gt;이때의 MMU는 &lt;strong&gt;page table&lt;/strong&gt;이라고 함&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;address-translation-주소-변환-&quot;&gt;Address Translation (주소 변환) ★★★★★&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Logical address(논리 주소)와 Physical address(물리 주소)는 MMU를 기준으로 나뉨&lt;/li&gt;
  &lt;li&gt;Logical address&lt;br /&gt;
  → CPU가 내는 주소, 2진수(binary)&lt;br /&gt;
  → 전체 &lt;strong&gt;m&lt;/strong&gt;비트, 하위 &lt;strong&gt;n&lt;/strong&gt;비트(offset 또는 &lt;strong&gt;displacement(d)&lt;/strong&gt;), 상위 &lt;strong&gt;m-n&lt;/strong&gt;비트(&lt;strong&gt;page number(p)&lt;/strong&gt;)&lt;/li&gt;
  &lt;li&gt;Address translation: Logical address → Physical address&lt;br /&gt;
  → page number: page table의 index 값&lt;br /&gt;
  → frame number: 해당 page number의 내용&lt;br /&gt;
  → displacement(변위): 변하지 않음
  → page table의 entry 수 = 해당 process가 사용하는 page 수&lt;/li&gt;
  &lt;li&gt;예제 # 01
    &lt;ul&gt;
      &lt;li&gt;page size = 4byte&lt;/li&gt;
      &lt;li&gt;page table: 5 6 1 2&lt;/li&gt;
      &lt;li&gt;logical address = &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;13&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;pysical address = ?&lt;br /&gt;
sol.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;index number&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;page table&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;page size (= frame size) = 4byte = 2^n = 2^2 → &lt;strong&gt;n = 2&lt;/strong&gt;&lt;br /&gt;
logical address: 13(10) = 1101(2)&lt;br /&gt;
logical address = &lt;strong&gt;‘page number(p)’&lt;/strong&gt; + &lt;strong&gt;‘displacement(d)’&lt;/strong&gt;&lt;br /&gt;
logical address의 뒤에서부터 두 자리(=&lt;strong&gt;n&lt;/strong&gt;)는 &lt;strong&gt;(d)&lt;/strong&gt;, 남은 앞의 두 자리는 &lt;strong&gt;(p)&lt;/strong&gt;&lt;br /&gt;
→ p: 11/01 :d&lt;br /&gt;
page number: 11(2) = 3(10)이며, page table 3번 index의 frame number는 2(10) = 10(2)&lt;br /&gt;
pysical address = ‘frame number(&lt;strong&gt;f&lt;/strong&gt;)’ + ‘displacement(&lt;strong&gt;d&lt;/strong&gt;, ※불변)’이므로&lt;br /&gt;
&lt;strong&gt;pysical address&lt;/strong&gt; = 1001(2) = &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;9&lt;/code&gt;(10)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;예제 # 02
    &lt;ul&gt;
      &lt;li&gt;page size = 1KB&lt;/li&gt;
      &lt;li&gt;page table: 1 2 5 4 8 3 0 6&lt;/li&gt;
      &lt;li&gt;logical address = &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3000&lt;/code&gt;, pysical address = ?&lt;/li&gt;
      &lt;li&gt;pysical address = &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x1A53&lt;/code&gt;, logical address = ? &lt;br /&gt;
sol.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;index number&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;page table&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;6&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;7&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;6&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;page size (= frame size) = 1KB = 2^n = 2^10 → &lt;strong&gt;n = 10&lt;/strong&gt;&lt;br /&gt;
logical address: 3000(10) = 1011 1011 1000(2)&lt;br /&gt;
logical address = &lt;strong&gt;‘page number(p)’&lt;/strong&gt; + &lt;strong&gt;‘displacement(d)’&lt;/strong&gt;&lt;br /&gt;
logical address의 뒤에서부터 열 자리(=&lt;strong&gt;n&lt;/strong&gt;)는 &lt;strong&gt;(d)&lt;/strong&gt;, 남은 앞의 두 자리는 &lt;strong&gt;(p)&lt;/strong&gt;&lt;br /&gt;
 → p: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;11 1011 1000&lt;/code&gt; :d&lt;br /&gt;
page number: 10(2) = 2(10)이며, page table 2번 index의 &lt;strong&gt;frame number(f)&lt;/strong&gt;는 5(10) = 101(2)&lt;br /&gt;
pysical address = frame number(&lt;strong&gt;f&lt;/strong&gt;):101(2) + displacement(&lt;strong&gt;d&lt;/strong&gt;, ※불변): 11 1011 1000(2)이므로&lt;br /&gt;
&lt;strong&gt;pysical address&lt;/strong&gt; = 1 0111 1011 1000(2) = &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6072&lt;/code&gt;(10)&lt;/p&gt;

&lt;p&gt;pysical address: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x1A53&lt;/code&gt; = 1 1010 0101 0011(2)&lt;br /&gt;
n = 10, pysical address = ‘frame number(&lt;strong&gt;f&lt;/strong&gt;)’ + ‘displacement(&lt;strong&gt;d&lt;/strong&gt;, ※불변)’이므로&lt;br /&gt;
→ f: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1 10&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10 0101 0011&lt;/code&gt; :d&lt;br /&gt;
frame number: 110(2) = 6(10)이며, frame number 6의 index number는 7(10) = 111(2)&lt;br /&gt;
logical address = page number(&lt;strong&gt;p&lt;/strong&gt;):111(2) + displacement(&lt;strong&gt;d&lt;/strong&gt;, ※불변):10 0101 0011(2)이므로&lt;br /&gt;
&lt;strong&gt;logical address&lt;/strong&gt; = 1 1110 0101 0011(2) = &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x1E53&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;internal-fragmentation내부-단편화&quot;&gt;Internal Fragmentation(내부 단편화)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;process size가 page size의 배수가 아니어서 마지막 page는 한 frame을 다 못 채우는 것&lt;br /&gt;
e.g.) process: 15byte, page size: 4byte 일 때,&lt;br /&gt;
|  4  |  4  |  4  |  3  |으로 마지막 frame의 남은 1byte는 못 쓰게 됨 → 낭비&lt;/li&gt;
  &lt;li&gt;내부 단편화는 비교적 미미한 낭비라 큰 문제는 아님&lt;/li&gt;
  &lt;li&gt;내부 단편화의 최대 크기 = page size - 1byte&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;page-table-만들기&quot;&gt;page table 만들기&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;CPU register&lt;/strong&gt;로 page table 만들기
    &lt;ul&gt;
      &lt;li&gt;CPU 안의 기억장치인 CPU register로 page table을 만들면,&lt;br /&gt;
 → 장점: 주소 변환 &lt;strong&gt;속도 빠름&lt;/strong&gt;&lt;br /&gt;
 → 단점: CPU는 memory가 아니라서 table entry &lt;strong&gt;저장 용량이 작음&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Memory&lt;/strong&gt;로 page table 만들기
    &lt;ul&gt;
      &lt;li&gt;main memory 안에 넣는 방법으로,&lt;br /&gt;
 → 장점: table entry 수가 많아도 &lt;strong&gt;저장 용량에 문제 없음&lt;/strong&gt;&lt;br /&gt;
 → 단점: CPU가 낸 주소는 OS 안으로 가는데 그 주소를 한 번 읽어 frame number를 알아낸 뒤, 해당 frame number의 주소를 또 읽어야 해서 &lt;strong&gt;속도가 두 배로 느림&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;TLB(Translation Look-aside Buffer)&lt;/strong&gt;로 page table 만들기
    &lt;ul&gt;
      &lt;li&gt;주소 변환을 목적으로 별도의 SRAM 칩으로 만듦&lt;/li&gt;
      &lt;li&gt;원리는 cash memory와 비슷&lt;/li&gt;
      &lt;li&gt;CPU보다는 느리지만 보다 많은 entry 저장 가능&lt;/li&gt;
      &lt;li&gt;CPU와 memory의 중간 성격&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Effective Memory Access Time(유효 메모리 접근 시간)&lt;/strong&gt;&lt;br /&gt;
  → CPU가 주소를 내고, 메모리의 내용을 읽어오는데 걸리는 시간&lt;br /&gt;
  → &lt;strong&gt;Tm&lt;/strong&gt;: 메모리 내용을 읽는데 걸리는 시간&lt;br /&gt;
  &lt;strong&gt;Tb&lt;/strong&gt;: buffer를 읽는데 걸리는 시간&lt;br /&gt;
  &lt;strong&gt;hit ratio(h)&lt;/strong&gt;: 주소에 해당하는 page table entry가 buffer에 존재할 확률&lt;br /&gt;
  (buffer의 크기는 충분히 크지 않아서 entry 중 일부만 buffer에 있고 나머지는 memory에 존재)&lt;br /&gt;
  &lt;strong&gt;(★ 중요 예제 ★)&lt;/strong&gt;&lt;br /&gt;
  Tm: 100ns, Tb: 20ns, hit ratio(h): 80% 일때, Teff=?&lt;br /&gt;
  sol.) h(Tb+Tm) + (1-h)(Tb+Tm+Tm)&lt;br /&gt;
  = (0.8*120ns) + (0.2)(220ns)&lt;br /&gt;
  = 140ns&lt;br /&gt;
  → Tm: 100ns인데 40%의 손실이 발생한 결과임&lt;br /&gt;
  → 하지만, 실제 hit ratio는 95%이상이므로 손실은 아주 작음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content>

      
      
      
      
      

      <author>
          <name>ohoraming</name>
        
        
      </author>

      

      
        <category term="OS" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Python(1) - Django 설치</title>
      <link href="https://ohoraming.github.io/Python-django" rel="alternate" type="text/html" title="Python(1) - Django 설치" />
      <published>2022-02-28T22:40:00+09:00</published>
      <updated>2022-02-28T22:40:00+09:00</updated>
      <id>https://ohoraming.github.io/Python-django</id>
      <content type="html" xml:base="https://ohoraming.github.io/Python-django">&lt;!-- 글 작성하기 --&gt;

&lt;!-- 글이 시작될 때 관련 시리즈를 리스트로 보여줌 --&gt;
&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;Python 관련 포스팅&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./Python-django&quot;&gt;Python(1) - Django 설치&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./Python-mysql&quot;&gt;Python(2) - MySQL 연결&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./Python-postgresql&quot;&gt;Python(3) - PostgreSQL 연결&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./Python-making-queries&quot;&gt;Python(4) - Query 만들기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-django-설치&quot;&gt;1. Django 설치&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ python -m pip install Django&lt;/code&gt;입력&lt;br /&gt;
설치 끝나면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;django-admin&lt;/code&gt; 명령을 쓸 수 있음&lt;br /&gt;
→ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ django-admin&lt;/code&gt; 입력시 사용 가능한 서브 명령이 출력됨&lt;/p&gt;

&lt;h2 id=&quot;2-project-시작&quot;&gt;2. Project 시작&lt;/h2&gt;
&lt;h3 id=&quot;2-1-project-생성&quot;&gt;2-1. project 생성&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ django-admin startproject [project 이름]&lt;/code&gt;&lt;br /&gt;
→ 현재 디렉터리에 &lt;strong&gt;project파일이 생성되고&lt;/strong&gt; 그 안에 같은 이름의 project파일이 생김&lt;br /&gt;
&lt;strong&gt;또는,&lt;/strong&gt;&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ django-admin startproject [project 이름] .&lt;/code&gt;&lt;br /&gt;
→ 현재 디렉터리에 project파일이 생성됨&lt;/p&gt;

&lt;h3 id=&quot;2-2-project-파일-구성&quot;&gt;2-2. project 파일 구성&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myproject&lt;/code&gt; 폴더
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  myproject/
      manage.py
      myproject/
          __init__.py
          asgi.py
          settings.py
          urls.py
          wsgi.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;urls.py&lt;/code&gt;파일&lt;br /&gt;
  → 사용자가 접속하는 path에 따라 그 요청 처리를 지정(routing)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-django-실행&quot;&gt;3. Django 실행&lt;/h2&gt;
&lt;h3 id=&quot;3-1-managepy를-이용&quot;&gt;3-1. manage.py를 이용&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ python manage.py&lt;/code&gt;입력시 사용 가능한 서브 명령이 출력됨&lt;br /&gt;
(※ 반드시 현재의 디렉터리가 project폴더인지 확인하기!)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ python manage.py runserver&lt;/code&gt; 입력&lt;br /&gt;
→ 8000번 포트에서 서버가 성공적으로 열림&lt;br /&gt;
(※ python 개발 서버는 기본적으로 8000번 포트에서 리스닝)&lt;/p&gt;

&lt;h3 id=&quot;3-2-서버를-끄고-싶다면&quot;&gt;3-2. 서버를 끄고 싶다면,&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ctrl + c&lt;/code&gt; 입력&lt;/p&gt;
&lt;h3 id=&quot;3-3-포트-번호를-바꾸고-싶다면&quot;&gt;3-3. 포트 번호를 바꾸고 싶다면,&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ python manage.py runserver [바꿀 포트 번호]&lt;/code&gt; 를 입력&lt;/p&gt;

&lt;h2 id=&quot;4-application-설치&quot;&gt;4. Application 설치&lt;/h2&gt;
&lt;h3 id=&quot;4-1-django-admin-startapp-app-이름&quot;&gt;4-1. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;django-admin startapp [app 이름]&lt;/code&gt;&lt;/h3&gt;
&lt;h3 id=&quot;4-2-app-파일-구성&quot;&gt;4-2. app 파일 구성&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp&lt;/code&gt; 폴더
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  myapp/
      migrations/
          __init__.py
      __init__.py
      admin.py
      apps.py
      models.py
      tests.py
      views.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;5-routing&quot;&gt;5. Routing&lt;/h2&gt;
&lt;h3 id=&quot;5-1-projecturlspy-설정&quot;&gt;5-1. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[project]/urls.py&lt;/code&gt; 설정&lt;/h3&gt;
&lt;p&gt;→ 큰 틀의 라우팅은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[project]/urls.py&lt;/code&gt; 에서 지정&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myproject/urls.py&lt;/code&gt;
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.urls&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'myapp.urls'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;→ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;urlpatterns&lt;/code&gt; 정의(routing 관련 정보를 기록)&lt;br /&gt;
  → &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;path()&lt;/code&gt; 를 이용해 url을 넣어줌&lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;path('접속 경로/', include('연결할 app.urls'))&lt;/code&gt;&lt;br /&gt;
  → &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include()&lt;/code&gt;: import 필요&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;→ user 접속시 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp.urls&lt;/code&gt; 로 연결&lt;/p&gt;

&lt;h3 id=&quot;5-2-appurlspy-생성-및-설정&quot;&gt;5-2. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[app]/urls.py&lt;/code&gt; 생성 및 설정&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp/urls.py&lt;/code&gt;
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.urls&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'create/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'read/1/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;→ user가 각 경로로 접속했을 때, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;views.py&lt;/code&gt;로 전달&lt;br /&gt;
→ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;views.py&lt;/code&gt;: client로 정보를 전달할 &lt;strong&gt;함수 작성&lt;/strong&gt;(index, create, read)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp/views.py&lt;/code&gt;
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.http&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.shortcuts&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Create your views here.
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Welcome!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Create!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Read!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;5-3. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[app]/urls.py&lt;/code&gt; 수정&lt;br /&gt;
→ 사용자가 기본 포트로 접속 시, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp/views.py&lt;/code&gt;의 index 함수를 실행하도록 수정&lt;br /&gt;
→ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;views.index&lt;/code&gt; import&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp/urls.py&lt;/code&gt;
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.urls&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;myapp&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;views&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'create/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'read/1/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;cf.) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;path('read/1/', view.read)&lt;/code&gt; 에서 1이 바뀔 수 있는 숫자라면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;&amp;gt;&lt;/code&gt;를 이용해 작성&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp/urls.py&lt;/code&gt;
        &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'read/&amp;lt;id&amp;gt;/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;→ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;views.py&lt;/code&gt;의 read()가 해당 인자(id)를 받아서 처리&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp/views.py&lt;/code&gt;
        &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Read!'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;routing-정리&quot;&gt;&amp;lt;routing 정리&amp;gt;&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;user가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read/1&lt;/code&gt; 경로로 접속시&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myproject/urls.py&lt;/code&gt;로 감
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'myapp.urls'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp/urls.py&lt;/code&gt;로 위임
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'read/&amp;lt;id&amp;gt;/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;위 코드에 걸림&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp/views.py&lt;/code&gt;로 위임
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Read!'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read() 함수&lt;/code&gt;실행&lt;/li&gt;
  &lt;li&gt;client에 반환 값 전송&lt;/li&gt;
&lt;/ol&gt;</content>

      
      
      
      
      

      <author>
          <name>ohoraming</name>
        
        
      </author>

      

      
        <category term="Python" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">OS(10) - Main Memory Management</title>
      <link href="https://ohoraming.github.io/OS-main-memory-mgmt" rel="alternate" type="text/html" title="OS(10) - Main Memory Management" />
      <published>2022-02-24T22:24:00+09:00</published>
      <updated>2022-02-24T22:24:00+09:00</updated>
      <id>https://ohoraming.github.io/OS-main-memory-mgmt</id>
      <content type="html" xml:base="https://ohoraming.github.io/OS-main-memory-mgmt">&lt;!-- 글 작성하기 --&gt;

&lt;!-- 글이 시작될 때 관련 시리즈를 리스트로 보여줌 --&gt;
&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;OS 관련 포스팅&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-intro&quot;&gt;OS(1) - Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-interrupt-based-system&quot;&gt;OS(2) - Interrupt-Based System&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-process-mgmt&quot;&gt;OS(3) - Process Management&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-cpu-scheduling&quot;&gt;OS(4) - CPU Scheduling&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-thread&quot;&gt;OS(5) - Thread&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-classical-sync-problems&quot;&gt;OS(6) - Classical Synchronization Problems&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-deadlock&quot;&gt;OS(7) - Deadlock&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-monitor&quot;&gt;OS(8) - Monitor&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-midterm&quot;&gt;OS(9) - Midterm&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-main-memory-mgmt&quot;&gt;OS(10) - Main Memory Management&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./OS-contiguous-memory-allocation&quot;&gt;OS(11) - Contiguous Memory Allocation&lt;/a&gt;&lt;/li&gt;
    &lt;br /&gt;
    &lt;br /&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;메모리-역사&quot;&gt;메모리 역사&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Core memory&lt;/strong&gt;&lt;br /&gt;
  → 반지 모양의 철심에 자성 물질을 바른 뒤 전기 흘려 자기장이 발생해 순간적으로 자석이 되는 원리를 이용해 메모리를 만듦&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;진공관 메모리&lt;/strong&gt;&lt;br /&gt;
  → 1950s ~ 1960s, 손가락 3-4개 정도의 크기로 1bit 저장시 4-5개 필요&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;트랜지스터 메모리&lt;/strong&gt;&lt;br /&gt;
  → 1960s ~ 1970s, 반도체 칩 안의 소자로 손톱만한 크기&lt;br /&gt;
  → 1bit 저장시 4-6개 필요&lt;/li&gt;
  &lt;li&gt;결국,&lt;br /&gt;
  공간을 많이 차지해 큰 메모리를 저장하기가 힘듦&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;집적회로 메모리&lt;/strong&gt;(현재)&lt;br /&gt;
  → SRAM: 주로 캐시 메모리 만들 때 사용&lt;br /&gt;
  → DRAM: 메인 메모리 만들 때 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;언제나-부족한-메모리&quot;&gt;언제나 부족한 메모리&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;메모리 용량은 1970s(64KB)에서 현재(수GB)로 늘어났지만,&lt;br /&gt;
&lt;strong&gt;프로그램의 크기도 증가&lt;/strong&gt;해 메모리는 여전히 부족함&lt;br /&gt;
→ 과거(1960s)의 &lt;strong&gt;메모리 관리가 여전히 중요&lt;/strong&gt;한 이유&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;메모리의 효과적인 사용&lt;br /&gt;
  → 메모리 낭비 없애기&lt;br /&gt;
  → &lt;strong&gt;virtual memory&lt;/strong&gt;(가상 메모리): 실제 물리적인 memory보다 크게 보이도록 하는 기술&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;프로그램을-메모리에-올리기&quot;&gt;프로그램을 메모리에 올리기&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;메모리 구조&lt;br /&gt;
  → &lt;strong&gt;address&lt;/strong&gt;: cpu가 읽고자하는 memory의 주소&lt;br /&gt;
  → &lt;strong&gt;data&lt;/strong&gt;: 해당 주소에 있는 내용을 cpu에 전송(양방향)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;프로그램 개발
    &lt;ol&gt;
      &lt;li&gt;&lt;strong&gt;source file&lt;/strong&gt;: high level language 또는 assembly language &lt;br /&gt;
 → high level language로 코드 작성&lt;br /&gt;
 → &lt;strong&gt;compiler&lt;/strong&gt;가 compile하면 기계어로 번역됨&lt;br /&gt;
 또는,&lt;br /&gt;
 → assembly language로 코드 작성&lt;br /&gt;
 → &lt;strong&gt;assembler&lt;/strong&gt;가 assemble하면 기계어로 번역됨&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;object file&lt;/strong&gt;: compile 또는 assemble 결과 = 기계어&lt;br /&gt;
 → 유용한 함수들을 모아놓은 library와 object file을 &lt;strong&gt;linker&lt;/strong&gt;가 연결(link)&lt;br /&gt;
 = 실행 파일(exe file)&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;executable file&lt;/strong&gt;: 실행 파일&lt;br /&gt;
 → 하드 디스크에 들어감  &lt;br /&gt;
 → 프로그램을 실행하려면 &lt;strong&gt;loader&lt;/strong&gt;가 main memory에 적재(load)&lt;br /&gt;
 → &lt;strong&gt;‘code + data + stack’&lt;/strong&gt; 으로 구성&lt;br /&gt;
 e.g.) ‘a와 b 중 더 큰 수를 구하라’에서&lt;br /&gt;
 a, b는 &lt;strong&gt;data&lt;/strong&gt;, 더 큰 수를 구하는 것은 &lt;strong&gt;code&lt;/strong&gt;,&lt;br /&gt;
 함수 호출시 돌아오는 주소 저장 또는 지역 변수를 저장하는 것은 &lt;strong&gt;stack&lt;/strong&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;실행 파일을 메모리에 올릴 때,&lt;br /&gt;
몇 번지의 메모리에 올릴지 → &lt;strong&gt;loader&lt;/strong&gt;가 결정&lt;br /&gt;
메인 메모리에 여러 process가 올라와 있다면 → 메모리 번지 변화 → &lt;strong&gt;MMU&lt;/strong&gt;사용&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;MMU&lt;/strong&gt;(&lt;strong&gt;M&lt;/strong&gt;emory &lt;strong&gt;M&lt;/strong&gt;anagement &lt;strong&gt;U&lt;/strong&gt;nit)&lt;br /&gt;
  → CPU와 memory 사이에 존재&lt;br /&gt;
  → base, limit, relocation register 존재&lt;br /&gt;
  → CPU에서 나온 address가 바로 memory로 가는 것을 방지(memory 보호)&lt;br /&gt;
  → 실행 중인 process가 address를 침범하는지 수시로 감시&lt;br /&gt;
  e.g.) main.exe가&lt;br /&gt;
  0번지(→ &lt;strong&gt;logical address&lt;/strong&gt;: CPU가 보내는 주소)에서 실행하도록 프로그래밍 되어있는데, 실행 가능한 메모리는 500번지(→ &lt;strong&gt;physical address&lt;/strong&gt;: 실제 메인 메모리로 가는 주소)가 비어있다면,&lt;br /&gt;
  OS가 MMU의 &lt;strong&gt;relocation register&lt;/strong&gt; 값을 500으로 변경함&lt;br /&gt;
  즉, CPU가 봤을 땐 0번지에서 실행, 실제로는 500번지에서 실행되도록 함&lt;br /&gt;
  (→ &lt;strong&gt;address translation&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;메모리-낭비-방지&quot;&gt;메모리 낭비 방지&lt;/h2&gt;
&lt;h3 id=&quot;1-dynamic-loading동적-적재&quot;&gt;1. Dynamic Loading(동적 적재)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;현대 OS의 처리 방식&lt;/li&gt;
  &lt;li&gt;프로그램 실행에 반드시 필요한 routine/data만 메모리에 적재(load)&lt;/li&gt;
  &lt;li&gt;오류처리, 버퍼 용량, java의 class 등이 항상 다 사용되는 것 아님&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;‘필요할 때’ 해당 부분을 메모리에 올림&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;과거에는 Static Loading(정적 적재)를 많이 했음&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-dynamic-linking동적-연결&quot;&gt;2. Dynamic Linking(동적 연결)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;여러 프로그램에 &lt;strong&gt;공통으로 사용되는 library를 메모리에 중복해 올리면 메모리 낭비&lt;/strong&gt; 발생&lt;/li&gt;
  &lt;li&gt;과거의 &lt;strong&gt;Static linking(정적 연결)&lt;/strong&gt;의 경우, compile후 실행 파일 만들기 전에 link가 일어나 memory 낭비가 있었음&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dynamic Linking(동적 연결)&lt;/strong&gt;은 common library를 제외한 나머지 부분을 memory에 load 후, 실행할 때 lib를 load해 link&lt;/li&gt;
  &lt;li&gt;library routine 연결(link)을 실행(load)할 때로 미루는 방법임&lt;br /&gt;
  → Linux: shared library 확장자 .so(shared object)파일&lt;br /&gt;
  → Windows: Dyanamic Linking Library(DLL) 확장자 .dll파일&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-swapping&quot;&gt;3. Swapping&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;main memory에 적재되어 있지만, 현재는 사용하지 않고 있는 &lt;strong&gt;process image&lt;/strong&gt;를 &lt;strong&gt;backing store&lt;/strong&gt;로 몰아냄&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;backing store&lt;/strong&gt;&lt;br /&gt;
→ 하드 디스크의 일부분으로 실행파일이 저장되어있는 부분(→ &lt;strong&gt;file system&lt;/strong&gt;)과는 다른 곳 &lt;br /&gt;
→ 대략 main memory 정도의 크기면 됨&lt;/li&gt;
  &lt;li&gt;swapping되어 backing store에 들어가면, 해당 main memory 공간은 비워지고 다른 process가 들어갈 수 있게 됨&lt;/li&gt;
  &lt;li&gt;backing store에서 main memory로 복귀시 이전과는 다른 자리에 들어가지만, &lt;strong&gt;relocation register&lt;/strong&gt;를 사용하므로 적재 위치는 무관함&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>ohoraming</name>
        
        
      </author>

      

      
        <category term="OS" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
</feed>
